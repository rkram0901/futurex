"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.carouselBehavior = void 0;
var keyboard_key_1 = require("../../keyboard-key");
/**
 * @description
 * Adds attribute 'role=region' to 'root' slot if 'navigation' property is false. Does not set the attribute otherwise.
 * Adds attribute 'aria-roledescription' to 'root' slot if 'navigation' property is false. Does not set the attribute otherwise.
 * Adds attribute 'aria-label' to 'root' slot if 'navigation' property is false. Does not set the attribute otherwise.
 * Adds attribute 'aria-roledescription' to 'itemsContainer' slot if 'navigation' property is true. Does not set the attribute otherwise.
 * Adds attribute 'aria-label' to 'itemsContainer' slot if 'navigation' property is true. Does not set the attribute otherwise.
 * Adds attribute 'role=region' to 'itemsContainer' slot if 'navigation' property is true.  Set 'role=none' otherwise.
 * Adds attribute 'tabIndex=-1' to 'itemsContainer' slot if 'navigation' property is false. Does not set the attribute otherwise.
 * @specification
 * Adds attribute 'role=region' to 'root' slot.
 * Adds attribute 'aria-live=polite' to 'itemsContainerWrapper' slot if 'ariaLiveOn' property is true. Sets the attribute to 'off' otherwise.
 * Adds attribute 'aria-hidden=true' to 'paddleNext' slot if 'navigation' property is true. Does not set the attribute otherwise.
 * Adds attribute 'aria-hidden=true' to 'paddlePrevious' slot if 'navigation' property is true. Does not set the attribute otherwise.
 * Adds attribute 'tabIndex=-1' to 'paddlePrevious' slot if 'navigation' property is true. Does not set the attribute otherwise.
 * Adds attribute 'tabIndex=-1' to 'paddlePrevious' slot if 'navigation' property is true. Does not set the attribute otherwise.
 * Triggers 'showNextSlideByKeyboardNavigation' action with 'ArrowRight' on 'itemsContainer'.
 * Triggers 'showPreviousSlideByKeyboardNavigation' action with 'ArrowLeft' on 'itemsContainer'.
 * Triggers 'showNextSlideByPaddlePress' action with 'Enter' or 'Spacebar' on 'paddleNext'.
 * Triggers 'showPreviousSlideByPaddlePress' action with 'Enter' or 'Spacebar' on 'paddlePrevious'.
 */
var carouselBehavior = function (props) { return ({
    attributes: {
        root: __assign({}, (!props.navigation && {
            role: 'region',
            'aria-roledescription': props['aria-roledescription'],
            'aria-label': props['aria-label'],
        })),
        itemsContainerWrapper: {
            'aria-live': props.ariaLiveOn ? 'polite' : 'off',
        },
        itemsContainer: __assign({}, (props.navigation
            ? { role: 'region', 'aria-roledescription': props['aria-roledescription'], 'aria-label': props['aria-label'] }
            : { tabIndex: -1, role: 'none' })),
        paddleNext: __assign({}, (props.navigation && {
            tabIndex: -1,
            'aria-hidden': 'true',
        })),
        paddlePrevious: __assign({}, (props.navigation && {
            tabIndex: -1,
            'aria-hidden': 'true',
        })),
    },
    keyActions: {
        itemsContainer: {
            showNextSlideByKeyboardNavigation: {
                keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowRight }],
            },
            showPreviousSlideByKeyboardNavigation: {
                keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.ArrowLeft }],
            },
        },
        paddleNext: {
            showNextSlideByPaddlePress: {
                keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Enter }, { keyCode: keyboard_key_1.SpacebarKey }],
            },
        },
        paddlePrevious: {
            showPreviousSlideByPaddlePress: {
                keyCombinations: [{ keyCode: keyboard_key_1.keyboardKey.Enter }, { keyCode: keyboard_key_1.SpacebarKey }],
            },
        },
    },
}); };
exports.carouselBehavior = carouselBehavior;
