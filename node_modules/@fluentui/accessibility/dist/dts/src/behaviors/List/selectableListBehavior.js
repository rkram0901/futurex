"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectableListBehavior = void 0;
var types_1 = require("../../focusZone/types");
/**
 * @description
 * The listbox role is used to identify an element that creates a list from which a user may select one or more items.
 *
 * @specification
 * Adds role='listbox'.
 * Adds attribute 'tabIndex=-1' to 'root' slot.
 * Adds attribute 'aria-orientation=horizontal' to 'root' slot if 'horizontal' property is true. Does not set the attribute otherwise.
 * Provides arrow key navigation in bidirectionalDomOrder direction.
 */
var selectableListBehavior = function (props) { return ({
    attributes: {
        root: __assign({ role: 'listbox', tabIndex: -1 }, (props.horizontal && {
            'aria-orientation': 'horizontal',
        })),
    },
    focusZone: {
        props: {
            shouldFocusInnerElementWhenReceivedFocus: true,
            direction: types_1.FocusZoneDirection.bidirectionalDomOrder,
        },
    },
}); };
exports.selectableListBehavior = selectableListBehavior;
