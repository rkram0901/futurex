"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.radioGroupItemBehavior = void 0;
var keyboard_key_1 = require("../../keyboard-key");
var attributes_1 = require("../../attributes");
/**
 * @description
 * Provides navigation inside the inner focus zone using Tab key
 * @specification
 *  Adds role='radio'. This allows screen readers to handle the component as a radio button.
 *  Adds attribute 'aria-checked=true' based on the property 'checked'.
 *  Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.
 *  Adds attribute 'data-is-focusable=true' based on the property 'checked'.
 *  Triggers 'performClick' action with 'Spacebar' on 'root'.
 *  Implements roving tabIndex.
 */
var radioGroupItemBehavior = function (props) {
    var _a;
    return ({
        attributes: {
            root: __assign(__assign({ role: 'radio', tabIndex: props.checked ? 0 : -1 }, (props.checked && (_a = {}, _a[attributes_1.IS_FOCUSABLE_ATTRIBUTE] = true, _a))), { 'aria-checked': props.checked, 'aria-disabled': props.disabled }),
        },
        keyActions: {
            root: {
                performClick: {
                    keyCombinations: [{ keyCode: keyboard_key_1.SpacebarKey }],
                },
            },
        },
    });
};
exports.radioGroupItemBehavior = radioGroupItemBehavior;
