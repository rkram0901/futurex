// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { TrouterSettings, TrouterTelemetrySettings } from "@skype/tstrouter";
import { generateUuid } from "@azure/core-http";
import { CommunicationTokenCredential, SignalingClientOptions } from "./SignalingClient";
import { getCloudTypeFromCredential } from "./TrouterUtils";
import {
  PUBLIC_TROUTER_SERVICE_URL,
  PUBLIC_REGISTRAR_SERVICE_URL,
  INT_REGISTRAR_SERVICE_URL,
  INT_TROUTER_SERVICE_URL,
  GCCHIGH_REGISTRAR_SERVICE_URL,
  GCCHIGH_TROUTER_SERVICE_URL,
  DOD_REGISTRAR_SERVICE_URL,
  DOD_TROUTER_SERVICE_URL,
  CloudType
} from "./constants";

const defaultSettings: TrouterSettings = {
  version: "1.0.0", // SignalingClient version, required for trouter connection
  registrationId: "", // Required for trouter connection
  sessionId: "", // Required for trouter connection
  pnhAppId: "AcsWeb",
  pnhTemplate: "AcsWeb_Chat_1.2",
  platform: "SPOOL",
  platformUIVersion: "0.0.0",
  environment: "", // TBD
  productName: "acs-chat-web",
  trouterServiceUrl: PUBLIC_TROUTER_SERVICE_URL,
  registrarServiceUrl: PUBLIC_REGISTRAR_SERVICE_URL,
  registrarRefreshTimeoutInMs: 350000,
  timeoutOptions: {
    connectionTimeoutMs: 20000,
    fetchTimeoutMs: 10000,
    pingTimeoutMs: 40000,
    pongTimeoutMs: 5000,
    maxBackoffMs: 50000,
    requestTimeoutMs: 5000
  },
  maxRegistrationTimeInMs: 7200000
};

const createDefaultSettings = (): TrouterSettings => {
  const settings = defaultSettings;
  settings.registrationId = generateUuid();
  settings.sessionId = generateUuid();
  return settings;
};

const createIntSettings = (): TrouterSettings => {
  const settings = createDefaultSettings();
  settings.pnhAppId = "cns-e2e-test";
  settings.pnhTemplate = "cns-e2e-test:1.2";
  settings.registrarServiceUrl = INT_REGISTRAR_SERVICE_URL;
  settings.trouterServiceUrl = INT_TROUTER_SERVICE_URL;

  return settings;
};

const createGcchSettings = (): TrouterSettings => {
  const settings = createDefaultSettings();
  settings.registrarServiceUrl = GCCHIGH_REGISTRAR_SERVICE_URL;
  settings.trouterServiceUrl = GCCHIGH_TROUTER_SERVICE_URL;

  return settings;
};

const createDodSettings = (): TrouterSettings => {
  const settings = createDefaultSettings();
  settings.registrarServiceUrl = DOD_REGISTRAR_SERVICE_URL;
  settings.trouterServiceUrl = DOD_TROUTER_SERVICE_URL;

  return settings;
};

export const createSettings = async (
  credential: CommunicationTokenCredential,
  options?: SignalingClientOptions
): Promise<TrouterSettings> => {
  let settings: TrouterSettings;

  if (options?.environment === "INT") {
    settings = createIntSettings();
  } else {
    const cloud = await getCloudTypeFromCredential(credential);
    if (cloud === CloudType.GccHigh) {
      settings = createGcchSettings();
    } else if (cloud === CloudType.Dod) {
      settings = createDodSettings();
    } else {
      settings = createDefaultSettings();
    }
  }

  settings.maxRegistrationTimeInMs =
    options?.registrationTimeInMs ?? defaultSettings.maxRegistrationTimeInMs;
  return settings;
};

export const defaultTelemetrySettings: TrouterTelemetrySettings = {
  // TBD Can we hook up OpenTelemetry?
  enabled: false
};
