{"version":3,"file":"safeStringify.js","sourceRoot":"","sources":["../../../../preprocess-dist/acs-ui-common/src/safeStringify.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,KAAc,EAAE,WAAkF,kBAAkB,EAAE,EAAE,KAAmC,EAAsB,EAAE;IACpN,IAAI;QACF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;KAC/C;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjB,OAAO,SAAS,CAAC;KAClB;AACH,CAAC,CAAC;AAEF,6CAA6C;AAC7C,MAAM,kBAAkB,GAAG,GAA+C,EAAE;IAC1E,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;IAC1B,OAAO,SAAS,QAAQ,CAAI,GAAW,EAAE,KAAQ;QAC/C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,OAAO,KAAK,CAAC;SACd;QACD,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACtB,OAAO,aAAa,CAAC;SACtB;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,OAAO,KAAK,CAAC;SACd;IACH,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Wrap JSON.stringify in a try-catch as JSON.stringify throws an exception if it fails.\n *\n * Use this only in areas where the JSON.stringify is non-critical and OK for the JSON.stringify to fail, such as logging.\n *\n * @internal\n */\nexport const _safeJSONStringify = (value: unknown, replacer: ((this: unknown, key: string, value: unknown) => unknown) | undefined = createSafeReplacer(), space?: string | number | undefined): string | undefined => {\n  try {\n    return JSON.stringify(value, replacer, space);\n  } catch (e) {\n    console.error(e);\n    return undefined;\n  }\n};\n\n// Log all visited refs to avoid circular ref\nconst createSafeReplacer = (): (<T>(key: string, value: T) => T | string) => {\n  const visited = new Set();\n  return function replacer<T>(key: string, value: T): T | string {\n    if (typeof value !== 'object') {\n      return value;\n    }\n    if (visited.has(value)) {\n      return 'Visited-Ref';\n    } else {\n      visited.add(value);\n      return value;\n    }\n  };\n};"]}