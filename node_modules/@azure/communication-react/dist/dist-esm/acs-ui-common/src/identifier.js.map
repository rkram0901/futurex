{"version":3,"file":"identifier.js","sourceRoot":"","sources":["../../../../preprocess-dist/acs-ui-common/src/identifier.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommunicationIdentifier, isCommunicationUserIdentifier, isMicrosoftTeamsUserIdentifier, isPhoneNumberIdentifier } from '@azure/communication-common';\nconst COMMUNICATION_USER_PREFIX = '8:acs:';\nconst PHONE_NUMBER_PREFIX = '4:';\nconst TEAMS_DOD_PREFIX = '8:dod:';\nconst TEAMS_GCCH_PREFIX = '8:gcch:';\nconst TEAMS_USER_PREFIX = '8:orgid:';\nconst TEAMS_VISITOR_PREFIX = '8:teamsvisitor:';\n\n/**\n * A string representation of a {@link @azure/communication-common#CommunicationIdentifier}.\n *\n * This string representation of CommunicationIdentifier is guaranteed to be stable for\n * a unique Communication user. Thus,\n * - it can be used to persist a user's identity in external databases.\n * - it can be used as keys into a Map to store data for the user.\n *\n * @public\n */\nexport const toFlatCommunicationIdentifier = (identifier: CommunicationIdentifier): string => {\n  if (isCommunicationUserIdentifier(identifier)) {\n    return identifier.communicationUserId;\n  }\n  if (isMicrosoftTeamsUserIdentifier(identifier)) {\n    if (identifier.isAnonymous) {\n      return TEAMS_VISITOR_PREFIX + identifier.microsoftTeamsUserId;\n    }\n    if (identifier.cloud === 'dod') {\n      return TEAMS_DOD_PREFIX + identifier.microsoftTeamsUserId;\n    }\n    if (identifier.cloud === 'gcch') {\n      return TEAMS_GCCH_PREFIX + identifier.microsoftTeamsUserId;\n    }\n    return TEAMS_USER_PREFIX + identifier.microsoftTeamsUserId;\n  }\n  if (isPhoneNumberIdentifier(identifier)) {\n    return PHONE_NUMBER_PREFIX + identifier.phoneNumber;\n  }\n  return identifier.id;\n};\n\n/**\n * Reverse operation of {@link toFlatCommunicationIdentifier}.\n *\n * @public\n */\nexport const fromFlatCommunicationIdentifier = (id: string): CommunicationIdentifier => {\n  if (id.startsWith(COMMUNICATION_USER_PREFIX)) {\n    // The prefix is preserved for this variant of the identifier.\n    return {\n      communicationUserId: id\n    };\n  }\n  if (id.startsWith(PHONE_NUMBER_PREFIX) || id.startsWith('+')) {\n    const isPhoneNumber = id.startsWith(PHONE_NUMBER_PREFIX) ? id.replace(PHONE_NUMBER_PREFIX, '') : id;\n    return {\n      phoneNumber: isPhoneNumber\n    };\n  }\n  if (id.startsWith(TEAMS_USER_PREFIX)) {\n    return {\n      microsoftTeamsUserId: id.replace(TEAMS_USER_PREFIX, '')\n    };\n  }\n  if (id.startsWith(TEAMS_DOD_PREFIX)) {\n    return {\n      microsoftTeamsUserId: id.replace(TEAMS_DOD_PREFIX, ''),\n      cloud: 'dod'\n    };\n  }\n  if (id.startsWith(TEAMS_GCCH_PREFIX)) {\n    return {\n      microsoftTeamsUserId: id.replace(TEAMS_GCCH_PREFIX, ''),\n      cloud: 'gcch'\n    };\n  }\n  if (id.startsWith(TEAMS_VISITOR_PREFIX)) {\n    return {\n      microsoftTeamsUserId: id.replace(TEAMS_VISITOR_PREFIX, ''),\n      isAnonymous: true\n    };\n  }\n  return {\n    id\n  };\n};\n\n/**\n * Returns a CommunicationIdentifier.\n * @internal\n */\nexport const _toCommunicationIdentifier = (id: string | CommunicationIdentifier): CommunicationIdentifier => {\n  if (typeof id === 'string') {\n    return fromFlatCommunicationIdentifier(id);\n  }\n  return id;\n};"]}