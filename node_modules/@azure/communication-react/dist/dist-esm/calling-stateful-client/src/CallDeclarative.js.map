{"version":3,"file":"CallDeclarative.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/CallDeclarative.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAGlC,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAc1D,MAAM,SAAU,SAAQ,eAAe;IAC9B,GAAG,CAAuB,MAAY,EAAE,IAAO;QACpD,QAAQ,IAAI,EAAE;YACZ,KAAK,gBAAgB;gBACnB;oBACE,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,yBAAyB,CAAC,UAAgB,GAAG,IAAwC;;4BAC5G,OAAO,MAAM,MAAM,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;wBAC9C,CAAC;qBAAA,EAAE,qBAAqB,CAAC,CAAC;iBAC3B;YACH;gBACE,OAAO,KAAK,CAAC,GAAG,CAAC,MAAM,EAAG,IAAY,CAAC,CAAC;SAC3C;IACH,CAAC;CACF;AAED;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,IAAU,EAAE,OAAoB,EAAmB,EAAE;IACnF,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;IACzC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;QACzC,YAAY,EAAE,KAAK;QACnB,KAAK,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,WAAW,EAAE;KACrC,CAAC,CAAC;IACH,OAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,SAAS,CAAqB,CAAC;AACzD,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Call } from '@azure/communication-calling';\nimport { ProxyCallCommon } from './CallDeclarativeCommon';\nimport { CallContext } from './CallContext';\n\n/**\n * TODO: This should likely be exported?\n *\n * @private\n */\nexport interface DeclarativeCall extends Call {\n  /**\n   * Stop any declarative specific subscriptions and remove declarative subscribers.\n   */\n  unsubscribe(): void;\n}\nclass ProxyCall extends ProxyCallCommon implements ProxyHandler<Call> {\n  public get<P extends keyof Call>(target: Call, prop: P): any {\n    switch (prop) {\n      case 'addParticipant':\n        {\n          return this.getContext().withAsyncErrorTeedToState(async function (...args: Parameters<Call['addParticipant']>) {\n            return await target.addParticipant(...args);\n          }, 'Call.addParticipant');\n        }\n      default:\n        return super.get(target, (prop as any));\n    }\n  }\n}\n\n/**\n * Creates a declarative Call by proxying Call with ProxyCall.\n * This should only be used with CallAgentDeclarative as CallAgentDeclarative will add that\n * call to the context properly (need to have the Call in context to update it - CallAgentDeclarative will add Call to\n * context)\n *\n * @param call - Call from SDK\n * @param context - CallContext from StatefulCallClient\n */\nexport const callDeclaratify = (call: Call, context: CallContext): DeclarativeCall => {\n  const proxyCall = new ProxyCall(context);\n  Object.defineProperty(call, 'unsubscribe', {\n    configurable: false,\n    value: () => proxyCall.unsubscribe()\n  });\n  return (new Proxy(call, proxyCall) as DeclarativeCall);\n};"]}