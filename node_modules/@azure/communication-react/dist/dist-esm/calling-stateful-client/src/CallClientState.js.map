{"version":3,"file":"CallClientState.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/CallClientState.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAqalC;;;;GAIG;AACH,MAAM,OAAO,SAAU,SAAQ,KAAK;IAalC,YAAY,MAAuB,EAAE,UAAiB,EAAE,SAAgB;QACtE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,8EAA8E;QAC9E,IAAI,CAAC,SAAS,GAAG,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AudioDeviceInfo, CallDirection, CallEndReason, CallerInfo, CallState as CallStatus, DeviceAccess, DominantSpeakersInfo, LatestMediaDiagnostics, LatestNetworkDiagnostics, MediaStreamType, RemoteParticipantState as RemoteParticipantStatus, ScalingMode, VideoDeviceInfo } from '@azure/communication-calling';\nimport { CommunicationUserKind, MicrosoftTeamsUserKind, PhoneNumberKind, UnknownIdentifierKind, CommunicationIdentifierKind } from '@azure/communication-common';\n\n/**\n * State only version of {@link @azure/communication-calling#CallAgent} except calls is moved to be a child directly of\n * {@link CallClientState} and not included here. The reason to have CallAgent's state proxied is to provide access to\n * displayName. We don't flatten CallAgent.displayName and put it in CallClientState because it would be ambiguious that\n * displayName is actually reliant on the creation/existence of CallAgent to be available.\n *\n * @public\n */\nexport interface CallAgentState {\n  /**\n   * Proxy of {@link @azure/communication-calling#CallAgent.displayName}.\n   */\n  displayName?: string;\n}\n\n/**\n * State only version of {@link @azure/communication-calling#TranscriptionCallFeature}. {@link StatefulCallClient} will\n * automatically listen for transcription state of the call and update the state exposed by {@link StatefulCallClient}\n * accordingly.\n *\n * @public\n */\nexport interface TranscriptionCallFeatureState {\n  /**\n   * Proxy of {@link @azure/communication-calling#TranscriptionCallFeature.isTranscriptionActive}.\n   */\n  isTranscriptionActive: boolean;\n}\n\n/**\n * State only version of {@link @azure/communication-calling#RecordingCallFeature}. {@link StatefulCallClient} will\n * automatically listen for recording state of the call and update the state exposed by {@link StatefulCallClient} accordingly.\n *\n * @public\n */\nexport interface RecordingCallFeatureState {\n  /**\n   * Proxy of {@link @azure/communication-calling#RecordingCallFeature.isRecordingActive}.\n   */\n  isRecordingActive: boolean;\n}\n\n/**\n * State only version of {@link @azure/communication-calling#LocalVideoStream}.\n *\n * @public\n */\nexport interface LocalVideoStreamState {\n  /**\n   * Proxy of {@link @azure/communication-calling#LocalVideoStream.source}.\n   */\n  source: VideoDeviceInfo;\n  /**\n   * Proxy of {@link @azure/communication-calling#LocalVideoStream.mediaStreamType}.\n   */\n  mediaStreamType: MediaStreamType;\n  /**\n   * {@link VideoStreamRendererView} that is managed by createView/disposeView in {@link StatefulCallClient}\n   * API. This can be undefined if the stream has not yet been rendered and defined after createView creates the view.\n   */\n  view?: VideoStreamRendererViewState;\n}\n\n/**\n * State only version of {@link @azure/communication-calling#RemoteVideoStream}.\n *\n * @public\n */\nexport interface RemoteVideoStreamState {\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteVideoStream.id}.\n   */\n  id: number;\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteVideoStream.mediaStreamType}.\n   */\n  mediaStreamType: MediaStreamType;\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteVideoStream.isAvailable}.\n   */\n  isAvailable: boolean;\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteVideoStream.isReceiving}.\n   * @beta\n   */\n  /**\n   * {@link VideoStreamRendererView} that is managed by createView/disposeView in {@link StatefulCallClient}\n   * API. This can be undefined if the stream has not yet been rendered and defined after createView creates the view.\n   */\n  view?: VideoStreamRendererViewState;\n}\n\n/**\n * State only version of {@link @azure/communication-calling#VideoStreamRendererView}. This property is added to the state exposed\n * by {@link StatefulCallClient} by {@link StatefulCallClient.createView} and removed by {@link StatefulCallClient.disposeView}.\n *\n * @public\n */\nexport interface VideoStreamRendererViewState {\n  /**\n   * Proxy of {@link @azure/communication-calling#VideoStreamRendererView.scalingMode}.\n   */\n  scalingMode: ScalingMode;\n  /**\n   * Proxy of {@link @azure/communication-calling#VideoStreamRendererView.isMirrored}.\n   */\n  isMirrored: boolean;\n  /**\n   * Proxy of {@link @azure/communication-calling#VideoStreamRendererView.target}.\n   */\n  target: HTMLElement;\n}\n\n/**\n * State only version of {@link @azure/communication-calling#RemoteParticipant}. {@link StatefulCallClient} will\n * automatically retrieve RemoteParticipants and add their state to the state exposed by {@link StatefulCallClient}.\n *\n * @public\n */\nexport interface RemoteParticipantState {\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteParticipant.identifier}.\n   */\n  identifier: CommunicationUserKind | PhoneNumberKind | MicrosoftTeamsUserKind | UnknownIdentifierKind;\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteParticipant.displayName}.\n   */\n  displayName?: string;\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteParticipant.state}.\n   */\n  state: RemoteParticipantStatus;\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteParticipant.callEndReason}.\n   */\n  callEndReason?: CallEndReason;\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteParticipant.videoStreams} as an object with\n   * {@link RemoteVideoStream} fields keyed by {@link @azure/communication-calling#RemoteVideoStream.id}.\n   */\n  videoStreams: {\n    [key: number]: RemoteVideoStreamState;\n  };\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteParticipant.isMuted}.\n   */\n  isMuted: boolean;\n  /**\n   * Proxy of {@link @azure/communication-calling#RemoteParticipant.isSpeaking}.\n   */\n  isSpeaking: boolean;\n}\n\n/**\n * State only version of {@link @azure/communication-calling#Call}. {@link StatefulCallClient} will automatically\n * retrieve Call's state and add it to the state exposed by {@link StatefulCallClient}.\n *\n * @public\n */\nexport interface CallState {\n  /**\n   * Proxy of {@link @azure/communication-calling#Call.id}.\n   */\n  id: string;\n  /**\n   * Proxy of {@link @azure/communication-calling#Call.callerInfo}.\n   */\n  callerInfo: CallerInfo;\n  /**\n   * Proxy of {@link @azure/communication-calling#Call.state}.\n   */\n  state: CallStatus;\n  /**\n   * Proxy of {@link @azure/communication-calling#Call.callEndReason}.\n   */\n  callEndReason?: CallEndReason;\n  /**\n   * Proxy of {@link @azure/communication-calling#Call.direction}.\n   */\n  direction: CallDirection;\n  /**\n   * Proxy of {@link @azure/communication-calling#Call.isMuted}.\n   */\n  isMuted: boolean;\n  /**\n   * Proxy of {@link @azure/communication-calling#Call.isScreenSharingOn}.\n   */\n  isScreenSharingOn: boolean;\n  /**\n   * Proxy of {@link @azure/communication-calling#DominantSpeakersInfo }.\n   */\n  dominantSpeakers?: DominantSpeakersInfo;\n  /**\n   * Proxy of {@link @azure/communication-calling#Call.localVideoStreams}.\n   */\n  localVideoStreams: LocalVideoStreamState[];\n  /**\n   * Proxy of {@link @azure/communication-calling#Call.remoteParticipants}.\n   * Object with {@link RemoteParticipant} fields keyed by flattened {@link RemoteParticipantState.identifier}.\n   * To obtain a flattened {@link RemoteParticipantState.identifier}, use\n   * {@link @azure/communication-react#toFlatCommunicationIdentifier}.\n   */\n  remoteParticipants: {\n    [keys: string]: RemoteParticipantState;\n  };\n  /**\n   * Stores remote participants that have left the call so that the callEndReason could be retrieved.\n   * Object with {@link RemoteParticipant} fields keyed by flattened {@link RemoteParticipantState.identifier}.\n   * To obtain a flattened {@link RemoteParticipantState.identifier}, use\n   * {@link @azure/communication-react#toFlatCommunicationIdentifier}.\n   */\n  remoteParticipantsEnded: {\n    [keys: string]: RemoteParticipantState;\n  };\n  /**\n   * Proxy of {@link @azure/communication-calling#TranscriptionCallFeature}.\n   */\n  transcription: TranscriptionCallFeatureState;\n  /**\n   * Proxy of {@link @azure/communication-calling#RecordingCallFeature}.\n   */\n  recording: RecordingCallFeatureState;\n  /**\n   * Stores the currently active screenshare participant's key. If there is no screenshare active, then this will be\n   * undefined. You can use this key to access the remoteParticipant data in {@link CallState.remoteParticipants} object.\n   *\n   * Note this only applies to ScreenShare in RemoteParticipant. A local ScreenShare being active will not affect this\n   * property.\n   *\n   * This property is added by the stateful layer and is not a proxy of SDK state\n   */\n  screenShareRemoteParticipant?: string;\n  /**\n   * Stores the local date when the call started on the client. This property is added by the stateful layer and is not\n   * a proxy of SDK state.\n   */\n  startTime: Date;\n  /**\n   * Stores the local date when the call ended on the client. This property is added by the stateful layer and is not\n   * a proxy of SDK state.\n   */\n  endTime: Date | undefined;\n\n  /**\n   * Stores the latest call diagnostics.\n   */\n  diagnostics: DiagnosticsCallFeatureState;\n}\n\n/**\n * State only version of {@link @azure/communication-calling#IncomingCall}. {@link StatefulCallClient} will\n * automatically detect incoming calls and add their state to the state exposed by {@link StatefulCallClient}.\n *\n * @public\n */\nexport interface IncomingCallState {\n  /**\n   * Proxy of {@link @azure/communication-calling#IncomingCall.id}.\n   */\n  id: string;\n  /**\n   * Proxy of {@link @azure/communication-calling#IncomingCall.callerInfo}.\n   */\n  callerInfo: CallerInfo;\n  /**\n   * Set to the state returned by 'callEnded' event on {@link @azure/communication-calling#IncomingCall} when received.\n   * This property is added by the stateful layer and is not a proxy of SDK state.\n   */\n  callEndReason?: CallEndReason;\n  /**\n   * Stores the local date when the call started on the client. This property is added by the stateful layer and is not\n   * a proxy of SDK state.\n   */\n  startTime: Date;\n  /**\n   * Stores the local date when the call ended on the client. This property is added by the stateful layer and is not a\n   * proxy of SDK state. It is undefined if the call is not ended yet.\n   */\n  endTime?: Date;\n}\n\n/**\n * This type is meant to encapsulate all the state inside {@link @azure/communication-calling#DeviceManager}. For\n * optional parameters they may not be available until permission is granted by the user. The cameras, microphones,\n * speakers, and deviceAccess states will be empty until the corresponding\n * {@link @azure/communication-calling#DeviceManager}'s getCameras, getMicrophones, getSpeakers, and askDevicePermission\n * APIs are called and completed.\n *\n * @public\n */\nexport type DeviceManagerState = {\n  /**\n   * Proxy of {@link @azure/communication-calling#DeviceManager.isSpeakerSelectionAvailable}.\n   */\n  isSpeakerSelectionAvailable: boolean;\n  /**\n   * Proxy of {@link @azure/communication-calling#DeviceManager.selectedMicrophone}.\n   */\n  selectedMicrophone?: AudioDeviceInfo;\n  /**\n   * Proxy of {@link @azure/communication-calling#DeviceManager.selectedSpeaker}.\n   */\n  selectedSpeaker?: AudioDeviceInfo;\n  /**\n   * Stores the selected camera device info. This is added by the stateful layer and does not exist in the Calling SDK.\n   * It is meant as a convenience to the developer. It must be explicitly set before it has any value and does not\n   * persist across instances of the {@link StatefulCallClient}. The developer controls entirely what this value holds\n   * at any time.\n   */\n  selectedCamera?: VideoDeviceInfo;\n  /**\n   * Stores any cameras data returned from {@link @azure/communication-calling#DeviceManager.getCameras}.\n   */\n  cameras: VideoDeviceInfo[];\n  /**\n   * Stores any microphones data returned from {@link @azure/communication-calling#DeviceManager.getMicrophones}.\n   */\n  microphones: AudioDeviceInfo[];\n  /**\n   * Stores any speakers data returned from {@link @azure/communication-calling#DeviceManager.getSpeakers}.\n   */\n  speakers: AudioDeviceInfo[];\n  /**\n   * Stores deviceAccess data returned from {@link @azure/communication-calling#DeviceManager.askDevicePermission}.\n   */\n  deviceAccess?: DeviceAccess;\n  /**\n   * Stores created views that are not associated with any CallState (when {@link StatefulCallClient.createView} is\n   * called with undefined callId, undefined participantId, and defined LocalVideoStream).\n   *\n   * The values in this array are generated internally when {@link StatefulCallClient.createView} is called and are\n   * considered immutable.\n   */\n  unparentedViews: LocalVideoStreamState[];\n};\n\n/**\n * Container for all of the state data proxied by {@link StatefulCallClient}. The calls, callsEnded, incomingCalls, and\n * incomingCallsEnded states will be automatically provided if a callAgent has been created. The deviceManager will be\n * empty initially until populated see {@link DeviceManagerState}. The userId state is provided as a convenience for the\n * developer and is completely controled and set by the developer.\n *\n * @public\n */\nexport interface CallClientState {\n  /**\n   * Proxy of {@link @azure/communication-calling#CallAgent.calls} as an object with CallState {@link CallState} fields.\n   * It is keyed by {@link @azure/communication-calling#Call.id}. Please note that\n   * {@link @azure/communication-calling#Call.id} could change. You should not cache the id itself but the entire\n   * {@link @azure/communication-calling#Call} and then use the id contained to look up data in this map.\n   */\n  calls: {\n    [key: string]: CallState;\n  };\n  /**\n   * Calls that have ended are stored here so the callEndReason could be checked.\n   * It is an object with {@link @azure/communication-calling#Call.id} keys and {@link CallState} values.\n   *\n   * Only {@link MAX_CALL_HISTORY_LENGTH} Calls are kept in the history. Oldest calls are evicted if required.\n   */\n  callsEnded: {\n    [key: string]: CallState;\n  };\n  /**\n   * Proxy of {@link @azure/communication-calling#IncomingCall} as an object with {@link IncomingCall} fields.\n   * It is keyed by {@link @azure/communication-calling#IncomingCall.id}.\n   */\n  incomingCalls: {\n    [key: string]: IncomingCallState;\n  };\n  /**\n   * Incoming Calls that have ended are stored here so the callEndReason could be checked.\n   * It is an as an object with {@link @azure/communication-calling#Call.id} keys and {@link IncomingCall} values.\n   *\n   * Only {@link MAX_CALL_HISTORY_LENGTH} Calls are kept in the history. Oldest calls are evicted if required.\n   */\n  incomingCallsEnded: {\n    [key: string]: IncomingCallState;\n  };\n  /**\n   * Proxy of {@link @azure/communication-calling#DeviceManager}. Please review {@link DeviceManagerState}.\n   */\n  deviceManager: DeviceManagerState;\n  /**\n   * Proxy of {@link @azure/communication-calling#CallAgent}. Please review {@link CallAgentState}.\n   */\n  callAgent?: CallAgentState;\n  /**\n   * Stores a userId. This is not used by the {@link StatefulCallClient} and is provided here as a convenience for the\n   * developer for easier access to userId. Must be passed in at initialization of the {@link StatefulCallClient}.\n   * Completely controlled by the developer.\n   */\n  userId: CommunicationIdentifierKind;\n  /**\n   * Stores the latest error for each API method.\n   *\n   * See documentation of {@Link CallErrors} for details.\n   */\n  latestErrors: CallErrors;\n}\n\n/**\n * Errors teed from API calls to the Calling SDK.\n *\n * Each property in the object stores the latest error for a particular SDK API method.\n *\n * Errors from this object can be cleared using the {@link newClearCallErrorsModifier}.\n * Additionally, errors are automatically cleared when:\n * - The state is cleared.\n * - Subsequent calls to related API methods succeed.\n * See documentation of individual stateful client methods for details on when errors may be automatically cleared.\n *\n * @public\n */\nexport type CallErrors = { [target in CallErrorTarget]: CallError };\n\n/**\n * Error thrown from failed stateful API methods.\n *\n * @public\n */\nexport class CallError extends Error {\n  /**\n   * The API method target that failed.\n   */\n  public target: CallErrorTarget;\n  /**\n   * Error thrown by the failed SDK method.\n   */\n  public innerError: Error;\n  /**\n   * Timestamp added to the error by the stateful layer.\n   */\n  public timestamp: Date;\n  constructor(target: CallErrorTarget, innerError: Error, timestamp?: Date) {\n    super();\n    this.target = target;\n    this.innerError = innerError;\n    // Testing note: It is easier to mock Date::now() than the Date() constructor.\n    this.timestamp = timestamp ?? new Date(Date.now());\n    this.name = 'CallError';\n    this.message = `${this.target}: ${this.innerError.message}`;\n  }\n}\n\n/**\n * String literal type for all permissible keys in {@Link CallErrors}.\n *\n * @public\n */\nexport type CallErrorTarget = 'Call.addParticipant' | 'Call.feature' | 'Call.hangUp' | 'Call.hold' | 'Call.mute' | 'Call.off' | 'Call.on' | 'Call.removeParticipant' | 'Call.resume' | 'Call.sendDtmf' | 'Call.startScreenSharing' | 'Call.startVideo' | 'Call.stopScreenSharing' | 'Call.stopVideo' | 'Call.unmute' | 'CallAgent.dispose' | 'CallAgent.feature' | 'CallAgent.join' | 'CallAgent.off' | 'CallAgent.on' | 'CallAgent.startCall' | 'CallClient.createCallAgent' | 'CallClient.feature' | 'CallClient.getDeviceManager' | 'DeviceManager.askDevicePermission' | 'DeviceManager.getCameras' | 'DeviceManager.getMicrophones' | 'DeviceManager.getSpeakers' | 'DeviceManager.off' | 'DeviceManager.on' | 'DeviceManager.selectMicrophone' | 'DeviceManager.selectSpeaker' | 'IncomingCall.accept' | 'IncomingCall.reject';\n\n/**\n * State only proxy for {@link @azure/communication-calling#DiagnosticsCallFeature}.\n *\n * @public\n */\nexport interface DiagnosticsCallFeatureState {\n  /**\n   * Stores diagnostics related to network conditions.\n   */\n  network: NetworkDiagnosticsState;\n\n  /**\n   * Stores diagnostics related to media quality.\n   */\n  media: MediaDiagnosticsState;\n}\n\n/**\n * State only proxy for {@link @azure/communication-calling#NetworkDiagnostics}.\n *\n * @public\n */\nexport interface NetworkDiagnosticsState {\n  latest: LatestNetworkDiagnostics;\n}\n\n/**\n * State only proxy for {@link @azure/communication-calling#MediaDiagnostics}.\n *\n * @public\n */\nexport interface MediaDiagnosticsState {\n  latest: LatestMediaDiagnostics;\n}"]}