{"version":3,"file":"TranscriptionSubscriber.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/TranscriptionSubscriber.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAMlC;;GAEG;AACH,MAAM,OAAO,uBAAuB;IAIlC,YAAY,SAAoB,EAAE,OAAoB,EAAE,aAAuC;QAYvF,cAAS,GAAG,GAAS,EAAE;YAC7B,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,8BAA8B,EAAE,IAAI,CAAC,4BAA4B,CAAC,CAAC;QAC5F,CAAC,CAAC;QACK,gBAAW,GAAG,GAAS,EAAE;YAC9B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,8BAA8B,EAAE,IAAI,CAAC,4BAA4B,CAAC,CAAC;QAC7F,CAAC,CAAC;QACM,iCAA4B,GAAG,GAAS,EAAE;YAChD,IAAI,CAAC,QAAQ,CAAC,0BAA0B,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC;QAC9G,CAAC,CAAC;QAnBA,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QAEpC,mHAAmH;QACnH,sBAAsB;QACtB,IAAI,IAAI,CAAC,cAAc,CAAC,qBAAqB,EAAE;YAC7C,IAAI,CAAC,QAAQ,CAAC,0BAA0B,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC;SAC7G;QACD,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;CAUF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TranscriptionCallFeature } from '@azure/communication-calling';\nimport { CallContext } from './CallContext';\nimport { CallIdRef } from './CallIdRef';\n\n/**\n * @private\n */\nexport class TranscriptionSubscriber {\n  private _callIdRef: CallIdRef;\n  private _context: CallContext;\n  private _transcription: TranscriptionCallFeature;\n  constructor(callIdRef: CallIdRef, context: CallContext, transcription: TranscriptionCallFeature) {\n    this._callIdRef = callIdRef;\n    this._context = context;\n    this._transcription = transcription;\n\n    // If transcription as already started when we joined the call, make sure it is reflected in state as there may not\n    // be an event for it.\n    if (this._transcription.isTranscriptionActive) {\n      this._context.setCallTranscriptionActive(this._callIdRef.callId, this._transcription.isTranscriptionActive);\n    }\n    this.subscribe();\n  }\n  private subscribe = (): void => {\n    this._transcription.on('isTranscriptionActiveChanged', this.isTranscriptionActiveChanged);\n  };\n  public unsubscribe = (): void => {\n    this._transcription.off('isTranscriptionActiveChanged', this.isTranscriptionActiveChanged);\n  };\n  private isTranscriptionActiveChanged = (): void => {\n    this._context.setCallTranscriptionActive(this._callIdRef.callId, this._transcription.isTranscriptionActive);\n  };\n}"]}