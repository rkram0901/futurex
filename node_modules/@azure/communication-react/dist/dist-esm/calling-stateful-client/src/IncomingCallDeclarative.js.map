{"version":3,"file":"IncomingCallDeclarative.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/IncomingCallDeclarative.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAYlC;;GAEG;AACH,MAAM,OAAO,iBAAiB;IAE5B,YAAY,OAAoB;QAC9B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IACM,GAAG,CAA+B,MAAoB,EAAE,IAAO;QACpE,QAAQ,IAAI,EAAE;YACZ,KAAK,QAAQ;gBACX;oBACE,OAAO,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,UAAgB,GAAG,IAAwC;;4BACxG,OAAO,MAAM,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;wBACtC,CAAC;qBAAA,EAAE,qBAAqB,CAAC,CAAC;iBAC3B;YACH,KAAK,QAAQ;gBACX;oBACE,OAAO,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,UAAgB,GAAG,IAAwC;;4BACxG,OAAO,MAAM,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;wBACtC,CAAC;qBAAA,EAAE,qBAAqB,CAAC,CAAC;iBAC3B;YACH;gBACE,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SACpC;IACH,CAAC;CACF;AAED;;;;GAIG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,YAAgC,EAAE,OAAoB,EAA2B,EAAE;IACzH,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACzD,OAAQ,IAAI,KAAK,CAAC,YAAY,EAAE,iBAAiB,CAA6B,CAAC;AACjF,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { IncomingCall } from '@azure/communication-calling';\nimport { IncomingCallCommon } from './BetaToStableTypes';\nimport { CallContext } from './CallContext';\n\n/**\n * @beta\n * Proxies the {@link @azure/communication-calling#IncomingCall} interface.\n */\nexport type DeclarativeIncomingCall = IncomingCall;\n\n/**\n * @private\n */\nexport class ProxyIncomingCall implements ProxyHandler<DeclarativeIncomingCall> {\n  private _context: CallContext;\n  constructor(context: CallContext) {\n    this._context = context;\n  }\n  public get<P extends keyof IncomingCall>(target: IncomingCall, prop: P): any {\n    switch (prop) {\n      case 'accept':\n        {\n          return this._context.withAsyncErrorTeedToState(async function (...args: Parameters<IncomingCall['accept']>) {\n            return await target.accept(...args);\n          }, 'IncomingCall.accept');\n        }\n      case 'reject':\n        {\n          return this._context.withAsyncErrorTeedToState(async function (...args: Parameters<IncomingCall['reject']>) {\n            return await target.reject(...args);\n          }, 'IncomingCall.reject');\n        }\n      default:\n        return Reflect.get(target, prop);\n    }\n  }\n}\n\n/**\n * Creates a declarative Incoming Call by proxying IncomingCall using ProxyIncomingCall.\n * @param incomingCall - IncomingCall from SDK\n * @returns proxied IncomingCall\n */\nexport const incomingCallDeclaratify = (incomingCall: IncomingCallCommon, context: CallContext): DeclarativeIncomingCall => {\n  const proxyIncomingCall = new ProxyIncomingCall(context);\n  return (new Proxy(incomingCall, proxyIncomingCall) as DeclarativeIncomingCall);\n};"]}