{"version":3,"file":"CallContext.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/CallContext.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAIlC,OAAO,EAAe,kBAAkB,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC7E,OAAO,YAAY,MAAM,QAAQ,CAAC;AAClC,OAAO,EAAE,YAAY,EAAE,aAAa,EAAS,OAAO,EAAE,MAAM,OAAO,CAAC;AAEpE,OAAO,EAAE,kBAAkB,EAAE,6BAA6B,EAAE,gCAAgC;AAC5F,OAAO,EAAmM,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC/O,OAAO,EAAE,qBAAqB,EAAE,MAAM,UAAU,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,YAAY,EAAE,CAAC;AACf,qDAAqD;AACrD,aAAa,EAAE,CAAC;AAEhB,2CAA2C;AAC3C;;GAEG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,EAAE,CAAC;AAE1C;;GAEG;AACH,MAAM,OAAO,WAAW;IAMtB,YAAY,MAAmC,EAAE,YAAY,GAAG,EAAE,EAAE,6CAA6C,CAAA,iBAA0B;QADnI,mBAAc,GAAkB,IAAI,aAAa,EAAE,CAAC;QAE1D,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,qCAAqC,CAAC,CAAC;QACzE,IAAI,CAAC,MAAM,GAAG;YACZ,KAAK,EAAE,EAAE;YACT,UAAU,EAAE,EAAE;YACd,aAAa,EAAE,EAAE;YACjB,kBAAkB,EAAE,EAAE;YACtB,aAAa,EAAE;gBACb,2BAA2B,EAAE,KAAK;gBAClC,OAAO,EAAE,EAAE;gBACX,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,EAAE;gBACZ,eAAe,EAAE,EAAE;aACpB;YACD,SAAS,EAAE,SAAS;YACpB,MAAM,EAAE,MAAM;YACd,YAAY,EAAG,EAAiB;SACjC,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACrB,CAAC;IACM,QAAQ;QACb,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACM,WAAW,CAAC,QAA0C;QAC3D,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,OAAgB,EAAE,EAAE;YAChE,IAAI,WAAW,EAAE,KAAK,SAAS,EAAE;gBAC/B,0EAA0E;gBAC1E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aACnE;QACH,CAAC,CAAC,CAAC;QACH,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACjD;IACH,CAAC;IACM,aAAa,CAAC,OAAyC;QAC5D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IAC5C,CAAC;IACM,cAAc,CAAC,OAAyC;QAC7D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED,qHAAqH;IACrH,kHAAkH;IAClH,WAAW;IACJ,qBAAqB;QAC1B,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,aAAa,GAAG,EAAE,CAAC;YACzB,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC;YACtB,KAAK,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IACM,YAAY,CAAC,SAAyB;QAC3C,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;IACM,OAAO,CAAC,IAAe;QAC5B,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC/D,MAAM,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC/C,IAAI,YAAY,EAAE;gBAChB,YAAY,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC1C,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBAChC,YAAY,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBAChD,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;gBACxC,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBACpC,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;gBACxD,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;gBACxD,YAAY,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;gBAC1D,YAAY,CAAC,aAAa,CAAC,qBAAqB,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC;gBAC5F,YAAY,CAAC,SAAS,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,uFAAuF;aACrK;iBAAM;gBACL,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;aAClC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,UAAU,CAAC,MAAc;QAC9B,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC;IACM,YAAY,CAAC,MAAc,EAAE,aAAwC;QAC1E,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC9D,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YACvC,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC1B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;gBACnC,OAAO,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gBACjC,iFAAiF;gBACjF,sFAAsF;gBACtF,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM,IAAI,uBAAuB,EAAE;oBACtE,OAAO,KAAK,CAAC,UAAU,CAAC,mBAAmB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;iBAChE;gBACD,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;aACvC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,YAAY,CAAC,MAAc,EAAE,KAAiB;QACnD,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACpB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,SAAS,CAAC,SAAiB,EAAE,SAAiB;QACnD,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC9D,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACpC,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC;gBACpB,OAAO,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAC9B,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;aAC/B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,wBAAwB,CAAC,MAAc,EAAE,iBAA0B;QACxE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;aAC5C;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,yBAAyB,CAAC,MAAc,EAAE,oBAA8C,EAAE,uBAAiC;QAChI,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,uBAAuB,CAAC,OAAO,CAAC,CAAC,EAAU,EAAE,EAAE;oBAC7C,OAAO,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;gBACrC,CAAC,CAAC,CAAC;gBACH,oBAAoB,CAAC,OAAO,CAAC,CAAC,WAAmC,EAAE,EAAE;oBACnE,IAAI,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,GAAG,WAAW,CAAC;gBAC/F,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,8BAA8B,CAAC,MAAc,EAAE,oBAA8C,EAAE,uBAAiC;QACrI,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,uBAAuB,CAAC,OAAO,CAAC,CAAC,EAAU,EAAE,EAAE;oBAC7C,OAAO,IAAI,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC;gBAC1C,CAAC,CAAC,CAAC;gBACH,oBAAoB,CAAC,OAAO,CAAC,CAAC,WAAmC,EAAE,EAAE;oBACnE,IAAI,CAAC,uBAAuB,CAAC,6BAA6B,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,GAAG,WAAW,CAAC;gBACpG,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,uBAAuB,CAAC,MAAc,EAAE,OAAgC;QAC7E,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;aAClC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,wBAAwB,CAAC,MAAc,EAAE,iBAA0B;QACxE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC;aAClC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,uBAAuB,CAAC,MAAc,EAAE,gBAAsC;QACnF,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;aAC1C;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,sBAAsB,CAAC,MAAc,EAAE,iBAA0B;QACtE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,SAAS,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;aACtD;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,0BAA0B,CAAC,MAAc,EAAE,qBAA8B;QAC9E,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,aAAa,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;aAClE;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,6BAA6B,CAAC,MAAc,EAAE,cAAkC;QACrF,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,4BAA4B,GAAG,cAAc,CAAC;aACpD;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,+BAA+B,CAAC,MAAc,EAAE,IAA8C;QACnG,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;oBACrC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;iBACvC;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,mBAAmB,CAAC,MAAc,EAAE,cAAsB,EAAE,KAA8B;QAC/F,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;gBAC5D,IAAI,WAAW,EAAE;oBACf,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC;iBAC3B;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,qBAAqB,CAAC,MAAc,EAAE,cAAsB,EAAE,KAAc;QACjF,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;gBAC5D,IAAI,WAAW,EAAE;oBACf,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;iBAC7B;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,yBAAyB,CAAC,MAAc,EAAE,cAAsB,EAAE,WAAmB;QAC1F,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;gBAC5D,IAAI,WAAW,EAAE;oBACf,WAAW,CAAC,WAAW,GAAG,WAAW,CAAC;iBACvC;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,wBAAwB,CAAC,MAAc,EAAE,cAAsB,EAAE,UAAmB;QACzF,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;gBAC5D,IAAI,WAAW,EAAE;oBACf,WAAW,CAAC,UAAU,GAAG,UAAU,CAAC;iBACrC;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,yBAAyB,CAAC,MAAc,EAAE,cAAsB,EAAE,MAA8B;QACrG,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;gBAC5D,IAAI,WAAW,EAAE;oBACf,sGAAsG;oBACtG,mDAAmD;oBACnD,MAAM,cAAc,GAAG,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;oBAC3D,IAAI,cAAc,EAAE;wBAClB,cAAc,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;wBAChD,cAAc,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;qBACzD;yBAAM;wBACL,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;qBAC9C;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,+BAA+B,CAAC,MAAc,EAAE,cAAsB,EAAE,QAAgB,EAAE,WAAoB;QACnH,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;gBAC5D,IAAI,WAAW,EAAE;oBACf,MAAM,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;oBAClD,IAAI,MAAM,EAAE;wBACV,MAAM,CAAC,WAAW,GAAG,WAAW,CAAC;qBAClC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,qBAAqB,CAAC,MAAc,EAAE,cAAsB,EAAE,oBAA8C,EAAE,uBAAiC;QACpJ,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;gBAC5D,IAAI,WAAW,EAAE;oBACf,KAAK,MAAM,EAAE,IAAI,uBAAuB,EAAE;wBACxC,OAAO,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;qBACrC;oBACD,KAAK,MAAM,SAAS,IAAI,oBAAoB,EAAE;wBAC5C,yGAAyG;wBACzG,6EAA6E;wBAC7E,MAAM,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;wBACtD,IAAI,MAAM,EAAE;4BACV,MAAM,CAAC,eAAe,GAAG,SAAS,CAAC,eAAe,CAAC;4BACnD,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;yBAC5C;6BAAM;4BACL,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC;yBACpD;qBACF;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,gCAAgC,CAAC,MAAc,EAAE,cAAsB,EAAE,QAAgB,EAAE,IAA8C;QAC9I,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;gBAC5D,IAAI,WAAW,EAAE;oBACf,MAAM,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;oBAClD,IAAI,MAAM,EAAE;wBACV,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;qBACpB;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,mCAAmC,CAAC,MAAc,EAAE,cAAsB,EAAE,QAAgB,EAAE,WAAwB;QAC3H,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;gBAC5D,IAAI,WAAW,EAAE;oBACf,MAAM,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;oBAClD,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;wBACzB,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;qBACvC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,eAAe,CAAC,IAAuB;QAC5C,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClD,IAAI,YAAY,EAAE;gBAChB,YAAY,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;aAC3C;iBAAM;gBACL,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;aACrC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,kBAAkB,CAAC,MAAc;QACtC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,OAAO,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IACM,oBAAoB,CAAC,MAAc,EAAE,aAAwC;QAClF,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC1B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;gBACnC,OAAO,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBACnC,iFAAiF;gBACjF,sFAAsF;gBACtF,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,MAAM,IAAI,uBAAuB,EAAE;oBAC9E,OAAO,KAAK,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;iBAChF;gBACD,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACzC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,2CAA2C,CAAC,2BAAoC;QACrF,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,aAAa,CAAC,2BAA2B,GAAG,2BAA2B,CAAC;QAChF,CAAC,CAAC,CAAC;IACL,CAAC;IACM,kCAAkC,CAAC,kBAAoC;QAC5E,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,aAAa,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC;IACM,+BAA+B,CAAC,eAAiC;QACtE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,aAAa,CAAC,eAAe,GAAG,eAAe,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC;IACM,8BAA8B,CAAC,cAAgC;QACpE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,aAAa,CAAC,cAAc,GAAG,cAAc,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC;IACM,uBAAuB,CAAC,OAA0B;QACvD,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C;;;;eAIG;YACH,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,WAAC,OAAA,MAAM,CAAC,EAAE,MAAK,MAAA,KAAK,CAAC,aAAa,CAAC,cAAc,0CAAE,EAAE,CAAA,CAAA,EAAA,CAAC,EAAE;gBACvG,KAAK,CAAC,aAAa,CAAC,cAAc,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;aACjD;YACD,KAAK,CAAC,aAAa,CAAC,OAAO,GAAG,OAAO,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IACM,2BAA2B,CAAC,WAA8B;QAC/D,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,aAAa,CAAC,WAAW,GAAG,WAAW,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC;IACM,wBAAwB,CAAC,QAA2B;QACzD,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IACM,4BAA4B,CAAC,YAA0B;QAC5D,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,aAAa,CAAC,YAAY,GAAG,YAAY,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;IACM,8BAA8B,CAAC,gBAAuC,EAAE,IAA8C;QAC3H,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC;gBACvC,MAAM,EAAE,gBAAgB,CAAC,MAAM;gBAC/B,eAAe,EAAE,gBAAgB,CAAC,eAAe;gBACjD,IAAI,EAAE,IAAI;aACX,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IACM,iCAAiC,CAAC,gBAAuC;QAC9E,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,gBAAgB,CAAC,MAAM,CAAC,EAAE,IAAI,MAAM,CAAC,eAAe,KAAK,gBAAgB,CAAC,eAAe,CAAC,CAAC;YAC3L,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;gBACrB,KAAK,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;aAC3D;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,uBAAuB;QAC5B,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAC1B,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;;;;OAOG;IACI,yBAAyB,CAA4B,MAAqC,EAAE,MAAuB;QACxH,OAAO,CAAO,GAAG,IAAU,EAAc,EAAE;YACzC,IAAI;gBACF,OAAO,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;aAC9B;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBAC7C,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;gBACvC,MAAM,SAAS,CAAC;aACjB;QACH,CAAC,CAAA,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACI,oBAAoB,CAA4B,MAA4B,EAAE,MAAuB;QAC1G,OAAO,CAAC,GAAG,IAAU,EAAK,EAAE;YAC1B,IAAI;gBACF,qBAAqB,CAAC,IAAI,CAAC,mDAAmD,MAAM,EAAE,CAAC,CAAC;gBACxF,OAAO,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;aACxB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBAC7C,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;gBACvC,MAAM,SAAS,CAAC;aACjB;QACH,CAAC,CAAC;IACJ,CAAC;IACO,cAAc,CAAC,MAAuB,EAAE,KAAgB;QAC9D,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AACD,MAAM,WAAW,GAAG,CAAC,MAAuB,EAAE,KAAc,EAAa,EAAE;IACzE,IAAI,KAAK,YAAY,KAAK,EAAE;QAC1B,OAAO,IAAI,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACrC;IACD,OAAO,IAAI,SAAS,CAAC,MAAM,EAAE,IAAI,KAAK,CAAE,KAAgB,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC;AACF,MAAM,mBAAmB,GAAG,CAAC,KAI5B,EAAU,EAAE;;IACX,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IAChD,IAAI,UAAU,CAAC,OAAO,KAAK,SAAS,EAAE;QACpC,OAAO,YAAY,CAAC;KACrB;IACD,KAAK,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;QACjD,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;YAC9B,OAAO,MAAM,CAAC;SACf;QACD,IAAI,CAAC,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,EAAE,mCAAI,CAAC,CAAC,GAAG,CAAC,MAAA,MAAA,UAAU,CAAC,OAAO,0CAAE,OAAO,EAAE,mCAAI,CAAC,CAAC,EAAE;YACzE,CAAC,YAAY,EAAE,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SAC7C;KACF;IACD,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommunicationIdentifierKind } from '@azure/communication-common';\nimport { AudioDeviceInfo, DeviceAccess, DominantSpeakersInfo, ScalingMode, VideoDeviceInfo } from '@azure/communication-calling';\nimport { AzureLogger, createClientLogger, getLogLevel } from '@azure/logger';\nimport EventEmitter from 'events';\nimport { enableMapSet, enablePatches, Patch, produce } from 'immer';\nimport { CallEndReason, CallState as CallStatus, RemoteParticipantState as RemoteParticipantStatus } from '@azure/communication-calling';\nimport { _safeJSONStringify, toFlatCommunicationIdentifier } from '@internal/acs-ui-common';\nimport { CallState, CallClientState, LocalVideoStreamState, RemoteParticipantState, RemoteVideoStreamState, IncomingCallState, VideoStreamRendererViewState, CallAgentState, CallErrors, CallErrorTarget, CallError } from './CallClientState';\nimport { callingStatefulLogger } from './Logger';\nimport { CallIdHistory } from './CallIdHistory';\nenableMapSet();\n// Needed to generate state diff for verbose logging.\nenablePatches();\n\n// TODO: How can we make this configurable?\n/**\n * @private\n */\nexport const MAX_CALL_HISTORY_LENGTH = 10;\n\n/**\n * @private\n */\nexport class CallContext {\n  private _logger: AzureLogger;\n  private _state: CallClientState;\n  private _emitter: EventEmitter;\n  private _atomicId: number;\n  private _callIdHistory: CallIdHistory = new CallIdHistory();\n  constructor(userId: CommunicationIdentifierKind, maxListeners = 50, /* @conditional-compile-remove(PSTN-calls) */alternateCallerId?: string) {\n    this._logger = createClientLogger('communication-react:calling-context');\n    this._state = {\n      calls: {},\n      callsEnded: {},\n      incomingCalls: {},\n      incomingCallsEnded: {},\n      deviceManager: {\n        isSpeakerSelectionAvailable: false,\n        cameras: [],\n        microphones: [],\n        speakers: [],\n        unparentedViews: []\n      },\n      callAgent: undefined,\n      userId: userId,\n      latestErrors: ({} as CallErrors)\n    };\n    this._emitter = new EventEmitter();\n    this._emitter.setMaxListeners(maxListeners);\n    this._atomicId = 0;\n  }\n  public getState(): CallClientState {\n    return this._state;\n  }\n  public modifyState(modifier: (draft: CallClientState) => void): void {\n    const priorState = this._state;\n    this._state = produce(this._state, modifier, (patches: Patch[]) => {\n      if (getLogLevel() === 'verbose') {\n        // Log to `info` because AzureLogger.verbose() doesn't show up in console.\n        this._logger.info(`State change: ${_safeJSONStringify(patches)}`);\n      }\n    });\n    if (this._state !== priorState) {\n      this._emitter.emit('stateChanged', this._state);\n    }\n  }\n  public onStateChange(handler: (state: CallClientState) => void): void {\n    this._emitter.on('stateChanged', handler);\n  }\n  public offStateChange(handler: (state: CallClientState) => void): void {\n    this._emitter.off('stateChanged', handler);\n  }\n\n  // Disposing of the CallAgentDeclarative will not clear the state. If we create a new CallAgentDeclarative, we should\n  // make sure the state is clean because any left over state (if previous CallAgentDeclarative was disposed) may be\n  // invalid.\n  public clearCallRelatedState(): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.calls = {};\n      draft.incomingCalls = {};\n      draft.callsEnded = {};\n      draft.incomingCallsEnded = {};\n    });\n  }\n  public setCallAgent(callAgent: CallAgentState): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.callAgent = callAgent;\n    });\n  }\n  public setCall(call: CallState): void {\n    this.modifyState((draft: CallClientState) => {\n      const latestCallId = this._callIdHistory.latestCallId(call.id);\n      const existingCall = draft.calls[latestCallId];\n      if (existingCall) {\n        existingCall.callerInfo = call.callerInfo;\n        existingCall.state = call.state;\n        existingCall.callEndReason = call.callEndReason;\n        existingCall.direction = call.direction;\n        existingCall.isMuted = call.isMuted;\n        existingCall.isScreenSharingOn = call.isScreenSharingOn;\n        existingCall.localVideoStreams = call.localVideoStreams;\n        existingCall.remoteParticipants = call.remoteParticipants;\n        existingCall.transcription.isTranscriptionActive = call.transcription.isTranscriptionActive;\n        existingCall.recording.isRecordingActive = call.recording.isRecordingActive; // We don't update the startTime and endTime if we are updating an existing active call\n      } else {\n        draft.calls[latestCallId] = call;\n      }\n    });\n  }\n  public removeCall(callId: string): void {\n    this.modifyState((draft: CallClientState) => {\n      delete draft.calls[this._callIdHistory.latestCallId(callId)];\n    });\n  }\n  public setCallEnded(callId: string, callEndReason: CallEndReason | undefined): void {\n    const latestCallId = this._callIdHistory.latestCallId(callId);\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[latestCallId];\n      if (call) {\n        call.endTime = new Date();\n        call.callEndReason = callEndReason;\n        delete draft.calls[latestCallId];\n        // Performance note: This loop should run only once because the number of entries\n        // is never allowed to exceed MAX_CALL_HISTORY_LENGTH. A loop is used for correctness.\n        while (Object.keys(draft.callsEnded).length >= MAX_CALL_HISTORY_LENGTH) {\n          delete draft.callsEnded[findOldestCallEnded(draft.callsEnded)];\n        }\n        draft.callsEnded[latestCallId] = call;\n      }\n    });\n  }\n  public setCallState(callId: string, state: CallStatus): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        call.state = state;\n      }\n    });\n  }\n  public setCallId(newCallId: string, oldCallId: string): void {\n    this._callIdHistory.updateCallIdHistory(newCallId, oldCallId);\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[oldCallId];\n      if (call) {\n        call.id = newCallId;\n        delete draft.calls[oldCallId];\n        draft.calls[newCallId] = call;\n      }\n    });\n  }\n  public setCallIsScreenSharingOn(callId: string, isScreenSharingOn: boolean): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        call.isScreenSharingOn = isScreenSharingOn;\n      }\n    });\n  }\n  public setCallRemoteParticipants(callId: string, addRemoteParticipant: RemoteParticipantState[], removeRemoteParticipant: string[]): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        removeRemoteParticipant.forEach((id: string) => {\n          delete call.remoteParticipants[id];\n        });\n        addRemoteParticipant.forEach((participant: RemoteParticipantState) => {\n          call.remoteParticipants[toFlatCommunicationIdentifier(participant.identifier)] = participant;\n        });\n      }\n    });\n  }\n  public setCallRemoteParticipantsEnded(callId: string, addRemoteParticipant: RemoteParticipantState[], removeRemoteParticipant: string[]): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        removeRemoteParticipant.forEach((id: string) => {\n          delete call.remoteParticipantsEnded[id];\n        });\n        addRemoteParticipant.forEach((participant: RemoteParticipantState) => {\n          call.remoteParticipantsEnded[toFlatCommunicationIdentifier(participant.identifier)] = participant;\n        });\n      }\n    });\n  }\n  public setCallLocalVideoStream(callId: string, streams: LocalVideoStreamState[]): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        call.localVideoStreams = streams;\n      }\n    });\n  }\n  public setCallIsMicrophoneMuted(callId: string, isMicrophoneMuted: boolean): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        call.isMuted = isMicrophoneMuted;\n      }\n    });\n  }\n  public setCallDominantSpeakers(callId: string, dominantSpeakers: DominantSpeakersInfo): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        call.dominantSpeakers = dominantSpeakers;\n      }\n    });\n  }\n  public setCallRecordingActive(callId: string, isRecordingActive: boolean): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        call.recording.isRecordingActive = isRecordingActive;\n      }\n    });\n  }\n  public setCallTranscriptionActive(callId: string, isTranscriptionActive: boolean): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        call.transcription.isTranscriptionActive = isTranscriptionActive;\n      }\n    });\n  }\n  public setCallScreenShareParticipant(callId: string, participantKey: string | undefined): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        call.screenShareRemoteParticipant = participantKey;\n      }\n    });\n  }\n  public setLocalVideoStreamRendererView(callId: string, view: VideoStreamRendererViewState | undefined): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        if (call.localVideoStreams.length > 0) {\n          call.localVideoStreams[0].view = view;\n        }\n      }\n    });\n  }\n  public setParticipantState(callId: string, participantKey: string, state: RemoteParticipantStatus): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        const participant = call.remoteParticipants[participantKey];\n        if (participant) {\n          participant.state = state;\n        }\n      }\n    });\n  }\n  public setParticipantIsMuted(callId: string, participantKey: string, muted: boolean): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        const participant = call.remoteParticipants[participantKey];\n        if (participant) {\n          participant.isMuted = muted;\n        }\n      }\n    });\n  }\n  public setParticipantDisplayName(callId: string, participantKey: string, displayName: string): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        const participant = call.remoteParticipants[participantKey];\n        if (participant) {\n          participant.displayName = displayName;\n        }\n      }\n    });\n  }\n  public setParticipantIsSpeaking(callId: string, participantKey: string, isSpeaking: boolean): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        const participant = call.remoteParticipants[participantKey];\n        if (participant) {\n          participant.isSpeaking = isSpeaking;\n        }\n      }\n    });\n  }\n  public setParticipantVideoStream(callId: string, participantKey: string, stream: RemoteVideoStreamState): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        const participant = call.remoteParticipants[participantKey];\n        if (participant) {\n          // Set is called by subscriber will not modify any rendered stream so if there is existing stream only\n          // modify the values that subscriber has access to.\n          const existingStream = participant.videoStreams[stream.id];\n          if (existingStream) {\n            existingStream.isAvailable = stream.isAvailable;\n            existingStream.mediaStreamType = stream.mediaStreamType;\n          } else {\n            participant.videoStreams[stream.id] = stream;\n          }\n        }\n      }\n    });\n  }\n  public setRemoteVideoStreamIsAvailable(callId: string, participantKey: string, streamId: number, isAvailable: boolean): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        const participant = call.remoteParticipants[participantKey];\n        if (participant) {\n          const stream = participant.videoStreams[streamId];\n          if (stream) {\n            stream.isAvailable = isAvailable;\n          }\n        }\n      }\n    });\n  }\n  public setRemoteVideoStreams(callId: string, participantKey: string, addRemoteVideoStream: RemoteVideoStreamState[], removeRemoteVideoStream: number[]): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        const participant = call.remoteParticipants[participantKey];\n        if (participant) {\n          for (const id of removeRemoteVideoStream) {\n            delete participant.videoStreams[id];\n          }\n          for (const newStream of addRemoteVideoStream) {\n            // This should only be called by the subscriber and some properties are add by other components so if the\n            // stream already exists, only update the values that subscriber knows about.\n            const stream = participant.videoStreams[newStream.id];\n            if (stream) {\n              stream.mediaStreamType = newStream.mediaStreamType;\n              stream.isAvailable = newStream.isAvailable;\n            } else {\n              participant.videoStreams[newStream.id] = newStream;\n            }\n          }\n        }\n      }\n    });\n  }\n  public setRemoteVideoStreamRendererView(callId: string, participantKey: string, streamId: number, view: VideoStreamRendererViewState | undefined): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        const participant = call.remoteParticipants[participantKey];\n        if (participant) {\n          const stream = participant.videoStreams[streamId];\n          if (stream) {\n            stream.view = view;\n          }\n        }\n      }\n    });\n  }\n  public setRemoteVideoStreamViewScalingMode(callId: string, participantKey: string, streamId: number, scalingMode: ScalingMode): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.calls[this._callIdHistory.latestCallId(callId)];\n      if (call) {\n        const participant = call.remoteParticipants[participantKey];\n        if (participant) {\n          const stream = participant.videoStreams[streamId];\n          if (stream && stream.view) {\n            stream.view.scalingMode = scalingMode;\n          }\n        }\n      }\n    });\n  }\n  public setIncomingCall(call: IncomingCallState): void {\n    this.modifyState((draft: CallClientState) => {\n      const existingCall = draft.incomingCalls[call.id];\n      if (existingCall) {\n        existingCall.callerInfo = call.callerInfo;\n      } else {\n        draft.incomingCalls[call.id] = call;\n      }\n    });\n  }\n  public removeIncomingCall(callId: string): void {\n    this.modifyState((draft: CallClientState) => {\n      delete draft.incomingCalls[callId];\n    });\n  }\n  public setIncomingCallEnded(callId: string, callEndReason: CallEndReason | undefined): void {\n    this.modifyState((draft: CallClientState) => {\n      const call = draft.incomingCalls[callId];\n      if (call) {\n        call.endTime = new Date();\n        call.callEndReason = callEndReason;\n        delete draft.incomingCalls[callId];\n        // Performance note: This loop should run only once because the number of entries\n        // is never allowed to exceed MAX_CALL_HISTORY_LENGTH. A loop is used for correctness.\n        while (Object.keys(draft.incomingCallsEnded).length >= MAX_CALL_HISTORY_LENGTH) {\n          delete draft.incomingCallsEnded[findOldestCallEnded(draft.incomingCallsEnded)];\n        }\n        draft.incomingCallsEnded[callId] = call;\n      }\n    });\n  }\n  public setDeviceManagerIsSpeakerSelectionAvailable(isSpeakerSelectionAvailable: boolean): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.deviceManager.isSpeakerSelectionAvailable = isSpeakerSelectionAvailable;\n    });\n  }\n  public setDeviceManagerSelectedMicrophone(selectedMicrophone?: AudioDeviceInfo): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.deviceManager.selectedMicrophone = selectedMicrophone;\n    });\n  }\n  public setDeviceManagerSelectedSpeaker(selectedSpeaker?: AudioDeviceInfo): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.deviceManager.selectedSpeaker = selectedSpeaker;\n    });\n  }\n  public setDeviceManagerSelectedCamera(selectedCamera?: VideoDeviceInfo): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.deviceManager.selectedCamera = selectedCamera;\n    });\n  }\n  public setDeviceManagerCameras(cameras: VideoDeviceInfo[]): void {\n    this.modifyState((draft: CallClientState) => {\n      /**\n       * SDK initializes cameras with one dummy camera with value { id: 'camera:id', name: '', deviceType: 'USBCamera' } immediately after\n       * camera permissions are granted. So selectedCamera will have this value before the actual cameras are obtained. Therefore we should reset\n       * selectedCamera to the first camera when there are cameras AND when current selectedCamera does not exist in the new array of cameras *\n       */\n      if (cameras.length > 0 && !cameras.some(camera => camera.id === draft.deviceManager.selectedCamera?.id)) {\n        draft.deviceManager.selectedCamera = cameras[0];\n      }\n      draft.deviceManager.cameras = cameras;\n    });\n  }\n  public setDeviceManagerMicrophones(microphones: AudioDeviceInfo[]): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.deviceManager.microphones = microphones;\n    });\n  }\n  public setDeviceManagerSpeakers(speakers: AudioDeviceInfo[]): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.deviceManager.speakers = speakers;\n    });\n  }\n  public setDeviceManagerDeviceAccess(deviceAccess: DeviceAccess): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.deviceManager.deviceAccess = deviceAccess;\n    });\n  }\n  public setDeviceManagerUnparentedView(localVideoStream: LocalVideoStreamState, view: VideoStreamRendererViewState | undefined): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.deviceManager.unparentedViews.push({\n        source: localVideoStream.source,\n        mediaStreamType: localVideoStream.mediaStreamType,\n        view: view\n      });\n    });\n  }\n  public deleteDeviceManagerUnparentedView(localVideoStream: LocalVideoStreamState): void {\n    this.modifyState((draft: CallClientState) => {\n      const foundIndex = draft.deviceManager.unparentedViews.findIndex(stream => stream.source.id === localVideoStream.source.id && stream.mediaStreamType === localVideoStream.mediaStreamType);\n      if (foundIndex !== -1) {\n        draft.deviceManager.unparentedViews.splice(foundIndex, 1);\n      }\n    });\n  }\n  public getAndIncrementAtomicId(): number {\n    const id = this._atomicId;\n    this._atomicId++;\n    return id;\n  }\n\n  /**\n   * Tees any errors encountered in an async function to the state.\n   *\n   * @param action Async function to execute.\n   * @param target The error target to tee error to.\n   * @returns Result of calling `f`. Also re-raises any exceptions thrown from `f`.\n   * @throws CallError. Exceptions thrown from `f` are tagged with the failed `target.\n   */\n  public withAsyncErrorTeedToState<Args extends unknown[], R>(action: (...args: Args) => Promise<R>, target: CallErrorTarget): (...args: Args) => Promise<R> {\n    return async (...args: Args): Promise<R> => {\n      try {\n        return await action(...args);\n      } catch (error) {\n        const callError = toCallError(target, error);\n        this.setLatestError(target, callError);\n        throw callError;\n      }\n    };\n  }\n\n  /**\n   * Tees any errors encountered in an function to the state.\n   *\n   * @param action Function to execute.\n   * @param target The error target to tee error to.\n   * @returns Result of calling `f`. Also re-raises any exceptions thrown from `f`.\n   * @throws CallError. Exceptions thrown from `f` are tagged with the failed `target.\n   */\n  public withErrorTeedToState<Args extends unknown[], R>(action: (...args: Args) => R, target: CallErrorTarget): (...args: Args) => R {\n    return (...args: Args): R => {\n      try {\n        callingStatefulLogger.info(`Calling stateful client target function called: ${target}`);\n        return action(...args);\n      } catch (error) {\n        const callError = toCallError(target, error);\n        this.setLatestError(target, callError);\n        throw callError;\n      }\n    };\n  }\n  private setLatestError(target: CallErrorTarget, error: CallError): void {\n    this.modifyState((draft: CallClientState) => {\n      draft.latestErrors[target] = error;\n    });\n  }\n}\nconst toCallError = (target: CallErrorTarget, error: unknown): CallError => {\n  if (error instanceof Error) {\n    return new CallError(target, error);\n  }\n  return new CallError(target, new Error((error as string)));\n};\nconst findOldestCallEnded = (calls: {\n  [key: string]: {\n    endTime?: Date;\n  };\n}): string => {\n  const callEntries = Object.entries(calls);\n  let [oldestCallId, oldestCall] = callEntries[0];\n  if (oldestCall.endTime === undefined) {\n    return oldestCallId;\n  }\n  for (const [callId, call] of callEntries.slice(1)) {\n    if (call.endTime === undefined) {\n      return callId;\n    }\n    if ((call.endTime?.getTime() ?? 0) < (oldestCall.endTime?.getTime() ?? 0)) {\n      [oldestCallId, oldestCall] = [callId, call];\n    }\n  }\n  return oldestCallId;\n};\"../../acs-ui-common/src\""]}