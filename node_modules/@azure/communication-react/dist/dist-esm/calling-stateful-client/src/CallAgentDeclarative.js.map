{"version":3,"file":"CallAgentDeclarative.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/CallAgentDeclarative.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CallAgent } from '@azure/communication-calling';\nimport { clearCallRelatedState, DeclarativeCallCommon, ProxyCallAgentCommon } from './CallAgentDeclarativeCommon';\nimport { CallContext } from './CallContext';\nimport { callDeclaratify } from './CallDeclarative';\nimport { InternalCallContext } from './InternalCallContext';\nimport { _isACSCall, _isACSCallAgent } from './TypeGuards';\nimport { CallAgentCommon, CallCommon } from './BetaToStableTypes';\n/**\n * @beta\n * `DeclarativeCallAgent` extends and proxies the {@link @azure/communication-calling#CallAgent}\n */\nexport type DeclarativeCallAgent = CallAgent;\n\n/**\n * ProxyCallAgent proxies CallAgent and saves any returned state in the given context. It will subscribe to all state\n * updates in the CallAgent and in the contained Calls and RemoteParticipants. When dispose is called it will\n * unsubscribe from all state updates.\n */\nclass ProxyCallAgent extends ProxyCallAgentCommon implements ProxyHandler<DeclarativeCallAgent> {\n  private _callAgent: CallAgent;\n  constructor(callAgent: CallAgent, context: CallContext, internalContext: InternalCallContext) {\n    super(context, internalContext);\n    this._callAgent = callAgent;\n    this.subscribe();\n  }\n  private subscribe = (): void => {\n    this._callAgent.on('callsUpdated', this.callsUpdated);\n    this._callAgent.on('incomingCall', this.incomingCall);\n\n    // There could be scenario that when ProxyCallAgent is created that the given CallAgent already has Calls. In this\n    // case we need to make sure to subscribe to those already existing Calls.\n    for (const call of this._callAgent.calls) {\n      this.addCall(call);\n    }\n  };\n  protected unsubscribe = (): void => {\n    this._callAgent.off('callsUpdated', this.callsUpdated);\n    this._callAgent.off('incomingCall', this.incomingCall);\n    this.unregisterSubscriber();\n  };\n  protected callDeclaratify(call: CallCommon, context: CallContext): DeclarativeCallCommon {\n    if (_isACSCall(call)) {\n      return callDeclaratify(call, context);\n    }\n    throw new Error('Not reachable code, DeclarativeCallAgent.callDeclaratify must be called with an ACS call.');\n  }\n  protected startCall(agent: CallAgentCommon, args: Parameters<CallAgent['startCall']>): CallCommon {\n    if (_isACSCallAgent(agent)) {\n      return agent.startCall(...args);\n    }\n    throw Error('Unreachable code, DeclarativeCallAgent.startCall must be called with an ACS callAgent.');\n  }\n  protected joinCall(agent: CallAgentCommon, args: Parameters<CallAgent['join']>): CallCommon {\n    if (_isACSCallAgent(agent)) {\n      return agent.join(...args);\n    }\n    throw Error('Unreachable code, DeclarativeCallAgent.joinCall must be called with an ACS callAgent.');\n  }\n  protected agentSubscribe(agent: CallAgentCommon, args: Parameters<CallAgent['on']>): void {\n    if (_isACSCallAgent(agent)) {\n      return agent.on(...args);\n    }\n    throw Error('Unreachable code, DeclarativeCallAgent.agentSubscribe must be called with an ACS callAgent.');\n  }\n  protected agentUnsubscribe(agent: CallAgentCommon, args: Parameters<CallAgent['off']>): void {\n    if (_isACSCallAgent(agent)) {\n      return agent.off(...args);\n    }\n    throw Error('Unreachable code, DeclarativeCallAgent.agentUnsubscribe must be called with an ACS callAgent.');\n  }\n  public get<P extends keyof CallAgent>(target: CallAgent, prop: P): any {\n    return super.getCommon(target, prop);\n  }\n}\n\n/**\n * Creates a declarative CallAgent by proxying CallAgent with ProxyCallAgent which will track state updates by updating\n * the given context.\n *\n * @param callAgent - CallAgent from SDK\n * @param context - CallContext from StatefulCallClient\n * @param internalContext- InternalCallContext from StatefulCallClient\n */\nexport const callAgentDeclaratify = (callAgent: CallAgent, context: CallContext, internalContext: InternalCallContext): DeclarativeCallAgent => {\n  clearCallRelatedState(context, internalContext);\n  return (new Proxy(callAgent, new ProxyCallAgent(callAgent, context, internalContext)) as DeclarativeCallAgent);\n};"]}