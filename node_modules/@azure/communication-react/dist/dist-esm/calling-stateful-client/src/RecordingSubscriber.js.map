{"version":3,"file":"RecordingSubscriber.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/RecordingSubscriber.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAMlC;;GAEG;AACH,MAAM,OAAO,mBAAmB;IAI9B,YAAY,SAAoB,EAAE,OAAoB,EAAE,SAA+B;QAY/E,cAAS,GAAG,GAAS,EAAE;YAC7B,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,0BAA0B,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC1E,CAAC,CAAC;QACK,gBAAW,GAAG,GAAS,EAAE;YAC9B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC3E,CAAC,CAAC;QACM,uBAAkB,GAAG,GAAS,EAAE;YACtC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;QAClG,CAAC,CAAC;QAnBA,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAE5B,+GAA+G;QAC/G,sBAAsB;QACtB,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE;YACrC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;SACjG;QACD,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;CAUF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RecordingCallFeature } from '@azure/communication-calling';\nimport { CallContext } from './CallContext';\nimport { CallIdRef } from './CallIdRef';\n\n/**\n * @private\n */\nexport class RecordingSubscriber {\n  private _callIdRef: CallIdRef;\n  private _context: CallContext;\n  private _recording: RecordingCallFeature;\n  constructor(callIdRef: CallIdRef, context: CallContext, recording: RecordingCallFeature) {\n    this._callIdRef = callIdRef;\n    this._context = context;\n    this._recording = recording;\n\n    // If recording as already started when we joined the call, make sure it is reflected in state as there may not\n    // be an event for it.\n    if (this._recording.isRecordingActive) {\n      this._context.setCallRecordingActive(this._callIdRef.callId, this._recording.isRecordingActive);\n    }\n    this.subscribe();\n  }\n  private subscribe = (): void => {\n    this._recording.on('isRecordingActiveChanged', this.isAvailableChanged);\n  };\n  public unsubscribe = (): void => {\n    this._recording.off('isRecordingActiveChanged', this.isAvailableChanged);\n  };\n  private isAvailableChanged = (): void => {\n    this._context.setCallRecordingActive(this._callIdRef.callId, this._recording.isRecordingActive);\n  };\n}"]}