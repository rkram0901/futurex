{"version":3,"file":"VideoStreamRendererViewDeclarative.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/VideoStreamRendererViewDeclarative.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAKlC;;GAEG;AACH,MAAM,OAAO,4BAA4B;IAKvC,YAAY,OAAoB,EAAE,MAAc,EAAE,aAAqB,EAAE,SAAiB;QACxF,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IACM,GAAG,CAA0C,MAA+B,EAAE,IAAO;QAC1F,QAAQ,IAAI,EAAE;YACZ,KAAK,mBAAmB;gBACtB;oBACE,OAAO,CAAO,GAAG,IAA8D,EAAE,EAAE;wBACjF,MAAM,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,CAAC;wBACxC,IAAI,CAAC,QAAQ,CAAC,mCAAmC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;oBAChH,CAAC,CAAA,CAAC;iBACH;YACH;gBACE,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SACpC;IACH,CAAC;CACF;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,kCAAkC,GAAG,CAAC,IAA6B,EAAE,OAAoB,EAAE,MAAc,EAAE,aAAqB,EAAE,QAAgB,EAA2B,EAAE;IAC1L,MAAM,4BAA4B,GAAG,IAAI,4BAA4B,CAAC,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;IAChH,OAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,4BAA4B,CAA6B,CAAC;AACpF,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { VideoStreamRendererView } from '@azure/communication-calling';\nimport { CallContext } from './CallContext';\n\n/**\n * @private\n */\nexport class ProxyVideoStreamRendererView implements ProxyHandler<VideoStreamRendererView> {\n  private _context: CallContext;\n  private _callId: string;\n  private _participantId: string;\n  private _streamId: number;\n  constructor(context: CallContext, callId: string, participantId: string, _streamId: number) {\n    this._context = context;\n    this._callId = callId;\n    this._participantId = participantId;\n    this._streamId = _streamId;\n  }\n  public get<P extends keyof VideoStreamRendererView>(target: VideoStreamRendererView, prop: P): any {\n    switch (prop) {\n      case 'updateScalingMode':\n        {\n          return async (...args: Parameters<VideoStreamRendererView['updateScalingMode']>) => {\n            await target.updateScalingMode(...args);\n            this._context.setRemoteVideoStreamViewScalingMode(this._callId, this._participantId, this._streamId, args[0]);\n          };\n        }\n      default:\n        return Reflect.get(target, prop);\n    }\n  }\n}\n\n/**\n * Creates a declarative VideoStreamRendererView that is backed by a VideoStreamRendererView from the SDK.\n * Calling methods on this declarative object triggers state updates in the stateful client.\n */\nexport const videoStreamRendererViewDeclaratify = (view: VideoStreamRendererView, context: CallContext, callId: string, participantId: string, streamId: number): VideoStreamRendererView => {\n  const proxyVideoStreamRendererView = new ProxyVideoStreamRendererView(context, callId, participantId, streamId);\n  return (new Proxy(view, proxyVideoStreamRendererView) as VideoStreamRendererView);\n};"]}