{"version":3,"file":"RemoteVideoStreamSubscriber.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/RemoteVideoStreamSubscriber.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RemoteVideoStream } from '@azure/communication-calling';\nimport { RemoteVideoStreamState } from './CallClientState';\nimport { CallContext } from './CallContext';\nimport { CallIdRef } from './CallIdRef';\n\n/**\n * @private\n */\nexport class RemoteVideoStreamSubscriber {\n  private _callIdRef: CallIdRef;\n  private _participantKey: string;\n  private _remoteVideoStream: RemoteVideoStream;\n  private _context: CallContext;\n  constructor(callIdRef: CallIdRef, participantKey: string, remoteVideoStream: RemoteVideoStream, context: CallContext) {\n    this._callIdRef = callIdRef;\n    this._participantKey = participantKey;\n    this._remoteVideoStream = remoteVideoStream;\n    this._context = context;\n    this.subscribe();\n  }\n  private subscribe = (): void => {\n    this._remoteVideoStream.on('isAvailableChanged', this.isAvailableChanged);\n    this.checkAndUpdateScreenShareState();\n  };\n  public unsubscribe = (): void => {\n    this._remoteVideoStream.off('isAvailableChanged', this.isAvailableChanged);\n  };\n  private includesActiveScreenShareStream = (streams: {\n    [key: number]: RemoteVideoStreamState;\n  }): boolean => {\n    for (const stream of Object.values(streams)) {\n      if (stream.mediaStreamType === 'ScreenSharing' && stream.isAvailable) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Update the state with the active screen share stream. If there is an existing stream will overwrite it if this one\n   * is active (newer stream takes priority). If there is an existing stream and this one is set to unavailable, and the\n   * existing stream is different participant, then don't set the active screen share stream to undefined, else set it\n   * to undefined.\n   */\n  private checkAndUpdateScreenShareState = (): void => {\n    if (this._remoteVideoStream.mediaStreamType !== 'ScreenSharing') {\n      return;\n    }\n    if (this._remoteVideoStream.isAvailable) {\n      this._context.setCallScreenShareParticipant(this._callIdRef.callId, this._participantKey);\n      return;\n    }\n    const existingScreenShare = this._context.getState().calls[this._callIdRef.callId]?.screenShareRemoteParticipant;\n\n    // If somehow we end up with an event where a RemoteParticipant's ScreenShare stream is set to\n    // unavailable but there exists already another different participant actively sharing, and they are still\n    // sharing then this event shouldn't set the screenShareRemoteParticipant to undefined.\n    if (!existingScreenShare || existingScreenShare === this._participantKey) {\n      this._context.setCallScreenShareParticipant(this._callIdRef.callId, undefined);\n      return;\n    }\n    const streams = this._context.getState().calls[this._callIdRef.callId]?.remoteParticipants[existingScreenShare]?.videoStreams;\n    if (!streams) {\n      this._context.setCallScreenShareParticipant(this._callIdRef.callId, undefined);\n      return;\n    }\n\n    // If the existing ScreenShare that is not owned by the current RemoteParticipant is still active, don't\n    // overwrite it with undefined. So only overwrite if it is not active.\n    if (!this.includesActiveScreenShareStream(streams)) {\n      this._context.setCallScreenShareParticipant(this._callIdRef.callId, undefined);\n      return;\n    }\n  };\n  private isAvailableChanged = (): void => {\n    this._context.setRemoteVideoStreamIsAvailable(this._callIdRef.callId, this._participantKey, this._remoteVideoStream.id, this._remoteVideoStream.isAvailable);\n    this.checkAndUpdateScreenShareState();\n  };\n}"]}