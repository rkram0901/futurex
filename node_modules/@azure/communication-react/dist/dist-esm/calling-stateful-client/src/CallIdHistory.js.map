{"version":3,"file":"CallIdHistory.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/CallIdHistory.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;;;;GAKG;AACH,MAAM,OAAO,aAAa;IAA1B;QACU,mBAAc,GAAG,IAAI,GAAG,EAAkB,CAAC;IA0BrD,CAAC;IAzBQ,mBAAmB,CAAC,SAAiB,EAAE,SAAiB;QAC7D,8DAA8D;QAC9D,mFAAmF;QACnF,wEAAwE;QACxE,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACpD,IAAI,QAAQ,KAAK,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;YACxE,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,8BAA8B,QAAQ,8BAA8B,SAAS,EAAE,CAAC,CAAC;SAC5G;QAED,kDAAkD;QAClD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACtC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAChD,CAAC;IACM,YAAY,CAAC,MAAc;QAChC,IAAI,MAAM,GAAG,MAAM,CAAC;QACpB,sEAAsE;QACtE,OAAO,IAAI,EAAE;YACX,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,MAAM;aACP;YACD,MAAM,GAAG,KAAK,CAAC;SAChB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * @private\n * Call Id will change during the call for at least 1 time\n * This is to avoid async bug that call id has been changed during an async-await function\n * but the function still uses stale call id to access state\n */\nexport class CallIdHistory {\n  private _callIdHistory = new Map<string, string>();\n  public updateCallIdHistory(newCallId: string, oldCallId: string): void {\n    // callId for a call can fluctuate between some set of values.\n    // But if a newCallId already exists, and maps to different call, we're in trouble.\n    // This can only happen if a callId is reused across two distinct calls.\n    const existing = this._callIdHistory.get(newCallId);\n    if (existing !== undefined && this.latestCallId(newCallId) !== oldCallId) {\n      console.trace(`${newCallId} alredy exists and maps to ${existing}, which is not the same as ${oldCallId}`);\n    }\n\n    // The latest callId never maps to another callId.\n    this._callIdHistory.delete(newCallId);\n    this._callIdHistory.set(oldCallId, newCallId);\n  }\n  public latestCallId(callId: string): string {\n    let latest = callId;\n    /* eslint no-constant-condition: [\"error\", { \"checkLoops\": false }] */\n    while (true) {\n      const newer = this._callIdHistory.get(latest);\n      if (newer === undefined) {\n        break;\n      }\n      latest = newer;\n    }\n    return latest;\n  }\n}"]}