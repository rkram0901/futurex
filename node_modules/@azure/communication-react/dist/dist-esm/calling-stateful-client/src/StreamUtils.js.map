{"version":3,"file":"StreamUtils.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/StreamUtils.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAElC,OAAO,EAAqB,gBAAgB,EAAE,mBAAmB,EAA2B,MAAM,8BAA8B,CAAC;AAIjI,OAAO,EAAE,6CAA6C,EAAE,+CAA+C,EAAE,kDAAkD,EAAE,MAAM,aAAa,CAAC;AAEjL,OAAO,EAAE,6BAA6B,EAAE,SAAS,EAAE,gCAAgC;AACnF,OAAO,EAAE,qBAAqB,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAW7D,SAAe,qBAAqB,CAAC,OAAoB,EAAE,eAAoC,EAAE,MAAc,EAAE,aAAmD,EAAE,MAA8B,EAAE,OAA2B;;QAC/N,kDAAkD;QAClD,MAAM,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC;QAC3B,IAAI,cAAc,CAAC;QACnB,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;YACrC,cAAc,GAAG,aAAa,CAAC;SAChC;aAAM;YACL,cAAc,GAAG,6BAA6B,CAAC,aAAa,CAAC,CAAC;SAC/D;QACD,MAAM,aAAa,GAAG;YACpB,MAAM;YACN,cAAc;YACd,QAAQ;SACT,CAAC;QACF,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,oBAAoB;YACrC,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,uCAAuC;YAChD,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,eAAe,CAAC,iCAAiC,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QACvG,IAAI,CAAC,UAAU,EAAE;YACf,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,uBAAuB;gBACxC,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,uCAAuC;gBAChD,IAAI,EAAE,aAAa;aACpB,CAAC,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACrD,OAAO;SACR;QACD,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE;YACpC,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,8BAA8B;gBAC/C,KAAK,EAAE,SAAS;gBAChB,OAAO,EAAE,wCAAwC;gBACjD,IAAI,EAAE,aAAa;aACpB,CAAC,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;YACtD,OAAO;SACR;QACD,IAAI,UAAU,CAAC,MAAM,KAAK,WAAW,EAAE;YACrC,0FAA0F;YAC1F,sCAAsC;YACtC,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,uBAAuB;gBACxC,KAAK,EAAE,SAAS;gBAChB,OAAO,EAAE,iCAAiC;gBAC1C,IAAI,EAAE,aAAa;aACpB,CAAC,CAAC;YACH,OAAO;SACR;QACD,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE;YACpC,OAAO,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;YAC/D,OAAO;SACR;QACD,MAAM,QAAQ,GAAG,IAAI,mBAAmB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAC5D,eAAe,CAAC,mBAAmB,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,UAAU,CAAC,MAAM,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;QACjH,IAAI,IAAI,CAAC;QACT,IAAI;YACF,IAAI,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC3C;QAAC,OAAO,CAAC,EAAE;YACV,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,yBAAyB;gBAC1C,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,8BAA8B;gBACvC,IAAI,EAAE,aAAa;aACpB,CAAC,CAAC;YACH,eAAe,CAAC,mBAAmB,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,UAAU,CAAC,MAAM,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;YACnH,MAAM,CAAC,CAAC;SACT;QACD,MAAM,mBAAmB,GAAG,eAAe,CAAC,iCAAiC,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAChH,IAAI,CAAC,mBAAmB,EAAE;YACxB,iHAAiH;YACjH,sBAAsB;YACtB,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,4BAA4B;gBAC7C,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,wDAAwD;gBACjE,IAAI,EAAE,aAAa;aACpB,CAAC,CAAC;YACH,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnB,OAAO,CAAC,gCAAgC,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;YACtF,OAAO;SACR;QACD,IAAI,mBAAmB,CAAC,MAAM,KAAK,UAAU,EAAE;YAC7C,6GAA6G;YAC7G,+BAA+B;YAC/B,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnB,eAAe,CAAC,mBAAmB,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,mBAAmB,CAAC,MAAM,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;YAC5H,OAAO,CAAC,gCAAgC,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;YACtF,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,0BAA0B;gBAC3C,KAAK,EAAE,MAAM;gBACb,OAAO,EAAE,sCAAsC;gBAC/C,IAAI,EAAE,aAAa;aACpB,CAAC,CAAC;YACH,OAAO;SACR;QAED,8GAA8G;QAC9G,sBAAsB;QACtB,eAAe,CAAC,mBAAmB,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,mBAAmB,CAAC,MAAM,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QACxH,OAAO,CAAC,gCAAgC,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,kDAAkD,CAAC,IAAI,CAAC,CAAC,CAAC;QACrI,OAAO;YACL,QAAQ;YACR,IAAI;SACL,CAAC;IACJ,CAAC;CAAA;AACD,SAAe,oBAAoB,CAAC,OAAoB,EAAE,eAAoC,EAAE,MAAc,EAAE,OAA2B;;QACzI,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,4BAA4B;YAC7C,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,sCAAsC;SAChD,CAAC,CAAC;QACH,iDAAiD;QACjD,MAAM,UAAU,GAAG,eAAe,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC9D,IAAI,CAAC,UAAU,EAAE;YACf,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,sBAAsB;gBACvC,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,sCAAsC;aAChD,CAAC,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;YACpD,OAAO;SACR;QACD,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE;YACpC,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,6BAA6B;gBAC9C,KAAK,EAAE,SAAS;gBAChB,OAAO,EAAE,uCAAuC;aACjD,CAAC,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACrD,OAAO;SACR;QACD,IAAI,UAAU,CAAC,MAAM,KAAK,WAAW,EAAE;YACrC,0FAA0F;YAC1F,sCAAsC;YACtC,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,sBAAsB;gBACvC,KAAK,EAAE,SAAS;gBAChB,OAAO,EAAE,gCAAgC;aAC1C,CAAC,CAAC;YACH,OAAO;SACR;QAED,yFAAyF;QACzF,uFAAuF;QACvF,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE;YACpC,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,qBAAqB;gBACtC,KAAK,EAAE,SAAS;gBAChB,OAAO,EAAE,0FAA0F;aACpG,CAAC,CAAC;YACH,eAAe,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;YAChG,OAAO;SACR;QACD,MAAM,QAAQ,GAAG,IAAI,mBAAmB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAC5D,eAAe,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QACrF,IAAI,IAAI,CAAC;QACT,IAAI;YACF,IAAI,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC3C;QAAC,OAAO,CAAC,EAAE;YACV,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,wBAAwB;gBACzC,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,wBAAwB;gBACjC,IAAI,EAAE;oBACJ,KAAK,EAAE,CAAC;iBACT;aACF,CAAC,CAAC;YACH,eAAe,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;YACxF,MAAM,CAAC,CAAC;SACT;QAED,kHAAkH;QAClH,kBAAkB;QAClB,MAAM,mBAAmB,GAAG,eAAe,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACvE,IAAI,CAAC,mBAAmB,EAAE;YACxB,iHAAiH;YACjH,0BAA0B;YAC1B,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,2BAA2B;gBAC5C,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,uDAAuD;gBAChE,IAAI,EAAE;oBACJ,MAAM;iBACP;aACF,CAAC,CAAC;YACH,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnB,OAAO,CAAC,+BAA+B,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAC3D,OAAO;SACR;QACD,IAAI,mBAAmB,CAAC,MAAM,KAAK,UAAU,EAAE;YAC7C,6GAA6G;YAC7G,+BAA+B;YAC/B,SAAS,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,EAAE,UAAU,CAAC,6BAA6B;gBAC9C,KAAK,EAAE,SAAS;gBAChB,OAAO,EAAE,oDAAoD;gBAC7D,IAAI,EAAE;oBACJ,MAAM;iBACP;aACF,CAAC,CAAC;YACH,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnB,eAAe,CAAC,kBAAkB,CAAC,MAAM,EAAE,mBAAmB,CAAC,MAAM,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;YACjG,OAAO,CAAC,+BAA+B,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAC3D,OAAO;SACR;QAED,8GAA8G;QAC9G,sBAAsB;QACtB,eAAe,CAAC,kBAAkB,CAAC,MAAM,EAAE,mBAAmB,CAAC,MAAM,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC7F,OAAO,CAAC,+BAA+B,CAAC,MAAM,EAAE,kDAAkD,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1G,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,yBAAyB;YAC1C,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,qCAAqC;YAC9C,IAAI,EAAE;gBACJ,MAAM;aACP;SACF,CAAC,CAAC;QACH,OAAO;YACL,QAAQ;YACR,IAAI;SACL,CAAC;IACJ,CAAC;CAAA;AACD,SAAe,yBAAyB,CAAC,OAAoB,EAAE,eAAoC,EAAE,MAA6B,EAAE,OAA2B;;QAC7J,MAAM,UAAU,GAAG,eAAe,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;QACnE,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE;YAClD,OAAO,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;YAChE,OAAO;SACR;QACD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,KAAK,WAAW,EAAE;YACnD,0FAA0F;YAC1F,sCAAsC;YACtC,OAAO;SACR;QACD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE;YAClD,OAAO,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;YACzE,OAAO;SACR;QACD,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC7D,MAAM,QAAQ,GAAG,IAAI,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QAC3D,eAAe,CAAC,uBAAuB,CAAC,MAAM,EAAE,gBAAgB,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;QAC1F,IAAI,IAA6B,CAAC;QAClC,IAAI;YACF,IAAI,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC3C;QAAC,OAAO,CAAC,EAAE;YACV,iHAAiH;YACjH,oHAAoH;YACpH,kGAAkG;YAClG,eAAe,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,CAAC,CAAC;SACT;QAED,kHAAkH;QAClH,kBAAkB;QAClB,MAAM,mBAAmB,GAAG,eAAe,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;QAC5E,IAAI,CAAC,mBAAmB,EAAE;YACxB,oHAAoH;YACpH,kHAAkH;YAClH,gDAAgD;YAChD,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnB,OAAO,CAAC,iCAAiC,CAAC,MAAM,CAAC,CAAC;YAClD,OAAO;SACR;QACD,IAAI,mBAAmB,CAAC,MAAM,KAAK,UAAU,EAAE;YAC7C,6GAA6G;YAC7G,iHAAiH;YACjH,oFAAoF;YACpF,eAAe,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;YACnD,OAAO,CAAC,iCAAiC,CAAC,MAAM,CAAC,CAAC;YAClD,OAAO;SACR;QAED,8GAA8G;QAC9G,sBAAsB;QACtB,eAAe,CAAC,uBAAuB,CAAC,MAAM,EAAE,gBAAgB,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QACxF,OAAO,CAAC,8BAA8B,CAAC,MAAM,EAAE,kDAAkD,CAAC,IAAI,CAAC,CAAC,CAAC;QACzG,OAAO;YACL,QAAQ;YACR,IAAI;SACL,CAAC;IACJ,CAAC;CAAA;AACD,SAAS,sBAAsB,CAAC,OAAoB,EAAE,eAAoC,EAAE,MAAc,EAAE,aAAmD,EAAE,MAA8B;IAC7L,MAAM,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC;IAC3B,IAAI,cAAc,CAAC;IACnB,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;QACrC,cAAc,GAAG,aAAa,CAAC;KAChC;SAAM;QACL,cAAc,GAAG,6BAA6B,CAAC,aAAa,CAAC,CAAC;KAC/D;IACD,MAAM,aAAa,GAAG;QACpB,MAAM;QACN,cAAc;QACd,QAAQ;KACT,CAAC;IACF,SAAS,CAAC,qBAAqB,EAAE;QAC/B,IAAI,EAAE,UAAU,CAAC,2BAA2B;QAC5C,KAAK,EAAE,MAAM;QACb,OAAO,EAAE,gCAAgC;QACzC,IAAI,EAAE,aAAa;KACpB,CAAC,CAAC;IACH,OAAO,CAAC,gCAAgC,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IACtF,MAAM,UAAU,GAAG,eAAe,CAAC,iCAAiC,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;IACvG,IAAI,CAAC,UAAU,EAAE;QACf,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,6BAA6B;YAC9C,KAAK,EAAE,OAAO;YACd,OAAO,EAAE,uDAAuD;YAChE,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QACH,OAAO;KACR;IAED,kHAAkH;IAClH,kHAAkH;IAClH,0DAA0D;IAC1D,IAAI,UAAU,CAAC,MAAM,KAAK,WAAW,EAAE;QACrC,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,sBAAsB;YACvC,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,gEAAgE;YACzE,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QACH,eAAe,CAAC,mBAAmB,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,UAAU,CAAC,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;KACjH;SAAM;QACL,eAAe,CAAC,mBAAmB,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,UAAU,CAAC,MAAM,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;KACpH;IACD,IAAI,UAAU,CAAC,QAAQ,EAAE;QACvB,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,yBAAyB;YAC1C,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,iCAAiC;YAC1C,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QACH,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;KAC/B;SAAM;QACL,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,yBAAyB;YAC1C,KAAK,EAAE,OAAO;YACd,OAAO,EAAE,mCAAmC;YAC5C,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;KACJ;AACH,CAAC;AACD,SAAS,qBAAqB,CAAC,OAAoB,EAAE,eAAoC,EAAE,MAAc;IACvG,MAAM,aAAa,GAAG;QACpB,MAAM;KACP,CAAC;IACF,SAAS,CAAC,qBAAqB,EAAE;QAC/B,IAAI,EAAE,UAAU,CAAC,0BAA0B;QAC3C,KAAK,EAAE,MAAM;QACb,OAAO,EAAE,+BAA+B;QACxC,IAAI,EAAE,aAAa;KACpB,CAAC,CAAC;IACH,OAAO,CAAC,+BAA+B,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC3D,MAAM,UAAU,GAAG,eAAe,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;IAC9D,IAAI,CAAC,UAAU,EAAE;QACf,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,4BAA4B;YAC7C,KAAK,EAAE,OAAO;YACd,OAAO,EAAE,sDAAsD;YAC/D,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QACH,OAAO;KACR;IAED,sEAAsE;IACtE,IAAI,UAAU,CAAC,MAAM,KAAK,aAAa,EAAE;QACvC,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,6BAA6B;YAC9C,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,uCAAuC;SACjD,CAAC,CAAC;QACH,OAAO;KACR;IAED,yGAAyG;IACzG,6GAA6G;IAC7G,gEAAgE;IAChE,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE;QACpC,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,qBAAqB;YACtC,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,mCAAmC;YAC5C,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QACH,OAAO;KACR;IAED,uGAAuG;IACvG,wGAAwG;IACxG,6EAA6E;IAC7E,IAAI,UAAU,CAAC,MAAM,KAAK,WAAW,EAAE;QACrC,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,sBAAsB;YACvC,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,gEAAgE;YACzE,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QACH,eAAe,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC/F,OAAO;KACR;IAED,yGAAyG;IACzG,eAAe,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;IACxF,IAAI,UAAU,CAAC,QAAQ,EAAE;QACvB,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,wBAAwB;YACzC,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,gCAAgC;YACzC,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QACH,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;KAC/B;SAAM;QACL,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,wBAAwB;YACzC,KAAK,EAAE,OAAO;YACd,OAAO,EAAE,mDAAmD;YAC5D,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;KACJ;AACH,CAAC;AACD,SAAS,0BAA0B,CAAC,OAAoB,EAAE,eAAoC,EAAE,MAA6B;IAC3H,SAAS,CAAC,qBAAqB,EAAE;QAC/B,IAAI,EAAE,UAAU,CAAC,0BAA0B;QAC3C,KAAK,EAAE,MAAM;QACb,OAAO,EAAE,0CAA0C;KACpD,CAAC,CAAC;IACH,OAAO,CAAC,iCAAiC,CAAC,MAAM,CAAC,CAAC;IAClD,MAAM,UAAU,GAAG,eAAe,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACnE,IAAI,CAAC,UAAU,EAAE;QACf,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,4BAA4B;YAC7C,KAAK,EAAE,OAAO;YACd,OAAO,EAAE,iEAAiE;SAC3E,CAAC,CAAC;QACH,OAAO;KACR;IACD,IAAI,UAAU,CAAC,MAAM,KAAK,WAAW,EAAE;QACrC,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,qBAAqB;YACtC,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,0EAA0E;SACpF,CAAC,CAAC;QACH,eAAe,CAAC,uBAAuB,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;KAC3F;SAAM;QACL,eAAe,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;KACpD;IACD,IAAI,UAAU,CAAC,QAAQ,EAAE;QACvB,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,wBAAwB;YACzC,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,2CAA2C;SACrD,CAAC,CAAC;QACH,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;KAC/B;SAAM;QACL,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,wBAAwB;YACzC,KAAK,EAAE,OAAO;YACd,OAAO,EAAE,8DAA8D;SACxE,CAAC,CAAC;KACJ;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,UAAU,CAAC,OAAoB,EAAE,eAAoC,EAAE,MAA0B,EAAE,aAA+D,EAAE,MAAsD,EAAE,OAA2B;IACrQ,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,aAAa,EAAE;QAC7C,kDAAkD;QAClD,OAAO,qBAAqB,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;KAChG;SAAM,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,MAAM,EAAE;QACtC,iDAAiD;QACjD,OAAO,oBAAoB,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;KACxE;SAAM,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;QACvC,qDAAqD;QACrD,kIAAkI;QAClI,iHAAiH;QACjH,OAAO,OAAO,CAAC,yBAAyB,CAAC,GAAS,EAAE,gDAAC,OAAA,MAAM,yBAAyB,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,OAAO,CAAC,CAAA,GAAA,EAAE,iBAAiB,CAAC,EAAE,CAAC;KACvJ;SAAM;QACL,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,4BAA4B;YAC7C,KAAK,EAAE,SAAS;YAChB,OAAO,EAAE,gDAAgD;SAC1D,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KACnC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CAAC,OAAoB,EAAE,eAAoC,EAAE,MAA0B,EAAE,aAA+D,EAAE,MAAsD;IACzO,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,aAAa,EAAE;QAC7C,0DAA0D;QAC1D,sBAAsB,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;KACjF;SAAM,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,MAAM,EAAE;QACtC,yDAAyD;QACzD,qBAAqB,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;KACzD;SAAM,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;QACvC,6DAA6D;QAC7D,kIAAkI;QAClI,gHAAgH;QAChH,OAAO,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,0BAA0B,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,CAAC,EAAE,gBAAgB,CAAC,EAAE,CAAC;KACtH;SAAM;QACL,SAAS,CAAC,qBAAqB,EAAE;YAC/B,IAAI,EAAE,UAAU,CAAC,6BAA6B;YAC9C,KAAK,EAAE,SAAS;YAChB,OAAO,EAAE,iDAAiD;SAC3D,CAAC,CAAC;QACH,OAAO;KACR;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,uBAAuB,CAAC,OAAoB,EAAE,eAAoC,EAAE,MAAc;IAChH,MAAM,WAAW,GAAG,eAAe,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;IACvE,IAAI,WAAW,EAAE;QACf,KAAK,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE;YACxE,KAAK,MAAM,CAAC,CAAC,EAAE,uBAAuB,CAAC,IAAI,kBAAkB,CAAC,OAAO,EAAE,EAAE;gBACvE,+GAA+G;gBAC/G,+GAA+G;gBAC/G,WAAW,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,cAAc,EAAE,+CAA+C,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;aAChJ;SACF;KACF;IACD,MAAM,sBAAsB,GAAG,eAAe,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;IAC1E,IAAI,sBAAsB,IAAI,sBAAsB,CAAC,QAAQ,EAAE;QAC7D,+GAA+G;QAC/G,+GAA+G;QAC/G,WAAW,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,SAAS,EAAE,6CAA6C,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC;KACxI;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,eAAe,CAAC,OAAoB,EAAE,eAAoC;IACxF,MAAM,OAAO,GAAG,eAAe,CAAC,UAAU,EAAE,CAAC;IAC7C,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;QAC5B,uBAAuB,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;KAC3D;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CreateViewOptions, LocalVideoStream, VideoStreamRenderer, VideoStreamRendererView } from '@azure/communication-calling';\nimport { CommunicationIdentifierKind } from '@azure/communication-common';\nimport { LocalVideoStreamState, RemoteVideoStreamState } from './CallClientState';\nimport { CallContext } from './CallContext';\nimport { convertSdkLocalStreamToDeclarativeLocalStream, convertSdkRemoteStreamToDeclarativeRemoteStream, convertFromSDKToDeclarativeVideoStreamRendererView } from './Converter';\nimport { InternalCallContext } from './InternalCallContext';\nimport { toFlatCommunicationIdentifier, _logEvent } from '@internal/acs-ui-common';\nimport { callingStatefulLogger, EventNames } from './Logger';\n\n/**\n * Return result from {@link StatefulCallClient.createView}.\n *\n * @public\n */\nexport type CreateViewResult = {\n  renderer: VideoStreamRenderer;\n  view: VideoStreamRendererView;\n};\nasync function createViewRemoteVideo(context: CallContext, internalContext: InternalCallContext, callId: string, participantId: CommunicationIdentifierKind | string, stream: RemoteVideoStreamState, options?: CreateViewOptions): Promise<CreateViewResult | undefined> {\n  // Render RemoteVideoStream that is part of a Call\n  const streamId = stream.id;\n  let participantKey;\n  if (typeof participantId === 'string') {\n    participantKey = participantId;\n  } else {\n    participantKey = toFlatCommunicationIdentifier(participantId);\n  }\n  const streamLogInfo = {\n    callId,\n    participantKey,\n    streamId\n  };\n  _logEvent(callingStatefulLogger, {\n    name: EventNames.CREATING_REMOTE_VIEW,\n    level: 'info',\n    message: 'Start creating view for remote video.',\n    data: streamLogInfo\n  });\n  const renderInfo = internalContext.getRemoteRenderInfoForParticipant(callId, participantKey, streamId);\n  if (!renderInfo) {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.REMOTE_STREAM_NOT_FOUND,\n      level: 'error',\n      message: 'RemoteVideoStream not found in state.',\n      data: streamLogInfo\n    });\n    console.warn('RemoteVideoStream not found in state');\n    return;\n  }\n  if (renderInfo.status === 'Rendered') {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.REMOTE_STREAM_ALREADY_RENDERED,\n      level: 'warning',\n      message: 'RemoteVideoStream is already rendered.',\n      data: streamLogInfo\n    });\n    console.warn('RemoteVideoStream is already rendered');\n    return;\n  }\n  if (renderInfo.status === 'Rendering') {\n    // Do not log to console here as this is a very common situation due to UI rerenders while\n    // the video rendering is in progress.\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.REMOTE_STREAM_RENDERING,\n      level: 'warning',\n      message: 'RemoteVideoStream is rendering.',\n      data: streamLogInfo\n    });\n    return;\n  }\n  if (renderInfo.status === 'Stopping') {\n    console.warn('RemoteVideoStream is in the middle of stopping');\n    return;\n  }\n  const renderer = new VideoStreamRenderer(renderInfo.stream);\n  internalContext.setRemoteRenderInfo(callId, participantKey, streamId, renderInfo.stream, 'Rendering', undefined);\n  let view;\n  try {\n    view = await renderer.createView(options);\n  } catch (e) {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.CREATE_REMOTE_STREAM_FAIL,\n      level: 'error',\n      message: 'Failed to create remote view',\n      data: streamLogInfo\n    });\n    internalContext.setRemoteRenderInfo(callId, participantKey, streamId, renderInfo.stream, 'NotRendered', undefined);\n    throw e;\n  }\n  const refreshedRenderInfo = internalContext.getRemoteRenderInfoForParticipant(callId, participantKey, streamId);\n  if (!refreshedRenderInfo) {\n    // RenderInfo was removed. This should not happen unless stream was removed from the call so dispose the renderer\n    // and clean up state.\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.REMOTE_RENDER_INFO_NOT_FOUND,\n      level: 'error',\n      message: '`Cannot find remote render info after create the view.',\n      data: streamLogInfo\n    });\n    renderer.dispose();\n    context.setRemoteVideoStreamRendererView(callId, participantKey, streamId, undefined);\n    return;\n  }\n  if (refreshedRenderInfo.status === 'Stopping') {\n    // Stop render was called on this stream after we had started rendering. We will dispose this view and do not\n    // put the view into the state.\n    renderer.dispose();\n    internalContext.setRemoteRenderInfo(callId, participantKey, streamId, refreshedRenderInfo.stream, 'NotRendered', undefined);\n    context.setRemoteVideoStreamRendererView(callId, participantKey, streamId, undefined);\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.REMOTE_VIEW_RENDER_SUCCEED,\n      level: 'info',\n      message: 'Successfully render the remote view.',\n      data: streamLogInfo\n    });\n    return;\n  }\n\n  // Else the stream still exists and status is not telling us to stop rendering. Complete the render process by\n  // updating the state.\n  internalContext.setRemoteRenderInfo(callId, participantKey, streamId, refreshedRenderInfo.stream, 'Rendered', renderer);\n  context.setRemoteVideoStreamRendererView(callId, participantKey, streamId, convertFromSDKToDeclarativeVideoStreamRendererView(view));\n  return {\n    renderer,\n    view\n  };\n}\nasync function createViewLocalVideo(context: CallContext, internalContext: InternalCallContext, callId: string, options?: CreateViewOptions): Promise<CreateViewResult | undefined> {\n  _logEvent(callingStatefulLogger, {\n    name: EventNames.START_LOCAL_STREAM_RENDERING,\n    level: 'info',\n    message: 'Start creating view for local video.'\n  });\n  // Render LocalVideoStream that is part of a Call\n  const renderInfo = internalContext.getLocalRenderInfo(callId);\n  if (!renderInfo) {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_STREAM_NOT_FOUND,\n      level: 'error',\n      message: 'LocalVideoStream not found in state.'\n    });\n    console.warn('LocalVideoStream not found in state');\n    return;\n  }\n  if (renderInfo.status === 'Rendered') {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_STREAM_ALREADY_RENDERED,\n      level: 'warning',\n      message: 'LocalVideoStream is already rendered.'\n    });\n    console.warn('LocalVideoStream is already rendered');\n    return;\n  }\n  if (renderInfo.status === 'Rendering') {\n    // Do not log to console here as this is a very common situation due to UI rerenders while\n    // the video rendering is in progress.\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_STREAM_RENDERING,\n      level: 'warning',\n      message: 'LocalVideoStream is rendering.'\n    });\n    return;\n  }\n\n  // \"Stopping\" only happens if the stream was in \"rendering\" but `disposeView` was called.\n  // Now that `createView` has been re-called, we can flip the state back to \"rendering\".\n  if (renderInfo.status === 'Stopping') {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_STREAM_STOPPING,\n      level: 'warning',\n      message: 'LocalVideoStream was marked as stopping by dispose view. Resetting state to \"Rendering\".'\n    });\n    internalContext.setLocalRenderInfo(callId, renderInfo.stream, 'Rendering', renderInfo.renderer);\n    return;\n  }\n  const renderer = new VideoStreamRenderer(renderInfo.stream);\n  internalContext.setLocalRenderInfo(callId, renderInfo.stream, 'Rendering', renderer);\n  let view;\n  try {\n    view = await renderer.createView(options);\n  } catch (e) {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.CREATE_LOCAL_STREAM_FAIL,\n      level: 'error',\n      message: 'Failed to create view.',\n      data: {\n        error: e\n      }\n    });\n    internalContext.setLocalRenderInfo(callId, renderInfo.stream, 'NotRendered', undefined);\n    throw e;\n  }\n\n  // Since render could take some time, we need to check if the stream is still valid and if we received a signal to\n  // stop rendering.\n  const refreshedRenderInfo = internalContext.getLocalRenderInfo(callId);\n  if (!refreshedRenderInfo) {\n    // RenderInfo was removed. This should not happen unless stream was removed from the call so dispose the renderer\n    // and clean up the state.\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_RENDER_INFO_NOT_FOUND,\n      level: 'error',\n      message: 'Cannot find local render info after create the view. ',\n      data: {\n        callId\n      }\n    });\n    renderer.dispose();\n    context.setLocalVideoStreamRendererView(callId, undefined);\n    return;\n  }\n  if (refreshedRenderInfo.status === 'Stopping') {\n    // Stop render was called on this stream after we had started rendering. We will dispose this view and do not\n    // put the view into the state.\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_CREATED_STREAM_STOPPING,\n      level: 'warning',\n      message: 'Render info status is stopping, dispose renderer. ',\n      data: {\n        callId\n      }\n    });\n    renderer.dispose();\n    internalContext.setLocalRenderInfo(callId, refreshedRenderInfo.stream, 'NotRendered', undefined);\n    context.setLocalVideoStreamRendererView(callId, undefined);\n    return;\n  }\n\n  // Else The stream still exists and status is not telling us to stop rendering. Complete the render process by\n  // updating the state.\n  internalContext.setLocalRenderInfo(callId, refreshedRenderInfo.stream, 'Rendered', renderer);\n  context.setLocalVideoStreamRendererView(callId, convertFromSDKToDeclarativeVideoStreamRendererView(view));\n  _logEvent(callingStatefulLogger, {\n    name: EventNames.LOCAL_VIEW_RENDER_SUCCEED,\n    level: 'info',\n    message: `Successfully render the local view.`,\n    data: {\n      callId\n    }\n  });\n  return {\n    renderer,\n    view\n  };\n}\nasync function createViewUnparentedVideo(context: CallContext, internalContext: InternalCallContext, stream: LocalVideoStreamState, options?: CreateViewOptions): Promise<CreateViewResult | undefined> {\n  const renderInfo = internalContext.getUnparentedRenderInfo(stream);\n  if (renderInfo && renderInfo.status === 'Rendered') {\n    console.warn('Unparented LocalVideoStream is already rendered');\n    return;\n  }\n  if (renderInfo && renderInfo.status === 'Rendering') {\n    // Do not log to console here as this is a very common situation due to UI rerenders while\n    // the video rendering is in progress.\n    return;\n  }\n  if (renderInfo && renderInfo.status === 'Stopping') {\n    console.warn('Unparented LocalVideoStream is in the middle of stopping');\n    return;\n  }\n  const localVideoStream = new LocalVideoStream(stream.source);\n  const renderer = new VideoStreamRenderer(localVideoStream);\n  internalContext.setUnparentedRenderInfo(stream, localVideoStream, 'Rendering', undefined);\n  let view: VideoStreamRendererView;\n  try {\n    view = await renderer.createView(options);\n  } catch (e) {\n    // Special case for unparented views. Since they are not tied to anything and created by us based on the calls to\n    // this function we'll delete it to clean up the data since keeping it around doesn't help us and if developer wants\n    // to create a new view they can check that the view is not rendered and call this function again.\n    internalContext.deleteUnparentedRenderInfo(stream);\n    throw e;\n  }\n\n  // Since render could take some time, we need to check if the stream is still valid and if we received a signal to\n  // stop rendering.\n  const refreshedRenderInfo = internalContext.getUnparentedRenderInfo(stream);\n  if (!refreshedRenderInfo) {\n    // Unparented stream's RenderInfo was deleted. Currently this shouldn't happen but if it does we'll just dispose the\n    // renderer and clean up state. If developer wanted the stream they could call this function again and that should\n    // generate new working state via this function.\n    renderer.dispose();\n    context.deleteDeviceManagerUnparentedView(stream);\n    return;\n  }\n  if (refreshedRenderInfo.status === 'Stopping') {\n    // Stop render was called on this stream after we had started rendering. We will dispose this view and do not\n    // put the view into the state. Special case for unparented views, delete them from state when stopped to free up\n    // the memory since we were the ones generating this and not tied to any Call state.\n    internalContext.deleteUnparentedRenderInfo(stream);\n    context.deleteDeviceManagerUnparentedView(stream);\n    return;\n  }\n\n  // Else the stream still exists and status is not telling us to stop rendering. Complete the render process by\n  // updating the state.\n  internalContext.setUnparentedRenderInfo(stream, localVideoStream, 'Rendered', renderer);\n  context.setDeviceManagerUnparentedView(stream, convertFromSDKToDeclarativeVideoStreamRendererView(view));\n  return {\n    renderer,\n    view\n  };\n}\nfunction disposeViewRemoteVideo(context: CallContext, internalContext: InternalCallContext, callId: string, participantId: CommunicationIdentifierKind | string, stream: RemoteVideoStreamState): void {\n  const streamId = stream.id;\n  let participantKey;\n  if (typeof participantId === 'string') {\n    participantKey = participantId;\n  } else {\n    participantKey = toFlatCommunicationIdentifier(participantId);\n  }\n  const streamLogInfo = {\n    callId,\n    participantKey,\n    streamId\n  };\n  _logEvent(callingStatefulLogger, {\n    name: EventNames.START_DISPOSE_REMOTE_STREAM,\n    level: 'info',\n    message: 'Start disposing remote stream.',\n    data: streamLogInfo\n  });\n  context.setRemoteVideoStreamRendererView(callId, participantKey, streamId, undefined);\n  const renderInfo = internalContext.getRemoteRenderInfoForParticipant(callId, participantKey, streamId);\n  if (!renderInfo) {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.REMOTE_DISPOSE_INFO_NOT_FOUND,\n      level: 'error',\n      message: 'Cannot find render info when disposing remote stream.',\n      data: streamLogInfo\n    });\n    return;\n  }\n\n  // Sets the status and also renderer. I think we need to always set renderer to undefined since in all status when\n  // cleaned up should have renderer as undefined. If the status is 'Rendered' and renderer is not defined it should\n  // be cleaned up below so we can set it to undefined here.\n  if (renderInfo.status === 'Rendering') {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.REMOTE_STREAM_STOPPING,\n      level: 'info',\n      message: 'Remote stream is still rendering. Changing status to stopping.',\n      data: streamLogInfo\n    });\n    internalContext.setRemoteRenderInfo(callId, participantKey, streamId, renderInfo.stream, 'Stopping', undefined);\n  } else {\n    internalContext.setRemoteRenderInfo(callId, participantKey, streamId, renderInfo.stream, 'NotRendered', undefined);\n  }\n  if (renderInfo.renderer) {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.DISPOSING_REMOTE_RENDERER,\n      level: 'info',\n      message: 'Disposing remote view renderer.',\n      data: streamLogInfo\n    });\n    renderInfo.renderer.dispose();\n  } else {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.REMOTE_RENDERER_NOT_FOUND,\n      level: 'error',\n      message: 'Cannot find remote view renderer.',\n      data: streamLogInfo\n    });\n  }\n}\nfunction disposeViewLocalVideo(context: CallContext, internalContext: InternalCallContext, callId: string): void {\n  const streamLogInfo = {\n    callId\n  };\n  _logEvent(callingStatefulLogger, {\n    name: EventNames.START_DISPOSE_LOCAL_STREAM,\n    level: 'info',\n    message: 'Start disposing local stream.',\n    data: streamLogInfo\n  });\n  context.setLocalVideoStreamRendererView(callId, undefined);\n  const renderInfo = internalContext.getLocalRenderInfo(callId);\n  if (!renderInfo) {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_DISPOSE_INFO_NOT_FOUND,\n      level: 'error',\n      message: 'Cannot find render info when disposing local stream.',\n      data: streamLogInfo\n    });\n    return;\n  }\n\n  // Nothing to dispose of or clean up -- we can safely exit early here.\n  if (renderInfo.status === 'NotRendered') {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_STREAM_ALREADY_DISPOSED,\n      level: 'info',\n      message: 'LocalVideoStream is already disposed.'\n    });\n    return;\n  }\n\n  // Status is already marked as \"stopping\" so we can exit early here. This is because stopping only occurs\n  // when the stream is being created in createView but hasn't been completed being created yet. The createView\n  // method will see the \"stopping\" status and perform the cleanup\n  if (renderInfo.status === 'Stopping') {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_STREAM_STOPPING,\n      level: 'info',\n      message: 'Local stream is already stopping.',\n      data: streamLogInfo\n    });\n    return;\n  }\n\n  // If the stream is in the middle of being rendered (i.e. has state \"Rendering\"), we need the status as\n  // \"stopping\" without performing any cleanup. This will tell the `createView` method that it should stop\n  // rendering and clean up the state once the view has finished being created.\n  if (renderInfo.status === 'Rendering') {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.REMOTE_STREAM_STOPPING,\n      level: 'info',\n      message: 'Remote stream is still rendering. Changing status to stopping.',\n      data: streamLogInfo\n    });\n    internalContext.setLocalRenderInfo(callId, renderInfo.stream, 'Stopping', renderInfo.renderer);\n    return;\n  }\n\n  // Else the state must be in the \"Rendered\" state, so we can dispose the renderer and clean up the state.\n  internalContext.setLocalRenderInfo(callId, renderInfo.stream, 'NotRendered', undefined);\n  if (renderInfo.renderer) {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.DISPOSING_LOCAL_RENDERER,\n      level: 'info',\n      message: 'Disposing local view renderer.',\n      data: streamLogInfo\n    });\n    renderInfo.renderer.dispose();\n  } else {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_RENDERER_NOT_FOUND,\n      level: 'error',\n      message: 'Cannot find renderer when disposing local stream.',\n      data: streamLogInfo\n    });\n  }\n}\nfunction disposeViewUnparentedVideo(context: CallContext, internalContext: InternalCallContext, stream: LocalVideoStreamState): void {\n  _logEvent(callingStatefulLogger, {\n    name: EventNames.START_DISPOSE_LOCAL_STREAM,\n    level: 'info',\n    message: 'Start disposing unparented local stream.'\n  });\n  context.deleteDeviceManagerUnparentedView(stream);\n  const renderInfo = internalContext.getUnparentedRenderInfo(stream);\n  if (!renderInfo) {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_DISPOSE_INFO_NOT_FOUND,\n      level: 'error',\n      message: 'Cannot find render info when disposing unparented local stream.'\n    });\n    return;\n  }\n  if (renderInfo.status === 'Rendering') {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_STREAM_STOPPING,\n      level: 'info',\n      message: 'Unparented local stream is still rendering. Changing status to stopping.'\n    });\n    internalContext.setUnparentedRenderInfo(stream, renderInfo.stream, 'Stopping', undefined);\n  } else {\n    internalContext.deleteUnparentedRenderInfo(stream);\n  }\n  if (renderInfo.renderer) {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.DISPOSING_LOCAL_RENDERER,\n      level: 'info',\n      message: 'Disposing unparented local view renderer.'\n    });\n    renderInfo.renderer.dispose();\n  } else {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.LOCAL_RENDERER_NOT_FOUND,\n      level: 'error',\n      message: 'Cannot find renderer when disposing unparented local stream.'\n    });\n  }\n}\n\n/**\n * @private\n */\nexport function createView(context: CallContext, internalContext: InternalCallContext, callId: string | undefined, participantId: CommunicationIdentifierKind | string | undefined, stream: LocalVideoStreamState | RemoteVideoStreamState, options?: CreateViewOptions): Promise<CreateViewResult | undefined> {\n  if ('id' in stream && callId && participantId) {\n    // Render RemoteVideoStream that is part of a Call\n    return createViewRemoteVideo(context, internalContext, callId, participantId, stream, options);\n  } else if (!('id' in stream) && callId) {\n    // Render LocalVideoStream that is part of a Call\n    return createViewLocalVideo(context, internalContext, callId, options);\n  } else if (!('id' in stream) && !callId) {\n    // Render LocalVideoStream that is not part of a Call\n    // Because it is not part of the call we don't tee errors to state naturally (e.g. via a Call Client function such as startVideo).\n    // We do not have a startLocalPreviewVideo function, so as a workaround we ensure any errors are propagated here.\n    return context.withAsyncErrorTeedToState(async () => await createViewUnparentedVideo(context, internalContext, stream, options), 'Call.startVideo')();\n  } else {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.CREATE_STREAM_INVALID_PARAMS,\n      level: 'warning',\n      message: 'Create View invalid combination of parameters.'\n    });\n    return Promise.resolve(undefined);\n  }\n}\n\n/**\n * @private\n */\nexport function disposeView(context: CallContext, internalContext: InternalCallContext, callId: string | undefined, participantId: CommunicationIdentifierKind | string | undefined, stream: LocalVideoStreamState | RemoteVideoStreamState): void {\n  if ('id' in stream && callId && participantId) {\n    // Stop rendering RemoteVideoStream that is part of a Call\n    disposeViewRemoteVideo(context, internalContext, callId, participantId, stream);\n  } else if (!('id' in stream) && callId) {\n    // Stop rendering LocalVideoStream that is part of a Call\n    disposeViewLocalVideo(context, internalContext, callId);\n  } else if (!('id' in stream) && !callId) {\n    // Stop rendering LocalVideoStream that is not part of a Call\n    // Because it is not part of the call we don't tee errors to state naturally (e.g. via a Call Client function such as startVideo).\n    // We do not have a stopLocalPreviewVideo function, so as a workaround we ensure any errors are propagated here.\n    context.withErrorTeedToState(() => disposeViewUnparentedVideo(context, internalContext, stream), 'Call.stopVideo')();\n  } else {\n    _logEvent(callingStatefulLogger, {\n      name: EventNames.DISPOSE_STREAM_INVALID_PARAMS,\n      level: 'warning',\n      message: 'Dispose View invalid combination of parameters.'\n    });\n    return;\n  }\n}\n\n/**\n * @private\n * Only stops videos that are tied to a Call.\n */\nexport function disposeAllViewsFromCall(context: CallContext, internalContext: InternalCallContext, callId: string): void {\n  const callStreams = internalContext.getRemoteRenderInfoForCall(callId);\n  if (callStreams) {\n    for (const [participantKey, participantStreams] of callStreams.entries()) {\n      for (const [_, remoteStreamAndRenderer] of participantStreams.entries()) {\n        // We don't want to accept SDK stream as parameter but we also don't cache the declarative stream so we have to\n        // convert the SDK stream to declarative stream which is not pretty so this could use some further refactoring.\n        disposeView(context, internalContext, callId, participantKey, convertSdkRemoteStreamToDeclarativeRemoteStream(remoteStreamAndRenderer.stream));\n      }\n    }\n  }\n  const localStreamAndRenderer = internalContext.getLocalRenderInfo(callId);\n  if (localStreamAndRenderer && localStreamAndRenderer.renderer) {\n    // We don't want to accept SDK stream as parameter but we also don't cache the declarative stream so we have to\n    // convert the SDK stream to declarative stream which is not pretty so this could use some further refactoring.\n    disposeView(context, internalContext, callId, undefined, convertSdkLocalStreamToDeclarativeLocalStream(localStreamAndRenderer.stream));\n  }\n}\n\n/**\n * @private\n */\nexport function disposeAllViews(context: CallContext, internalContext: InternalCallContext): void {\n  const callIds = internalContext.getCallIds();\n  for (const callId of callIds) {\n    disposeAllViewsFromCall(context, internalContext, callId);\n  }\n}\"../../acs-ui-common/src\""]}