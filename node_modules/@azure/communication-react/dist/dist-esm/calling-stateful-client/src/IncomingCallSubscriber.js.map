{"version":3,"file":"IncomingCallSubscriber.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/IncomingCallSubscriber.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAKlC;;;;;GAKG;AACH,MAAM,OAAO,sBAAsB;IAGjC,YAAY,YAAgC;IAC5C,uFAAuF;IACvF,oBAAoF;QAK5E,cAAS,GAAG,GAAS,EAAE;YAC7B,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACrD,CAAC,CAAC;QACK,gBAAW,GAAG,GAAS,EAAE;YAC9B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACtD,CAAC,CAAC;QACM,cAAS,GAAG,CAAC,KAEpB,EAAQ,EAAE;YACT,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;QACzE,CAAC,CAAC;QAdA,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;QAClD,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;CAYF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CallEndReason } from '@azure/communication-calling';\nimport { IncomingCallCommon } from './BetaToStableTypes';\n\n/**\n * Keeps track of the listeners assigned to a particular incoming call because when we get an event from SDK, it doesn't\n * tell us which incoming call it is for. If we keep track of this then we know which incoming call in the state that\n * needs an update and also which property of that incoming call. Also we can use this when unregistering to a incoming\n * call.\n */\nexport class IncomingCallSubscriber {\n  private _incomingCall: IncomingCallCommon;\n  private _setIncomingCallEnded: (incomingCallId: string, callEndReason: CallEndReason) => void;\n  constructor(incomingCall: IncomingCallCommon,\n  // setIncomingCallEnded callback is used so parent can clean up IncomingCallSubscriber.\n  setIncomingCallEnded: (incomingCallId: string, callEndReason: CallEndReason) => void) {\n    this._incomingCall = incomingCall;\n    this._setIncomingCallEnded = setIncomingCallEnded;\n    this.subscribe();\n  }\n  private subscribe = (): void => {\n    this._incomingCall.on('callEnded', this.callEnded);\n  };\n  public unsubscribe = (): void => {\n    this._incomingCall.off('callEnded', this.callEnded);\n  };\n  private callEnded = (event: {\n    callEndReason: CallEndReason;\n  }): void => {\n    this._setIncomingCallEnded(this._incomingCall.id, event.callEndReason);\n  };\n}"]}