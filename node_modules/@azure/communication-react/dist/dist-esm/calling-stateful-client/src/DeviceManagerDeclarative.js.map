{"version":3,"file":"DeviceManagerDeclarative.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/DeviceManagerDeclarative.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AudioDeviceInfo, DeviceAccess, DeviceManager, VideoDeviceInfo } from '@azure/communication-calling';\nimport { CallContext } from './CallContext';\n\n/**\n * Defines the additional methods added by the stateful on top of {@link @azure/communication-calling#DeviceManager}.\n *\n * @public\n */\nexport interface StatefulDeviceManager extends DeviceManager {\n  /**\n   * Sets the selectedCamera in the {@link DeviceManagerState}. This is completely developer driven and is not tied in\n   * any way to {@link @azure/communication-calling#DeviceManager}. It is entirely contained in\n   * {@link StatefulDeviceManager}. See also {@link DeviceManagerState.selectedCamera}.\n   */\n  selectCamera: (VideoDeviceInfo) => void;\n}\n\n/**\n * ProxyDeviceManager proxies DeviceManager and subscribes to all events that affect device manager state. State updates\n * are set on the provided context. Also any queries for state are proxied and stored in state as well. Only one device\n * manager should exist for a given CallClient so if CallClient.getDeviceManager is called multiple times, either a\n * cached ProxyDeviceManager should be returned or the existing ProxyDeviceManager should be destructed via destructor()\n * and a new ProxyDeviceManager created.\n */\nclass ProxyDeviceManager implements ProxyHandler<DeviceManager> {\n  private _deviceManager: DeviceManager;\n  private _context: CallContext;\n  constructor(deviceManager: DeviceManager, context: CallContext) {\n    this._deviceManager = deviceManager;\n    this._context = context;\n    this.setDeviceManager();\n    this.subscribe();\n  }\n  private setDeviceManager = (): void => {\n    // isSpeakerSelectionAvailable, selectedMicrophone, and selectedSpeaker are properties on DeviceManager. Since they\n    // are not functions we can't proxy them so we'll update whenever we think they may need updating such as at\n    // construction time or when certain events happen.\n    this._context.setDeviceManagerIsSpeakerSelectionAvailable(this._deviceManager.isSpeakerSelectionAvailable);\n    this._context.setDeviceManagerSelectedMicrophone(this._deviceManager.selectedMicrophone);\n    this._context.setDeviceManagerSelectedSpeaker(this._deviceManager.selectedSpeaker);\n  };\n  private subscribe = (): void => {\n    this._deviceManager.on('videoDevicesUpdated', this.videoDevicesUpdated);\n    this._deviceManager.on('audioDevicesUpdated', this.audioDevicesUpdated);\n    this._deviceManager.on('selectedMicrophoneChanged', this.selectedMicrophoneChanged);\n    this._deviceManager.on('selectedSpeakerChanged', this.selectedSpeakerChanged);\n  };\n\n  /**\n   * This is used to unsubscribe DeclarativeDeviceManager from the DeviceManager events.\n   */\n  public unsubscribe = (): void => {\n    this._deviceManager.off('videoDevicesUpdated', this.videoDevicesUpdated);\n    this._deviceManager.off('audioDevicesUpdated', this.audioDevicesUpdated);\n    this._deviceManager.off('selectedMicrophoneChanged', this.selectedMicrophoneChanged);\n    this._deviceManager.off('selectedSpeakerChanged', this.selectedSpeakerChanged);\n  };\n\n  /**\n   * Used to set a camera inside the proxy device manager.\n   *\n   * @param videoDeviceInfo VideoDeviceInfo\n   */\n  public selectCamera = (videoDeviceInfo: VideoDeviceInfo): void => {\n    this._context.setDeviceManagerSelectedCamera(videoDeviceInfo);\n  };\n  private videoDevicesUpdated = async (): Promise<void> => {\n    // Device Manager always has a camera with '' name if there are no real camera devices available.\n    // We don't want to show that in the UI.\n    const realCameras = (await this._deviceManager.getCameras()).filter(c => !!c.name);\n    this._context.setDeviceManagerCameras(dedupeById(realCameras));\n  };\n  private audioDevicesUpdated = async (): Promise<void> => {\n    this._context.setDeviceManagerMicrophones(dedupeById(await this._deviceManager.getMicrophones()));\n    this._context.setDeviceManagerSpeakers(dedupeById(await this._deviceManager.getSpeakers()));\n  };\n  private selectedMicrophoneChanged = (): void => {\n    this._context.setDeviceManagerSelectedMicrophone(this._deviceManager.selectedMicrophone);\n  };\n  private selectedSpeakerChanged = (): void => {\n    this._context.setDeviceManagerSelectedSpeaker(this._deviceManager.selectedSpeaker);\n  };\n  public get<P extends keyof DeviceManager>(target: DeviceManager, prop: P): any {\n    switch (prop) {\n      case 'getCameras':\n        {\n          return this._context.withAsyncErrorTeedToState((): Promise<VideoDeviceInfo[]> => {\n            return target.getCameras().then((cameras: VideoDeviceInfo[]) => {\n              // Device Manager always has a camera with '' name if there are no real camera devices available.\n              // We don't want to show that in the UI.\n              const realCameras = cameras.filter(c => !!c.name);\n              this._context.setDeviceManagerCameras(dedupeById(realCameras));\n              return realCameras;\n            });\n          }, 'DeviceManager.getCameras');\n        }\n      case 'getMicrophones':\n        {\n          return this._context.withAsyncErrorTeedToState((): Promise<AudioDeviceInfo[]> => {\n            return target.getMicrophones().then((microphones: AudioDeviceInfo[]) => {\n              this._context.setDeviceManagerMicrophones(dedupeById(microphones));\n              return microphones;\n            });\n          }, 'DeviceManager.getMicrophones');\n        }\n      case 'getSpeakers':\n        {\n          return this._context.withAsyncErrorTeedToState((): Promise<AudioDeviceInfo[]> => {\n            return target.getSpeakers().then((speakers: AudioDeviceInfo[]) => {\n              this._context.setDeviceManagerSpeakers(dedupeById(speakers));\n              return speakers;\n            });\n          }, 'DeviceManager.getSpeakers');\n        }\n      case 'selectMicrophone':\n        {\n          return this._context.withAsyncErrorTeedToState((...args: Parameters<DeviceManager['selectMicrophone']>): Promise<void> => {\n            return target.selectMicrophone(...args).then(() => {\n              this._context.setDeviceManagerSelectedMicrophone(target.selectedMicrophone);\n            });\n          }, 'DeviceManager.selectMicrophone');\n        }\n      case 'selectSpeaker':\n        {\n          return this._context.withAsyncErrorTeedToState((...args: Parameters<DeviceManager['selectSpeaker']>): Promise<void> => {\n            return target.selectSpeaker(...args).then(() => {\n              this._context.setDeviceManagerSelectedSpeaker(target.selectedSpeaker);\n            });\n          }, 'DeviceManager.selectSpeaker');\n        }\n      case 'askDevicePermission':\n        {\n          return this._context.withAsyncErrorTeedToState((...args: Parameters<DeviceManager['askDevicePermission']>): Promise<DeviceAccess> => {\n            return target.askDevicePermission(...args).then((deviceAccess: DeviceAccess) => {\n              this._context.setDeviceManagerDeviceAccess(deviceAccess);\n              this.setDeviceManager();\n              return deviceAccess;\n            });\n          }, 'DeviceManager.askDevicePermission');\n        }\n      default:\n        return Reflect.get(target, prop);\n    }\n  }\n}\n\n// TODO: Remove this when SDK no longer returns duplicate audio and video devices\n/** Helper function to dedupe duplicate audio and video devices obtained from SDK */\nconst dedupeById = <T extends {\n  id: string;\n},>(devices: T[]): T[] => {\n  const ids = new Set();\n  const uniqueDevices: T[] = [];\n  devices.forEach((device: T) => {\n    if (!ids.has(device.id)) {\n      uniqueDevices.push(device);\n      ids.add(device.id);\n    }\n  });\n  return uniqueDevices;\n};\n\n/**\n * Creates a declarative DeviceManager by proxying DeviceManager with ProxyDeviceManager. The declarative DeviceManager\n * will put state updates in the given context.\n *\n * @param deviceManager - DeviceManager from SDK\n * @param context - CallContext from StatefulCallClient\n */\nexport const deviceManagerDeclaratify = (deviceManager: DeviceManager, context: CallContext): DeviceManager => {\n  const proxyDeviceManager = new ProxyDeviceManager(deviceManager, context);\n  Object.defineProperty(deviceManager, 'unsubscribe', {\n    configurable: false,\n    value: () => proxyDeviceManager.unsubscribe()\n  });\n  Object.defineProperty(deviceManager, 'selectCamera', {\n    configurable: false,\n    value: (videoDeviceInfo: VideoDeviceInfo) => proxyDeviceManager.selectCamera(videoDeviceInfo)\n  });\n  return (new Proxy(deviceManager, proxyDeviceManager) as StatefulDeviceManager);\n};"]}