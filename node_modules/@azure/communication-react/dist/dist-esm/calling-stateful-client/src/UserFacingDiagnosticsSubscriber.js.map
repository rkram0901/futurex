{"version":3,"file":"UserFacingDiagnosticsSubscriber.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-stateful-client/src/UserFacingDiagnosticsSubscriber.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { UserFacingDiagnosticsFeature, DiagnosticChangedEventArgs, LatestDiagnosticValue, MediaDiagnosticChangedEventArgs, NetworkDiagnosticChangedEventArgs } from '@azure/communication-calling';\nimport { CallContext } from './CallContext';\nimport { CallIdRef } from './CallIdRef';\n\n/**\n * @private\n */\nexport class UserFacingDiagnosticsSubscriber {\n  private _callIdRef: CallIdRef;\n  private _context: CallContext;\n  private _diagnostics: UserFacingDiagnosticsFeature;\n  constructor(callIdRef: CallIdRef, context: CallContext, diagnostics: UserFacingDiagnosticsFeature) {\n    this._callIdRef = callIdRef;\n    this._context = context;\n    this._diagnostics = diagnostics;\n    this.setInitialDiagnostics();\n    this.subscribe();\n  }\n  public unsubscribe = (): void => {\n    this._diagnostics.network.off('diagnosticChanged', this.networkDiagnosticsChanged.bind(this));\n    this._diagnostics.media.off('diagnosticChanged', this.mediaDiagnosticsChanged.bind(this));\n  };\n  private setInitialDiagnostics(): void {\n    const network = this._diagnostics.network.getLatest();\n    const media = this._diagnostics.media.getLatest();\n    if (Object.entries(network).length === 0 && Object.entries(media).length === 0) {\n      return;\n    }\n    this._context.modifyState(state => {\n      const call = state.calls[this._callIdRef.callId];\n      if (call === undefined) {\n        return;\n      }\n      call.diagnostics = {\n        network: {\n          latest: network\n        },\n        media: {\n          latest: media\n        }\n      };\n    });\n  }\n  private subscribe(): void {\n    this._diagnostics.network.on('diagnosticChanged', this.networkDiagnosticsChanged.bind(this));\n    this._diagnostics.media.on('diagnosticChanged', this.mediaDiagnosticsChanged.bind(this));\n  }\n  private networkDiagnosticsChanged(args: NetworkDiagnosticChangedEventArgs): void {\n    this._context.modifyState(state => {\n      const call = state.calls[this._callIdRef.callId];\n      if (call === undefined) {\n        return;\n      }\n      const network = call.diagnostics?.network.latest;\n      if (network) {\n        network[args.diagnostic] = latestFromEvent(args);\n      }\n    });\n  }\n  private mediaDiagnosticsChanged(args: MediaDiagnosticChangedEventArgs): void {\n    this._context.modifyState(state => {\n      const call = state.calls[this._callIdRef.callId];\n      if (call === undefined) {\n        return;\n      }\n      const media = call.diagnostics?.media.latest;\n      if (media) {\n        media[args.diagnostic] = latestFromEvent(args);\n      }\n    });\n  }\n}\nconst latestFromEvent = (args: DiagnosticChangedEventArgs): LatestDiagnosticValue => ({\n  value: args.value,\n  valueType: args.valueType\n});"]}