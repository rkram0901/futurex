// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { mergeStyles, Stack } from '@fluentui/react';
import { _ComplianceBanner, _useContainerHeight, _useContainerWidth, ErrorBar, useTheme } from "../../../../../react-components/src";
import React, { useMemo, useRef } from 'react';
import { containerDivStyles } from '../../common/ContainerRectProps';
import { CallControls } from '../components/CallControls';
import { callArrangementContainerStyles, callControlsContainerStyles, notificationsContainerStyles, containerStyleDesktop, containerStyleMobile, mediaGalleryContainerStyles, galleryParentContainerStyles, bannerNotificationStyles } from '../styles/CallPage.styles';
import { MutedNotification } from './MutedNotification';
/**
 * @private
 */
export const CallArrangement = (props) => {
    var _a;
    const containerClassName = useMemo(() => {
        return props.mobileView ? containerStyleMobile : containerStyleDesktop;
    }, [props.mobileView]);
    const theme = useTheme();
    const callGalleryStyles = useMemo(() => galleryParentContainerStyles(theme.palette.neutralLighterAlt), [theme.palette.neutralLighterAlt]);
    const containerRef = useRef(null);
    const containerWidth = _useContainerWidth(containerRef);
    const containerHeight = _useContainerHeight(containerRef);
    // To be removed once feature is out of beta, replace with callCompositeContainerCSS
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    const callCompositeContainerFlex = () => {
        return {
            display: 'flex'
        };
    };
    let canUnmute = true;
    let errorBarProps = props.errorBarProps;
    return React.createElement("div", { ref: containerRef, className: mergeStyles(containerDivStyles), id: props.id },
        React.createElement(Stack, { verticalFill: true, horizontalAlign: "stretch", className: containerClassName, "data-ui-id": props.dataUiId },
            React.createElement(Stack, { grow: true, styles: callArrangementContainerStyles },
                React.createElement(Stack.Item, { styles: notificationsContainerStyles },
                    React.createElement(Stack, { styles: bannerNotificationStyles },
                        React.createElement(_ComplianceBanner, Object.assign({}, props.complianceBannerProps))),
                    errorBarProps !== false && React.createElement(Stack, { styles: bannerNotificationStyles },
                        React.createElement(ErrorBar, Object.assign({}, errorBarProps))),
                    canUnmute && !!props.mutedNotificationProps && React.createElement(MutedNotification, Object.assign({}, props.mutedNotificationProps))),
                ((_a = props.callControlProps) === null || _a === void 0 ? void 0 : _a.options) !== false && React.createElement(Stack.Item, { className: callControlsContainerStyles },
                    React.createElement(CallControls, Object.assign({}, props.callControlProps, { containerWidth: containerWidth, containerHeight: containerHeight, isMobile: props.mobileView }))),
                React.createElement(Stack, { horizontal: true, grow: true },
                    React.createElement(Stack.Item, { grow: true, style: callCompositeContainerFlex() },
                        React.createElement(Stack.Item, { styles: callGalleryStyles, grow: true }, props.onRenderGalleryContent && React.createElement(Stack, { verticalFill: true, styles: mediaGalleryContainerStyles }, props.onRenderGalleryContent())))))));
};
//# sourceMappingURL=CallArrangement.js.map