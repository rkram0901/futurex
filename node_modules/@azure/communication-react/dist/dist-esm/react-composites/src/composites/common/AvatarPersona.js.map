{"version":3,"file":"AvatarPersona.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-composites/src/composites/common/AvatarPersona.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAElC,OAAO,EAAiB,OAAO,EAAwB,MAAM,iBAAiB,CAAC;AAC/E,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAsDnD;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,KAAyB,EAAe,EAAE;;IACtE,MAAM,EACJ,MAAM,EACN,YAAY,EACZ,IAAI,EACJ,QAAQ,EACR,aAAa,EACb,aAAa,EACb,iBAAiB,EACjB,mBAAmB,EACpB,GAAG,KAAK,CAAC;IACV,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,QAAQ,EAAiC,CAAC;IAClE,SAAS,CAAC,GAAG,EAAE;QACb,CAAC,GAAS,EAAE;YACV,IAAI,YAAY,IAAI,MAAM,EAAE;gBAC1B,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;gBAC3C,IAAI,yBAAyB,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE;oBAC5C,OAAO,CAAC,OAAO,CAAC,CAAC;iBAClB;aACF;QACH,CAAC,CAAA,CAAC,EAAE,CAAC;IACP,CAAC,EAAE,CAAC,IAAI,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC;IACjC,OAAO,oBAAC,OAAO,oBAAK,KAAK,IAAE,IAAI,EAAE,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,mCAAI,IAAI,EAAE,QAAQ,EAAE,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,mCAAI,QAAQ,EAAE,aAAa,EAAE,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,aAAa,mCAAI,aAAa,EAAE,aAAa,EAAE,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,aAAa,mCAAI,aAAa,EAAE,iBAAiB,EAAE,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,iBAAiB,mCAAI,iBAAiB,mCAAI,OAAO;QAC/Q,2CAA2C;QAC3C,mBAAmB,EAAE,mBAAmB,aAAnB,mBAAmB,cAAnB,mBAAmB,GAAI,KAAK,IAAI,CAAC;AACxD,CAAC,CAAC;AACF,MAAM,yBAAyB,GAAG,CAAC,WAA+B,EAAE,OAA2B,EAAW,EAAE;IAC1G,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,OAAK,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAA,IAAI,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,OAAK,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAA,IAAI,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,aAAa,OAAK,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,CAAA,IAAI,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,aAAa,OAAK,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,CAAA,IAAI,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,iBAAiB,OAAK,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,iBAAiB,CAAA,CAAC;AAC/Q,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { IPersonaProps, Persona, PersonaInitialsColor } from '@fluentui/react';\nimport React, { useEffect, useState } from 'react';\n\n/**\n * Custom data attributes for displaying avatar for a user.\n *\n * @public\n */\nexport type AvatarPersonaData = {\n  /**\n   * Primary text to display, usually the name of the person.\n   */\n  text?: string;\n  /**\n   * Image URL to use, should be a square aspect ratio and big enough to fit in the image area.\n   */\n  imageUrl?: string;\n  /**\n   * The user's initials to display in the image area when there is no image.\n   * @defaultvalue Derived from `text`\n   */\n  imageInitials?: string;\n  /**\n   * The background color when the user's initials are displayed.\n   * @defaultvalue Derived from `text`\n   */\n  initialsColor?: PersonaInitialsColor | string;\n  /**\n   * The text color when the user's initials are displayed\n   * @defaultvalue `white`\n   */\n  initialsTextColor?: string;\n};\n\n/**\n * Callback function used to provide custom data to build an avatar for a user.\n *\n * @public\n */\nexport type AvatarPersonaDataCallback = (userId: string) => Promise<AvatarPersonaData>;\n\n/**\n * @private\n */\nexport interface AvatarPersonaProps extends IPersonaProps {\n  /**\n   * Azure Communicator user ID.\n   */\n  userId?: string;\n  /**\n   * A function that returns a Promise that resolves to the data to be displayed.\n   */\n  dataProvider?: AvatarPersonaDataCallback;\n}\n\n/**\n * An Avatar component made using the `Persona` component.\n * It allows you to specify a `userId` and a `dataProvider` to retrieve the `AvatarPersonaData`.\n * Read more about `Persona` component at https://developer.microsoft.com/fluentui#/controls/web/persona\n *\n * @private\n */\nexport const AvatarPersona = (props: AvatarPersonaProps): JSX.Element => {\n  const {\n    userId,\n    dataProvider,\n    text,\n    imageUrl,\n    imageInitials,\n    initialsColor,\n    initialsTextColor,\n    showOverflowTooltip\n  } = props;\n  const [data, setData] = useState<AvatarPersonaData | undefined>();\n  useEffect(() => {\n    (async () => {\n      if (dataProvider && userId) {\n        const newData = await dataProvider(userId);\n        if (avatarDeepDifferenceCheck(data, newData)) {\n          setData(newData);\n        }\n      }\n    })();\n  }, [data, dataProvider, userId]);\n  return <Persona {...props} text={data?.text ?? text} imageUrl={data?.imageUrl ?? imageUrl} imageInitials={data?.imageInitials ?? imageInitials} initialsColor={data?.initialsColor ?? initialsColor} initialsTextColor={data?.initialsTextColor ?? initialsTextColor ?? 'white'}\n  // default disable tooltip unless specified\n  showOverflowTooltip={showOverflowTooltip ?? false} />;\n};\nconst avatarDeepDifferenceCheck = (currentData?: AvatarPersonaData, newData?: AvatarPersonaData): boolean => {\n  return currentData?.text !== newData?.text || currentData?.imageUrl !== newData?.imageUrl || currentData?.initialsColor !== newData?.initialsColor || currentData?.imageInitials !== newData?.imageInitials || currentData?.initialsTextColor !== newData?.initialsTextColor;\n};"]}