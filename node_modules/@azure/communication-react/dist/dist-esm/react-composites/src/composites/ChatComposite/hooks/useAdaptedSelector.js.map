{"version":3,"file":"useAdaptedSelector.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/ChatComposite/hooks/useAdaptedSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { ChatClientState, ChatErrors, ChatThreadClientState } from '@internal/chat-stateful-client';\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport { ChatAdapterState } from '../adapter/ChatAdapter';\nimport { useAdapter } from '../adapter/ChatAdapterProvider';\nimport memoizeOne from 'memoize-one';\nimport { CommunicationIdentifierKind } from '@azure/communication-common';\n\n/**\n * @private\n */\nexport const useAdaptedSelector = <SelectorT extends (state: ChatClientState, props: any) => any,>(selector: SelectorT, selectorProps?: Parameters<SelectorT>[1]): ReturnType<SelectorT> => {\n  return useSelectorWithAdaptation(selector, adaptCompositeState, selectorProps);\n};\n\n/**\n * @private\n */\nexport const useSelectorWithAdaptation = <SelectorT extends (state: ReturnType<AdaptFuncT>, props: any) => any, AdaptFuncT extends (state: ChatAdapterState) => any>(selector: SelectorT, adaptState: AdaptFuncT, selectorProps?: Parameters<SelectorT>[1]): ReturnType<SelectorT> => {\n  const adapter = useAdapter();\n\n  // Keeps track of whether the current component is mounted or not. If it has unmounted, make sure we do not modify the\n  // state or it will cause React warnings in the console. https://skype.visualstudio.com/SPOOL/_workitems/edit/2453212\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  });\n  const threadId = adapter.getState().thread.threadId;\n  const threadConfigProps = useMemo(() => ({\n    threadId\n  }), [threadId]);\n  const [props, setProps] = useState(selector(adaptState(adapter.getState()), selectorProps ?? threadConfigProps));\n  const propRef = useRef(props);\n  propRef.current = props;\n  useEffect(() => {\n    const onStateChange = (state: ChatAdapterState): void => {\n      if (!mounted.current) {\n        return;\n      }\n      const newProps = selector(adaptState(state), selectorProps ?? threadConfigProps);\n      if (propRef.current !== newProps) {\n        setProps(newProps);\n      }\n    };\n    adapter.onStateChange(onStateChange);\n    return () => {\n      adapter.offStateChange(onStateChange);\n    };\n  }, [adaptState, adapter, selector, selectorProps, threadConfigProps]);\n  return props;\n};\nconst memoizeState = memoizeOne((userId: CommunicationIdentifierKind, displayName: string, threads: {\n  [key: string]: ChatThreadClientState;\n}, latestErrors: ChatErrors) => ({\n  userId,\n  displayName,\n  threads,\n  latestErrors\n}));\nconst memoizeThreads = memoizeOne((thread: ChatThreadClientState) => ({\n  [thread.threadId]: thread\n}));\nconst adaptCompositeState = (compositeState: ChatAdapterState): ChatClientState => {\n  return memoizeState(compositeState.userId, compositeState.displayName, memoizeThreads(compositeState.thread), (\n  // This is an unsafe type expansion.\n  // compositeState.latestErrors can contain properties that are not valid in ChatErrors.\n  //\n  // But there is no way to check for valid property names at runtime:\n  // - The set of valid property names is built from types in the @azure/communication-chat.\n  //   Thus we don't have a literal array of allowed strings at runtime.\n  // - Due to minification / uglification, the property names from the objects at runtime can't be used\n  //   to compare against permissible values inferred from the types.\n  //\n  // This is not a huge problem -- it simply means that our adapted selector will include some extra operations\n  // that are unknown to the UI component and data binding libraries. Generic handling of the errors (e.g.,\n  // just displaying them in some UI surface) will continue to work for these operations. Handling of\n  // specific operations (e.g., acting on errors related to permission issues) will ignore these operations.\n  compositeState.latestErrors as ChatErrors));\n};\"../../../../../chat-stateful-client/src\""]}