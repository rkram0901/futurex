import { CallWithChatAdapter } from './CallWithChatAdapter';
import { CallAdapter, CallAdapterState } from '../../CallComposite';
import { CreateVideoStreamViewResult, VideoStreamOptions } from "../../../../../react-components/src";
import { AudioDeviceInfo, VideoDeviceInfo, Call, PermissionConstraints, StartCallOptions } from '@azure/communication-calling';
/**
 * Facade around the CallWithChatAdapter to satisfy the call adapter interface.
 *
 * @private
 */
export declare class CallWithChatBackedCallAdapter implements CallAdapter {
    private callWithChatAdapter;
    private eventStore;
    constructor(callWithChatAdapter: CallWithChatAdapter);
    on: (event: any, listener: any) => void;
    off: (event: any, listener: any) => void;
    onStateChange: (handler: (state: CallAdapterState) => void) => void;
    offStateChange: (handler: (state: CallAdapterState) => void) => void;
    getState: () => CallAdapterState;
    dispose: () => void;
    joinCall: (microphoneOn?: boolean | undefined) => Call | undefined;
    leaveCall: (forEveryone?: boolean | undefined) => Promise<void>;
    startCall: (participants: string[], options: StartCallOptions) => Call | undefined;
    setCamera: (sourceId: VideoDeviceInfo, options?: VideoStreamOptions | undefined) => Promise<void>;
    setMicrophone: (sourceId: AudioDeviceInfo) => Promise<void>;
    setSpeaker: (sourceId: AudioDeviceInfo) => Promise<void>;
    askDevicePermission: (constraints: PermissionConstraints) => Promise<void>;
    queryCameras: () => Promise<VideoDeviceInfo[]>;
    queryMicrophones: () => Promise<AudioDeviceInfo[]>;
    querySpeakers: () => Promise<AudioDeviceInfo[]>;
    startCamera: (options?: VideoStreamOptions | undefined) => Promise<void>;
    stopCamera: () => Promise<void>;
    mute: () => Promise<void>;
    unmute: () => Promise<void>;
    startScreenShare: () => Promise<void>;
    stopScreenShare: () => Promise<void>;
    removeParticipant: (userId: string) => Promise<void>;
    createStreamView: (remoteUserId?: string | undefined, options?: VideoStreamOptions | undefined) => Promise<void | CreateVideoStreamViewResult>;
    disposeStreamView: (remoteUserId?: string | undefined, options?: VideoStreamOptions | undefined) => Promise<void>;
}
//# sourceMappingURL=CallWithChatBackedCallAdapter.d.ts.map