{"version":3,"file":"localVideoStreamSelector.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/selectors/localVideoStreamSelector.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,sDAA6C;AAE/E,OAAO,KAAK,QAAQ,MAAM,UAAU,CAAC;AACrC,OAAO,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;AACzE,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAE1D;;GAEG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC,kBAAkB,EAAE,gBAAgB,EAAE,oBAAoB,CAAC,EAAE,CAAC,UAAU,EAAE,aAAa,EAAE,iBAAiB,EAAE,EAAE;;IACvK,IAAI,gBAAmD,CAAC;IACxD,IAAI,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;QACpC,gBAAgB,GAAG,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,KAAK,OAAO,CAAC,CAAC;KAChF;SAAM,IAAI,YAAY,CAAC,aAAa,CAAC,EAAE;QACtC,iHAAiH;QACjH,gFAAgF;QAChF,gBAAgB,GAAG,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;KACrD;IACD,OAAO;QACL,WAAW,EAAE,CAAC,CAAC,gBAAgB;QAC/B,UAAU,EAAE,MAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI,0CAAE,UAAU;QAC9C,aAAa,EAAE,MAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI,0CAAE,MAAM;KAC9C,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { _isInCall, _isPreviewOn } from '@internal/calling-component-bindings';\nimport { LocalVideoStreamState } from '@internal/calling-stateful-client';\nimport * as reselect from 'reselect';\nimport { getDeviceManager, getLocalVideoStreams } from './baseSelectors';\nimport { callStatusSelector } from './callStatusSelector';\n\n/**\n * @private\n */\nexport const localVideoSelector = reselect.createSelector([callStatusSelector, getDeviceManager, getLocalVideoStreams], (callStatus, deviceManager, localVideoStreams) => {\n  let localVideoStream: LocalVideoStreamState | undefined;\n  if (_isInCall(callStatus.callStatus)) {\n    localVideoStream = localVideoStreams?.find(i => i.mediaStreamType === 'Video');\n  } else if (_isPreviewOn(deviceManager)) {\n    // TODO: we should take in a LocalVideoStream that developer wants to use as their 'Preview' view. We should also\n    // handle cases where 'Preview' view is in progress and not necessary completed.\n    localVideoStream = deviceManager.unparentedViews[0];\n  }\n  return {\n    isAvailable: !!localVideoStream,\n    isMirrored: localVideoStream?.view?.isMirrored,\n    renderElement: localVideoStream?.view?.target\n  };\n});\"../../../../../calling-component-bindings/src\"\"../../../../../calling-stateful-client/src\""]}