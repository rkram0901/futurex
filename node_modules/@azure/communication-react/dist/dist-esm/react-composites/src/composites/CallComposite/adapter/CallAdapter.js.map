{"version":3,"file":"CallAdapter.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/adapter/CallAdapter.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAelC;;;GAGG;AACH,MAAM,CAAC,MAAM,cAAc,GAAwB,CAAC,0BAA0B,EAAE,8BAA8B,EAAE,UAAU,EAAE,iBAAiB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CallState, DeviceManagerState } from '@internal/calling-stateful-client';\nimport type { AudioDeviceInfo, VideoDeviceInfo, Call, PermissionConstraints, RemoteParticipant, StartCallOptions, MediaDiagnosticChangedEventArgs, NetworkDiagnosticChangedEventArgs, PropertyChangedEvent } from '@azure/communication-calling';\nimport { CreateVideoStreamViewResult, VideoStreamOptions } from '@internal/react-components';\nimport type { CommunicationIdentifierKind } from '@azure/communication-common';\nimport type { AdapterState, Disposable, AdapterError, AdapterErrors } from '../../common/adapters';\n\n/**\n * Major UI screens shown in the {@link CallComposite}.\n *\n * @public\n */\nexport type CallCompositePage = 'accessDeniedTeamsMeeting' | 'call' | 'configuration' | 'joinCallFailedDueToNoNetwork' | 'leftCall' | 'lobby' | 'removedFromCall';\n\n/**\n * Subset of CallCompositePages that represent an end call state.\n * @private\n */\nexport const END_CALL_PAGES: CallCompositePage[] = ['accessDeniedTeamsMeeting', 'joinCallFailedDueToNoNetwork', 'leftCall', 'removedFromCall'];\n\n/**\n * {@link CommonCallAdapter} state for pure UI purposes.\n *\n * @public\n */\nexport type CallAdapterUiState = {\n  isLocalPreviewMicrophoneEnabled: boolean;\n  page: CallCompositePage;\n};\n\n/**\n * {@link CommonCallAdapter} state inferred from Azure Communication Services backend.\n *\n * @public\n */\nexport type CallAdapterClientState = {\n  userId: CommunicationIdentifierKind;\n  displayName?: string;\n  call?: CallState;\n  devices: DeviceManagerState;\n  endedCall?: CallState;\n  isTeamsCall: boolean;\n  /**\n   * Latest error encountered for each operation performed via the adapter.\n   */\n  latestErrors: AdapterErrors;\n};\n\n/**\n * {@link CommonCallAdapter} state.\n *\n * @public\n */\nexport type CallAdapterState = CallAdapterUiState & CallAdapterClientState;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'participantsJoined' event.\n *\n * @public\n */\nexport type ParticipantsJoinedListener = (event: {\n  joined: RemoteParticipant[];\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'participantsLeft' event.\n *\n * @public\n */\nexport type ParticipantsLeftListener = (event: {\n  removed: RemoteParticipant[];\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'isMuted' event.\n *\n * @public\n */\nexport type IsMutedChangedListener = (event: {\n  identifier: CommunicationIdentifierKind;\n  isMuted: boolean;\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'callIdChanged' event.\n *\n * @public\n */\nexport type CallIdChangedListener = (event: {\n  callId: string;\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'isLocalScreenSharingActiveChanged' event.\n *\n * @public\n */\nexport type IsLocalScreenSharingActiveChangedListener = (event: {\n  isScreenSharingOn: boolean;\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'isSpeakingChanged' event.\n *\n * @public\n */\nexport type IsSpeakingChangedListener = (event: {\n  identifier: CommunicationIdentifierKind;\n  isSpeaking: boolean;\n}) => void;\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'displayNameChanged' event.\n *\n * @public\n */\nexport type DisplayNameChangedListener = (event: {\n  participantId: CommunicationIdentifierKind;\n  displayName: string;\n}) => void;\n\n/**\n * Payload for {@link CallEndedListener} containing details on the ended call.\n *\n * @public\n */\nexport type CallAdapterCallEndedEvent = {\n  callId: string;\n};\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'callEnded' event.\n *\n * @public\n */\nexport type CallEndedListener = (event: CallAdapterCallEndedEvent) => void;\n\n/**\n * Payload for {@link DiagnosticChangedEventListner} where there is a change in a media diagnostic.\n *\n * @public\n */\nexport type MediaDiagnosticChangedEvent = MediaDiagnosticChangedEventArgs & {\n  type: 'media';\n};\n\n/**\n * Payload for {@link DiagnosticChangedEventListner} where there is a change in a network diagnostic.\n *\n * @public\n */\nexport type NetworkDiagnosticChangedEvent = NetworkDiagnosticChangedEventArgs & {\n  type: 'network';\n};\n\n/**\n * Callback for {@link CallAdapterSubscribers} 'diagnosticChanged' event.\n *\n * @public\n */\nexport type DiagnosticChangedEventListner = (event: MediaDiagnosticChangedEvent | NetworkDiagnosticChangedEvent) => void;\n\n/**\n * Functionality for managing the current call.\n *\n * @public\n */\nexport interface CallAdapterCallOperations {\n  /**\n   * Leave the call\n   *\n   * @param forEveryone - Whether to remove all participants when leaving\n   *\n   * @public\n   */\n  leaveCall(forEveryone?: boolean): Promise<void>;\n  /**\n   * Start the camera\n   * This method will start rendering a local camera view when the call is not active\n   *\n   * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  startCamera(options?: VideoStreamOptions): Promise<void>;\n  /**\n   * Stop the camera\n   * This method will stop rendering a local camera view when the call is not active\n   *\n   * @public\n   */\n  stopCamera(): Promise<void>;\n  /**\n   * Mute the current user during the call or disable microphone locally\n   *\n   * @public\n   */\n  mute(): Promise<void>;\n  /**\n   * Unmute the current user during the call or enable microphone locally\n   *\n   * @public\n   */\n  unmute(): Promise<void>;\n  /**\n   * Start sharing the screen during a call.\n   *\n   * @public\n   */\n  startScreenShare(): Promise<void>;\n  /**\n   * Stop sharing the screen\n   *\n   * @public\n   */\n  stopScreenShare(): Promise<void>;\n  /**\n   * Remove a participant from the call.\n   *\n   * @param userId - Id of the participant to be removed\n   *\n   * @public\n   */\n  removeParticipant(userId: string): Promise<void>;\n  /**\n   * Create the html view for a stream.\n   *\n   * @remarks\n   * This method is implemented for composite\n   *\n   * @param remoteUserId - Id of the participant to render, leave it undefined to create the local camera view\n   * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  createStreamView(remoteUserId?: string, options?: VideoStreamOptions): Promise<void | CreateVideoStreamViewResult>;\n  /**\n   * Dispose the html view for a stream.\n   *\n   * @remarks\n   * This method is implemented for composite\n   *\n   * @param remoteUserId - Id of the participant to render, leave it undefined to dispose the local camera view\n   * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  disposeStreamView(remoteUserId?: string, options?: VideoStreamOptions): Promise<void>;\n}\n\n/**\n * Functionality for managing devices within a call.\n *\n * @public\n */\nexport interface CallAdapterDeviceManagement {\n  /**\n   * Ask for permissions of devices.\n   *\n   * @remarks\n   * Browser permission window will pop up if permissions are not granted yet\n   *\n   * @param constrain - Define constraints for accessing local devices {@link @azure/communication-calling#PermissionConstraints }\n   *\n   * @public\n   */\n  askDevicePermission(constrain: PermissionConstraints): Promise<void>;\n  /**\n   * Query for available camera devices.\n   *\n   * @remarks\n   * This method should be called after askDevicePermission()\n   *\n   * @return An array of video device information entities {@link @azure/communication-calling#VideoDeviceInfo }\n   *\n   * @public\n   */\n  queryCameras(): Promise<VideoDeviceInfo[]>;\n  /**\n   * Query for available microphone devices.\n   *\n   * @remarks\n   * This method should be called after askDevicePermission()\n   *\n   * @return An array of audio device information entities {@link @azure/communication-calling#AudioDeviceInfo }\n   *\n   * @public\n   */\n  queryMicrophones(): Promise<AudioDeviceInfo[]>;\n  /**\n   * Query for available microphone devices.\n   *\n   * @remarks\n   * This method should be called after askDevicePermission()\n   *\n   * @return An array of audio device information entities {@link @azure/communication-calling#AudioDeviceInfo }\n   *\n   * @public\n   */\n  querySpeakers(): Promise<AudioDeviceInfo[]>;\n  /**\n   * Set the camera to use in the call.\n   *\n   * @param sourceInfo - Camera device to choose, pick one returned by  {@link CallAdapterDeviceManagement#queryCameras }\n   * @param options - Options to control how the camera stream is rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  setCamera(sourceInfo: VideoDeviceInfo, options?: VideoStreamOptions): Promise<void>;\n  /**\n   * Set the microphone to use in the call.\n   *\n   * @param sourceInfo - Microphone device to choose, pick one returned by {@link CallAdapterDeviceManagement#queryMicrophones }\n   *\n   * @public\n   */\n  setMicrophone(sourceInfo: AudioDeviceInfo): Promise<void>;\n  /**\n   * Set the speaker to use in the call.\n   *\n   * @param sourceInfo - Speaker device to choose, pick one returned by {@link CallAdapterDeviceManagement#querySpeakers }\n   *\n   * @public\n   */\n  setSpeaker(sourceInfo: AudioDeviceInfo): Promise<void>;\n}\n\n/**\n * Call composite events that can be subscribed to.\n *\n * @public\n */\nexport interface CallAdapterSubscribers {\n  /**\n   * Subscribe function for 'participantsJoined' event.\n   */\n  on(event: 'participantsJoined', listener: ParticipantsJoinedListener): void;\n  /**\n   * Subscribe function for 'participantsLeft' event.\n   */\n  on(event: 'participantsLeft', listener: ParticipantsLeftListener): void;\n  /**\n   * Subscribe function for 'isMutedChanged' event.\n   *\n   * @remarks\n   * The event will be triggered whenever current user or remote user mute state changed\n   *\n   */\n  on(event: 'isMutedChanged', listener: IsMutedChangedListener): void;\n  /**\n   * Subscribe function for 'callIdChanged' event.\n   *\n   * @remarks\n   * The event will be triggered when callId of current user changed.\n   *\n   */\n  on(event: 'callIdChanged', listener: CallIdChangedListener): void;\n  /**\n   * Subscribe function for 'isLocalScreenSharingActiveChanged' event.\n   */\n  on(event: 'isLocalScreenSharingActiveChanged', listener: IsLocalScreenSharingActiveChangedListener): void;\n  /**\n   * Subscribe function for 'displayNameChanged' event.\n   */\n  on(event: 'displayNameChanged', listener: DisplayNameChangedListener): void;\n  /**\n   * Subscribe function for 'isSpeakingChanged' event.\n   */\n  on(event: 'isSpeakingChanged', listener: IsSpeakingChangedListener): void;\n  /**\n   * Subscribe function for 'callEnded' event.\n   */\n  on(event: 'callEnded', listener: CallEndedListener): void;\n  /**\n   * Subscribe function for 'diagnosticChanged' event.\n   *\n   * This event fires whenever there is a change in user facing diagnostics about the ongoing call.\n   */\n  on(event: 'diagnosticChanged', listener: DiagnosticChangedEventListner): void;\n  /**\n   * Subscribe function for 'selectedMicrophoneChanged' event.\n   *\n   * This event fires whenever the user selects a new microphone device.\n   */\n  on(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;\n  /**\n   * Subscribe function for 'selectedSpeakerChanged' event.\n   *\n   * This event fires whenever the user selects a new speaker device.\n   */\n  on(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;\n  /**\n   * Subscribe function for 'error' event.\n   */\n  on(event: 'error', listener: (e: AdapterError) => void): void;\n\n  /**\n   * Unsubscribe function for 'participantsJoined' event.\n   */\n  off(event: 'participantsJoined', listener: ParticipantsJoinedListener): void;\n  /**\n   * Unsubscribe function for 'participantsLeft' event.\n   */\n  off(event: 'participantsLeft', listener: ParticipantsLeftListener): void;\n  /**\n   * Unsubscribe function for 'isMutedChanged' event.\n   */\n  off(event: 'isMutedChanged', listener: IsMutedChangedListener): void;\n  /**\n   * Unsubscribe function for 'callIdChanged' event.\n   */\n  off(event: 'callIdChanged', listener: CallIdChangedListener): void;\n  /**\n   * Unsubscribe function for 'isLocalScreenSharingActiveChanged' event.\n   */\n  off(event: 'isLocalScreenSharingActiveChanged', listener: IsLocalScreenSharingActiveChangedListener): void;\n  /**\n   * Unsubscribe function for 'displayNameChanged' event.\n   */\n  off(event: 'displayNameChanged', listener: DisplayNameChangedListener): void;\n  /**\n   * Unsubscribe function for 'isSpeakingChanged' event.\n   */\n  off(event: 'isSpeakingChanged', listener: IsSpeakingChangedListener): void;\n  /**\n   * Unsubscribe function for 'callEnded' event.\n   */\n  off(event: 'callEnded', listener: CallEndedListener): void;\n  /**\n   * Unsubscribe function for 'diagnosticChanged' event.\n   */\n  off(event: 'diagnosticChanged', listener: DiagnosticChangedEventListner): void;\n  /**\n   * Unsubscribe function for 'selectedMicrophoneChanged' event.\n   */\n  off(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;\n  /**\n   * Unsubscribe function for 'selectedSpeakerChanged' event.\n   */\n  off(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;\n  /**\n   * Unsubscribe function for 'error' event.\n   */\n  off(event: 'error', listener: (e: AdapterError) => void): void;\n}\n\n// This type remains for non-breaking change reason\n/**\n * Functionality for managing the current call or start a new call\n * @deprecated CallAdapter interface will be flatten, consider using CallAdapter directly\n * @public\n */\nexport interface CallAdapterCallManagement extends CallAdapterCallOperations {\n  /**\n   * Join the call with microphone initially on/off.\n   *\n   * @param microphoneOn - Whether microphone is initially enabled\n   *\n   * @public\n   */\n  joinCall(microphoneOn?: boolean): Call | undefined;\n  /**\n   * Start the call.\n   *\n   * @param participants - An array of participant ids to join\n   *\n   * @public\n   */\n  startCall(participants: string[], options?: StartCallOptions): Call | undefined;\n}\n\n// TODO: Flatten the adapter structure\n/**\n * {@link CallComposite} Adapter interface.\n *\n * @public\n */\nexport interface CommonCallAdapter extends AdapterState<CallAdapterState>, Disposable, CallAdapterCallOperations, CallAdapterDeviceManagement, CallAdapterSubscribers {\n  /**\n   * Join the call with microphone initially on/off.\n   *\n   * @param microphoneOn - Whether microphone is initially enabled\n   *\n   * @public\n   */\n  joinCall(microphoneOn?: boolean): void;\n  /**\n   * Start the call.\n   *\n   * @param participants - An array of participant ids to join\n   *\n   * @public\n   */\n  startCall(participants: string[], options?: StartCallOptions): void;\n}\n\n/**\n *  An Adapter interface specific for Azure Communication identity which extends {@link CommonCallAdapter}.\n *\n * @public\n */\nexport interface CallAdapter extends CommonCallAdapter {\n  /**\n   * Join the call with microphone initially on/off.\n   *\n   * @param microphoneOn - Whether microphone is initially enabled\n   *\n   * @public\n   */\n  joinCall(microphoneOn?: boolean): Call | undefined;\n  /**\n   * Start the call.\n   *\n   * @param participants - An array of participant ids to join\n   *\n   * @public\n   */\n  startCall(participants: string[], options?: StartCallOptions): Call | undefined;\n}\"../../../../../calling-stateful-client/src\"\"../../../../../react-components/src\""]}