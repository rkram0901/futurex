// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { _isPreviewOn } from "../../../../../calling-component-bindings/src";
/**
 * @private
 */
export const getDisplayName = (state) => state.displayName;
/**
 * @private
 */
export const getCallId = (state) => { var _a; return (_a = state.call) === null || _a === void 0 ? void 0 : _a.id; };
/**
 * @private
 */
export const getEndedCall = (state) => state.endedCall;
/**
 * @private
 */
export const getCallStatus = (state) => { var _a, _b; return (_b = (_a = state.call) === null || _a === void 0 ? void 0 : _a.state) !== null && _b !== void 0 ? _b : 'None'; };
/**
 * @private
 */
export const getDeviceManager = (state) => state.devices;
/**
 * @private
 */
export const getIsScreenShareOn = (state) => { var _a, _b; return (_b = (_a = state.call) === null || _a === void 0 ? void 0 : _a.isScreenSharingOn) !== null && _b !== void 0 ? _b : false; };
/**
 * @private
 */
export const getIsPreviewCameraOn = (state) => _isPreviewOn(state.devices);
/**
 * @private
 */
export const getPage = (state) => state.page;
/**
 * @private
 */
export const getLocalMicrophoneEnabled = (state) => state.isLocalPreviewMicrophoneEnabled;
/**
 * @private
 */
export const getLocalVideoStreams = (state) => { var _a; return (_a = state.call) === null || _a === void 0 ? void 0 : _a.localVideoStreams; };
/**
 * @private
 */
export const getIsTranscriptionActive = (state) => { var _a; return !!((_a = state.call) === null || _a === void 0 ? void 0 : _a.transcription.isTranscriptionActive); };
/**
 * @private
 */
export const getIsRecordingActive = (state) => { var _a; return !!((_a = state.call) === null || _a === void 0 ? void 0 : _a.recording.isRecordingActive); };
/**
 * @private
 */
export const getUserFacingDiagnostics = (state) => { var _a; return (_a = state.call) === null || _a === void 0 ? void 0 : _a.diagnostics; };
/**
 * @private
 */
export const getDominantSpeakerInfo = (state) => { var _a; return (_a = state.call) === null || _a === void 0 ? void 0 : _a.dominantSpeakers; };
/**
 * @private
 */
export const getRemoteParticipants = (state) => { var _a; return (_a = state.call) === null || _a === void 0 ? void 0 : _a.remoteParticipants; };
//# sourceMappingURL=baseSelectors.js.map