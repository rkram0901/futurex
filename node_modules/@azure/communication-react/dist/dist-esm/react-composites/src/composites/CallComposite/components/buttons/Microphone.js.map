{"version":3,"file":"Microphone.js","sourceRoot":"","sources":["../../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/components/buttons/Microphone.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,sBAAsB,EAAE,yDAA6C;AAC9E,OAAO,EAA0B,gBAAgB,EAAE,+CAAmC;AACtF,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,aAAa,EAAE,yBAAyB,EAAE,MAAM,+BAA+B,CAAC;AAEzF,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AAErE;;GAEG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAK1B,EAAe,EAAE;IAChB,MAAM,qBAAqB,GAAG,WAAW,CAAC,gBAAgB,CAAC,CAAC;IAC5D,MAAM,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC,CAAC;IAC9C,MAAM,wBAAwB,GAAG,WAAW,CAAC,yBAAyB,CAAC,CAAC;IACxE,MAAM,OAAO,GAAG,SAAS,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;IAEzC;;;OAGG;IACH,IAAI,sBAAsB,CAAC,UAAU,CAAC,EAAE;QACtC,qBAAqB,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtC,+FAA+F;QAC/F,mDAAmD;QACnD,qBAAqB,CAAC,OAAO,GAAG,wBAAwB,CAAC;KAC1D;IACD,MAAM,uBAAuB,GAAG,sBAAsB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACnE,OAAO,EAAE;YACP,iBAAiB,EAAE,OAAO,CAAC,iCAAiC;YAC5D,gBAAgB,EAAE,OAAO,CAAC,iCAAiC;SAC5D;KACF,CAAC,CAAC,CAAC,EAAE,CAAC;IACP,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,WAAC,OAAA,sBAAsB,CAAC,MAAA,KAAK,CAAC,MAAM,mCAAI,EAAE,CAAC,CAAA,EAAA,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAEzF,6CAA6C;IAC7C,OAAO,oBAAC,gBAAgB,gCAAY,kCAAkC,IAAK,qBAAqB,IAAE,SAAS,EAAE,KAAK,CAAC,WAAW,KAAK,SAAS,EAAE,MAAM,EAAE,MAAM,IAAM,uBAAuB,IAAE,yBAAyB,EAAE,KAAK,CAAC,8BAA8B,EAAE,QAAQ,EAAE,qBAAqB,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,IAAI,CAAC;AAC7T,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { _isInLobbyOrConnecting } from '@internal/calling-component-bindings';\nimport { ControlBarButtonStyles, MicrophoneButton } from '@internal/react-components';\nimport React, { useMemo } from 'react';\nimport { useLocale } from '../../../localization';\nimport { usePropsFor } from '../../hooks/usePropsFor';\nimport { useSelector } from '../../hooks/useSelector';\nimport { getCallStatus, getLocalMicrophoneEnabled } from '../../selectors/baseSelectors';\nimport { CallControlDisplayType } from '../../types/CallControlOptions';\nimport { concatButtonBaseStyles } from '../../styles/Buttons.styles';\n\n/**\n * @private\n */\nexport const Microphone = (props: {\n  displayType?: CallControlDisplayType;\n  styles?: ControlBarButtonStyles;\n  splitButtonsForDeviceSelection?: boolean;\n  disabled?: boolean;\n}): JSX.Element => {\n  const microphoneButtonProps = usePropsFor(MicrophoneButton);\n  const callStatus = useSelector(getCallStatus);\n  const isLocalMicrophoneEnabled = useSelector(getLocalMicrophoneEnabled);\n  const strings = useLocale().strings.call;\n\n  /**\n   * When call is in Lobby, microphone button should be disabled.\n   * This is due to to headless limitation where a call can not be muted/unmuted in lobby.\n   */\n  if (_isInLobbyOrConnecting(callStatus)) {\n    microphoneButtonProps.disabled = true;\n    // Lobby page should show the microphone status that was set on the local preview/configuration\n    // page until the user successfully joins the call.\n    microphoneButtonProps.checked = isLocalMicrophoneEnabled;\n  }\n  const microphoneButtonStrings = _isInLobbyOrConnecting(callStatus) ? {\n    strings: {\n      tooltipOffContent: strings.microphoneToggleInLobbyNotAllowed,\n      tooltipOnContent: strings.microphoneToggleInLobbyNotAllowed\n    }\n  } : {};\n  const styles = useMemo(() => concatButtonBaseStyles(props.styles ?? {}), [props.styles]);\n\n  // tab focus on MicrophoneButton on page load\n  return <MicrophoneButton data-ui-id=\"call-composite-microphone-button\" {...microphoneButtonProps} showLabel={props.displayType !== 'compact'} styles={styles} {...microphoneButtonStrings} enableDeviceSelectionMenu={props.splitButtonsForDeviceSelection} disabled={microphoneButtonProps.disabled || props.disabled} />;\n};\"../../../../../../calling-component-bindings/src\"\"../../../../../../react-components/src\""]}