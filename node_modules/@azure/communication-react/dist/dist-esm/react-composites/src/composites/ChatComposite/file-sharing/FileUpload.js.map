{"version":3,"file":"FileUpload.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/ChatComposite/file-sharing/FileUpload.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,EAAE,oBAAoB,EAAE,yCAAgC;AA6E/D;;;;GAIG;AACH,MAAM,OAAO,UAAU;IAYrB,YAAY,IAAyB;QACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;QACpD,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC;QACnB,IAAI,IAAI,YAAY,IAAI,EAAE;YACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SAClB;aAAM;YACL,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACtB;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;IAC5B,CAAC;IACD,2BAA2B,CAAC,KAAa;QACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IAC7D,CAAC;IACD,qBAAqB,CAAC,QAAsB;QAC1C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC1D,CAAC;IACD,kBAAkB,CAAC,OAAe;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAID;;;;OAIG;IACH,EAAE,CAAC,KAAuB,EAAE,QAAiC;QAC3D,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAID;;;;OAIG;IACH,GAAG,CAAC,KAAuB,EAAE,QAAiC;QAC5D,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { EventEmitter } from 'events';\nimport { nanoid } from 'nanoid';\nimport { _MAX_EVENT_LISTENERS } from '@internal/acs-ui-common';\nimport { FileMetadata } from '@internal/react-components';\n\n/**\n * Contains the state attibutes of a file upload like name, progress etc.\n * @beta\n */\nexport interface FileUploadState {\n  /**\n   * Unique identifier for the file upload.\n   */\n  id: string;\n\n  /**\n   * Filename extracted from the {@link File} object.\n   * This attribute is used to render the filename if `metadata.name` is not available.\n   */\n  filename: string;\n\n  /**\n   * A number between 0 and 1 indicating the progress of the upload.\n   */\n  progress: number;\n\n  /**\n   * Meta Data {@link FileMetadata} containing information about the uploaded file.\n   */\n  metadata?: FileMetadata;\n\n  /**\n   * Error message to be displayed to the user if the upload fails.\n   */\n  error?: FileUploadError;\n}\n\n/**\n * @beta\n * Error message to be displayed to the user if the upload fails.\n */\nexport type FileUploadError = {\n  message: string;\n  timestamp: number;\n};\n\n/**\n * A wrapper object for a file that is being uploaded.\n * Allows mmanaging file uploads by providing common functions for updating the\n * upload progress, canceling an upload, completing an upload etc.\n * @beta\n */\nexport interface FileUploadManager {\n  /**\n   * Unique identifier for the file upload.\n   */\n  id: string;\n  /**\n   * HTML {@link File} object for the uploaded file.\n   */\n  file?: File;\n  /**\n   * Update the progress of the upload.\n   * @param value - number between 0 and 1\n   */\n  notifyUploadProgressChanged: (value: number) => void;\n  /**\n   * Mark the upload as complete.\n   * Requires the `metadata` param containing uploaded file information.\n   * @param metadata - {@link FileMetadata}\n   */\n  notifyUploadCompleted: (metadata: FileMetadata) => void;\n  /**\n   * Mark the upload as failed.\n   * @param message - An error message that can be displayed to the user.\n   */\n  notifyUploadFailed: (message: string) => void;\n}\n\n/**\n * A wrapper object for a file that is being uploaded.\n * Provides common functions for updating the upload progress, canceling an upload etc.\n * @private\n */\nexport class FileUpload implements FileUploadManager, FileUploadEventEmitter {\n  private _emitter: EventEmitter;\n  public readonly id: string;\n  public readonly file?: File;\n  /**\n   * Filename to be displayed in the UI during file upload.\n   */\n  public readonly fileName: string;\n  /**\n   * Optional object of type {@link FileMetadata}\n   */\n  public metadata?: FileMetadata;\n  constructor(data: File | FileMetadata) {\n    this._emitter = new EventEmitter();\n    this._emitter.setMaxListeners(_MAX_EVENT_LISTENERS);\n    this.id = nanoid();\n    if (data instanceof File) {\n      this.file = data;\n    } else {\n      this.metadata = data;\n    }\n    this.fileName = data.name;\n  }\n  notifyUploadProgressChanged(value: number): void {\n    this._emitter.emit('uploadProgressChange', this.id, value);\n  }\n  notifyUploadCompleted(metadata: FileMetadata): void {\n    this._emitter.emit('uploadComplete', this.id, metadata);\n  }\n  notifyUploadFailed(message: string): void {\n    this._emitter.emit('uploadFail', this.id, message);\n  }\n  on(event: 'uploadProgressChange', listener: UploadProgressListener): void;\n  on(event: 'uploadComplete', listener: UploadCompleteListener): void;\n  on(event: 'uploadFail', listener: UploadFailedListener): void;\n  /**\n   * File upload event subscriber.\n   * @param event - {@link FileUploadEvents}\n   * @param listener - {@link FileUploadEventListener}\n   */\n  on(event: FileUploadEvents, listener: FileUploadEventListener): void {\n    this._emitter.addListener(event, listener);\n  }\n  off(event: 'uploadProgressChange', listener: UploadProgressListener): void;\n  off(event: 'uploadComplete', listener: UploadCompleteListener): void;\n  off(event: 'uploadFail', listener: UploadFailedListener): void;\n  /**\n   * File upload event unsubscriber.\n   * @param event - {@link FileUploadEvents}\n   * @param listener - {@link FileUploadEventListener}\n   */\n  off(event: FileUploadEvents, listener: FileUploadEventListener): void {\n    this._emitter.removeListener(event, listener);\n  }\n}\n\n/**\n * Events emitted by the FileUpload class.\n * @beta\n */\ntype FileUploadEvents = 'uploadProgressChange' | 'uploadComplete' | 'uploadFail';\n\n/**\n * Events listeners supported by the FileUpload class.\n * @beta\n */\ntype FileUploadEventListener = UploadProgressListener | UploadCompleteListener | UploadFailedListener;\n\n/**\n * Listener for `uploadProgressed` event.\n * @beta\n */\ntype UploadProgressListener = (id: string, value: number) => void;\n/**\n * Listener for `uploadComplete` event.\n * @beta\n */\ntype UploadCompleteListener = (id: string, metadata: FileMetadata) => void;\n/**\n * Listener for `uploadFailed` event.\n * @beta\n */\ntype UploadFailedListener = (id: string, message: string) => void;\n\n/**\n * @beta\n */\ninterface FileUploadEventEmitter {\n  /**\n   * Subscriber function for `uploadProgressed` event.\n   */\n  on(event: 'uploadProgressChange', listener: UploadProgressListener): void;\n  /**\n   * Subscriber function for `uploadComplete` event.\n   */\n  on(event: 'uploadComplete', listener: UploadCompleteListener): void;\n  /**\n   * Subscriber function for `uploadFailed` event.\n   */\n  on(event: 'uploadFail', listener: UploadFailedListener): void;\n\n  /**\n   * Unsubscriber function for `uploadProgressed` event.\n   */\n  off(event: 'uploadProgressChange', listener: UploadProgressListener): void;\n  /**\n   * Unsubscriber function for `uploadComplete` event.\n   */\n  off(event: 'uploadComplete', listener: UploadCompleteListener): void;\n  /**\n   * Unsubscriber function for `uploadFailed` event.\n   */\n  off(event: 'uploadFail', listener: UploadFailedListener): void;\n}\"../../../../../acs-ui-common/src\"\"../../../../../react-components/src\""]}