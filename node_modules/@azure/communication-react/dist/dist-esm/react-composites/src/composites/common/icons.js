// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { CallEnd20Filled, CallMissed20Filled, CameraSwitch24Regular, Chat20Filled, Chat20Regular, Info20Filled, MicOff20Filled, MicOn20Filled, MicOn20Regular, People20Regular, PersonDelete20Filled, Speaker220Filled, Speaker220Regular, Video20Filled, VideoOff20Filled, WifiWarning20Filled } from '@fluentui/react-icons';
import { DEFAULT_COMPONENT_ICONS } from "../../../../react-components/src";
import React from 'react';
// eslint-disable-next-line no-restricted-imports
import { FontIcon, mergeStyles, Text } from '@fluentui/react';
const CoffeeIcon = () => React.createElement(Text, { className: mergeStyles(coffeeIconStyle), "aria-hidden": true }, "\u2615");
const coffeeIconStyle = {
    // Fluent wraps all icons with <i> so we must force the fontStyle back to normal.
    fontStyle: 'normal',
    // By default our icons are 20px x 20px (for 1rem = 16px), make this a bit bigger for lobby.
    fontSize: '2rem'
};
/**
 * The default set of icons used by the composites directly (i.e. not via the components defined in this library).
 *
 * @public
 */
export const COMPOSITE_ONLY_ICONS = {
    ChevronLeft: undefined,
    Link: undefined,
    LobbyScreenConnectingToCall: React.createElement(CoffeeIcon, null),
    LobbyScreenWaitingToBeAdmitted: React.createElement(CoffeeIcon, null),
    LocalDeviceSettingsCamera: React.createElement(Video20Filled, null),
    LocalDeviceSettingsMic: React.createElement(MicOn20Filled, null),
    LocalDeviceSettingsSpeaker: React.createElement(Speaker220Filled, null),
    LocalPreviewPlaceholder: React.createElement(VideoOff20Filled, null),
    LocalCameraSwitch: React.createElement(CameraSwitch24Regular, null),
    ControlBarChatButtonActive: React.createElement(Chat20Filled, null),
    ControlBarChatButtonInactive: React.createElement(Chat20Regular, null),
    ControlBarPeopleButton: React.createElement(People20Regular, null),
    MoreDrawerMicrophones: React.createElement(MicOn20Regular, null),
    MoreDrawerPeople: React.createElement(People20Regular, null),
    MoreDrawerSpeakers: React.createElement(Speaker220Regular, null),
    MoreDrawerSelectedMicrophone: React.createElement(MicOn20Filled, null),
    MoreDrawerSelectedSpeaker: React.createElement(Speaker220Filled, null),
    Muted: React.createElement(MicOff20Filled, null),
    NetworkReconnectIcon: React.createElement(CallMissed20Filled, null),
    NoticePageAccessDeniedTeamsMeeting: React.createElement(PersonDelete20Filled, null),
    NoticePageJoinCallFailedDueToNoNetwork: React.createElement(WifiWarning20Filled, null),
    NoticePageLeftCall: React.createElement(CallEnd20Filled, null),
    NoticePageRemovedFromCall: React.createElement(Info20Filled, null)
};
/**
 * The default set of icons that are available to used in the Composites.
 *
 * @public
 */
export const DEFAULT_COMPOSITE_ICONS = Object.assign(Object.assign({}, DEFAULT_COMPONENT_ICONS), COMPOSITE_ONLY_ICONS);
/**
 * Icon wrapper to use when including customizable icons inside the ChatComposite.
 * This wrapper ensures the icon name is being type-checked helping ensure no typos
 * and ensure that icon is customizable through the composite API.
 *
 * @private
 */
export const ChatCompositeIcon = (props) => React.createElement(FontIcon, Object.assign({}, props));
/**
 * Icon wrapper to use when including customizable icons inside the CallComposite.
 * This wrapper ensures the icon name is being type-checked helping ensure no typos
 * and ensure that icon is customizable through the composite API.
 *
 * @private
 */
export const CallCompositeIcon = (props) => React.createElement(FontIcon, Object.assign({}, props));
/**
 * Icon wrapper to use when including customizable icons inside the CallWithChatComposite.
 * This wrapper ensures the icon name is being type-checked helping ensure no typos
 * and ensure that icon is customizable through the composite API.
 *
 * @private
 */
export const CallWithChatCompositeIcon = (props) => React.createElement(FontIcon, Object.assign({}, props));
//# sourceMappingURL=icons.js.map