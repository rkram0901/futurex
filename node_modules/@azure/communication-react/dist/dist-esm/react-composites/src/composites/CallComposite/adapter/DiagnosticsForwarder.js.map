{"version":3,"file":"DiagnosticsForwarder.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/adapter/DiagnosticsForwarder.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAgC,QAAQ,EAAsE,MAAM,8BAA8B,CAAC;AAK1J;;GAEG;AACH,MAAM,OAAO,oBAAoB;IAG/B,YAAY,OAAqB,EAAE,IAAgB;QAK5C,gBAAW,GAAG,GAAS,EAAE;YAC9B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9F,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC;QAPA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAKO,SAAS;QACf,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7F,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,mBAAmB,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3F,CAAC;IACO,yBAAyB,CAAC,IAAuC;QACvE,MAAM,KAAK,mBACT,IAAI,EAAE,SAAS,IACZ,IAAI,CACR,CAAC;QACF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;IACO,uBAAuB,CAAC,IAAqC;QACnE,MAAM,KAAK,mBACT,IAAI,EAAE,OAAO,IACV,IAAI,CACR,CAAC;QACF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { UserFacingDiagnosticsFeature, Features, MediaDiagnosticChangedEventArgs, NetworkDiagnosticChangedEventArgs } from '@azure/communication-calling';\nimport { CallCommon } from '@internal/calling-stateful-client';\nimport { EventEmitter } from 'events';\nimport { MediaDiagnosticChangedEvent, NetworkDiagnosticChangedEvent } from './CallAdapter';\n\n/**\n * @private\n */\nexport class DiagnosticsForwarder {\n  private _diagnostics: UserFacingDiagnosticsFeature;\n  private _emitter: EventEmitter;\n  constructor(emitter: EventEmitter, call: CallCommon) {\n    this._diagnostics = call.feature(Features.UserFacingDiagnostics);\n    this._emitter = emitter;\n    this.subscribe();\n  }\n  public unsubscribe = (): void => {\n    this._diagnostics.network.off('diagnosticChanged', this.networkDiagnosticsChanged.bind(this));\n    this._diagnostics.media.off('diagnosticChanged', this.mediaDiagnosticsChanged.bind(this));\n  };\n  private subscribe(): void {\n    this._diagnostics.network.on('diagnosticChanged', this.networkDiagnosticsChanged.bind(this));\n    this._diagnostics.media.on('diagnosticChanged', this.mediaDiagnosticsChanged.bind(this));\n  }\n  private networkDiagnosticsChanged(args: NetworkDiagnosticChangedEventArgs): void {\n    const event: NetworkDiagnosticChangedEvent = {\n      type: 'network',\n      ...args\n    };\n    this._emitter.emit('diagnosticChanged', event);\n  }\n  private mediaDiagnosticsChanged(args: MediaDiagnosticChangedEventArgs): void {\n    const event: MediaDiagnosticChangedEvent = {\n      type: 'media',\n      ...args\n    };\n    this._emitter.emit('diagnosticChanged', event);\n  }\n}\"../../../../../calling-stateful-client/src\""]}