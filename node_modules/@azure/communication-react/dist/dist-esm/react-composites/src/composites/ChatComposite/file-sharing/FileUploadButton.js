// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { IconButton, mergeStyles, Stack, useTheme } from '@fluentui/react';
import React from 'react';
import { ChatCompositeIcon } from '../../common/icons';
/**
 * @internal
 */
export const FileUploadButton = (props) => {
    const inputRef = React.useRef(null);
    const theme = useTheme();
    const { accept, multiple = false, onChange } = props;
    const fileUploadButtonClassName = mergeStyles({
        width: '1.5rem',
        height: '1.5rem',
        cursor: 'pointer',
        padding: '0.15rem',
        ':hover': {
            backgroundColor: theme.palette.neutralLighter
        }
    });
    const iconButtonClassName = mergeStyles({
        color: 'unset',
        width: '1.5rem',
        height: '1.5rem',
        ':hover': {
            color: 'unset',
            background: 'transparent'
        }
    });
    return React.createElement(React.Fragment, null,
        React.createElement(Stack, { verticalAlign: "center", horizontalAlign: "center", className: fileUploadButtonClassName, onClick: () => {
                var _a;
                (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.click();
            } },
            React.createElement(IconButton, { className: iconButtonClassName, ariaLabel: uploadFileButtonStringTrampoline() },
                React.createElement(SendBoxAttachFileIconTrampoline, null))),
        React.createElement("input", { ref: inputRef, hidden: true, multiple: multiple, accept: accept, type: "file", onClick: e => {
                // To ensure that `onChange` is fired even if the same file is picked again.
                e.currentTarget.value = '';
            }, onChange: e => {
                onChange && onChange(e.currentTarget.files);
            } }));
};
const SendBoxAttachFileIconTrampoline = () => {
    // Return _some_ available icon, as the real icon is beta-only.
    return React.createElement(ChatCompositeIcon, { iconName: "EditBoxCancel" });
};
/**
 * A wrapper to return {@link FileUploadButton} component conditionally.
 * It will return `<></>` for stable builds.
 * @internal
 */
export const FileUploadButtonWrapper = (props) => {
    return React.createElement(React.Fragment, null);
};
const uploadFileButtonStringTrampoline = () => {
    return '';
};
//# sourceMappingURL=FileUploadButton.js.map