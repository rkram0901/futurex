import { CommunicationIdentifierKind } from '@azure/communication-common';
import { CallState, DeviceManagerState } from "../../../../../calling-stateful-client/src";
import { ChatThreadClientState } from "../../../../../chat-stateful-client/src";
import { CallAdapter, CallAdapterState, CallCompositePage } from '../../CallComposite';
import { ChatAdapter, ChatAdapterState } from '../../ChatComposite';
import { AdapterErrors } from '../../common/adapters';
/**
 * UI state pertaining to the {@link CallWithChatComposite}.
 *
 * @public
 */
export interface CallWithChatAdapterUiState {
    /**
     * Microphone state before a call has joined.
     *
     * @public
     */
    isLocalPreviewMicrophoneEnabled: boolean;
    /**
     * Current page of the Composite.
     *
     * @public
     */
    page: CallCompositePage;
}
/**
 * State from the backend services that drives {@link CallWithChatComposite}.
 *
 * @public
 */
export interface CallWithChatClientState {
    /** ID of the call participant using this CallWithChatAdapter. */
    userId: CommunicationIdentifierKind;
    /** Display name of the participant using this CallWithChatAdapter. */
    displayName: string | undefined;
    /** State of the current call. */
    call?: CallState;
    /** State of the current chat. */
    chat?: ChatThreadClientState;
    /** Latest call error encountered for each operation performed via the adapter. */
    latestCallErrors: AdapterErrors;
    /** Latest chat error encountered for each operation performed via the adapter. */
    latestChatErrors: AdapterErrors;
    /** State of available and currently selected devices */
    devices: DeviceManagerState;
    /** State of whether the active call is a Teams interop call */
    isTeamsCall: boolean;
}
/**
 * CallWithChat State is a combination of Stateful Chat and Stateful Calling clients with some
 * state specific to the CallWithChat Composite only.
 *
 * @public
 */
export interface CallWithChatAdapterState extends CallWithChatAdapterUiState, CallWithChatClientState {
}
/**
 * @private
 */
export declare function callWithChatAdapterStateFromBackingStates(callAdapter: CallAdapter, chatAdapter: ChatAdapter): CallWithChatAdapterState;
/**
 * @private
 */
export declare function mergeChatAdapterStateIntoCallWithChatAdapterState(existingCallWithChatAdapterState: CallWithChatAdapterState, chatAdapterState: ChatAdapterState): CallWithChatAdapterState;
/**
 * @private
 */
export declare function mergeCallAdapterStateIntoCallWithChatAdapterState(existingCallWithChatAdapterState: CallWithChatAdapterState, callAdapterState: CallAdapterState): CallWithChatAdapterState;
//# sourceMappingURL=CallWithChatAdapterState.d.ts.map