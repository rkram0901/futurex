// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { toFlatCommunicationIdentifier } from "../../../../../acs-ui-common/src";
import memoizeOne from 'memoize-one';
import { useAdapter } from '../adapter/CallAdapterProvider';
import { isCameraOn } from '../utils';
/**
 * @private
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type
export const useHandlers = (_component) => {
    return createCompositeHandlers(useAdapter());
};
const createCompositeHandlers = memoizeOne((adapter) => ({
    onCreateLocalStreamView: (options) => __awaiter(void 0, void 0, void 0, function* () {
        return yield adapter.createStreamView(undefined, options);
    }),
    onCreateRemoteStreamView: (userId, options) => __awaiter(void 0, void 0, void 0, function* () {
        return yield adapter.createStreamView(userId, options);
    }),
    onHangUp: (forEveryone) => __awaiter(void 0, void 0, void 0, function* () {
        yield adapter.leaveCall(forEveryone);
    }),
    onRemoveParticipant: (userId) => __awaiter(void 0, void 0, void 0, function* () {
        yield adapter.removeParticipant(userId);
    }),
    onSelectCamera: (deviceInfo, options) => __awaiter(void 0, void 0, void 0, function* () {
        yield adapter.setCamera(deviceInfo, options);
    }),
    onSelectMicrophone: (deviceInfo) => __awaiter(void 0, void 0, void 0, function* () {
        yield adapter.setMicrophone(deviceInfo);
    }),
    onSelectSpeaker: (deviceInfo) => __awaiter(void 0, void 0, void 0, function* () {
        yield adapter.setSpeaker(deviceInfo);
    }),
    onStartCall: (participants, options) => {
        const rawIds = participants.map(participant => toFlatCommunicationIdentifier(participant));
        return adapter.startCall(rawIds, options);
    },
    onStartScreenShare: () => __awaiter(void 0, void 0, void 0, function* () {
        yield adapter.startScreenShare();
    }),
    onStopScreenShare: () => __awaiter(void 0, void 0, void 0, function* () {
        yield adapter.stopScreenShare();
    }),
    onToggleCamera: (options) => __awaiter(void 0, void 0, void 0, function* () {
        isCameraOn(adapter.getState()) ? yield adapter.stopCamera() : yield adapter.startCamera(options);
    }),
    onToggleMicrophone: () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        return ((_a = adapter.getState().call) === null || _a === void 0 ? void 0 : _a.isMuted) ? yield adapter.unmute() : yield adapter.mute();
    }),
    onToggleScreenShare: () => __awaiter(void 0, void 0, void 0, function* () {
        var _b;
        return ((_b = adapter.getState().call) === null || _b === void 0 ? void 0 : _b.isScreenSharingOn) ? yield adapter.stopScreenShare() : yield adapter.startScreenShare();
    }),
    onStartLocalVideo: () => __awaiter(void 0, void 0, void 0, function* () {
        if (adapter.getState().call) {
            return adapter.startCamera();
        }
    }),
    onDisposeLocalStreamView: () => __awaiter(void 0, void 0, void 0, function* () {
        return adapter.disposeStreamView();
    }),
    onDisposeRemoteStreamView: (userId) => __awaiter(void 0, void 0, void 0, function* () {
        return adapter.disposeStreamView(userId);
    })
}));
//# sourceMappingURL=useHandlers.js.map