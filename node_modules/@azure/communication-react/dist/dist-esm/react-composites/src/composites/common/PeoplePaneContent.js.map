{"version":3,"file":"PeoplePaneContent.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-composites/src/composites/common/PeoplePaneContent.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { IContextualMenuItem, Stack } from '@fluentui/react';\nimport { ParticipantList, ParticipantListParticipant, ParticipantListProps, ParticipantMenuItemsCallback, _DrawerMenuItemProps } from '@internal/react-components';\nimport React, { useMemo } from 'react';\nimport { CallWithChatCompositeStrings } from '../CallWithChatComposite';\nimport { usePropsFor } from '../CallComposite/hooks/usePropsFor';\nimport { AvatarPersonaDataCallback } from '../common/AvatarPersona';\nimport { ParticipantListWithHeading } from '../common/ParticipantContainer';\nimport { peoplePaneContainerTokens } from '../common/styles/ParticipantContainer.styles';\nimport { participantListContainerStyles, peoplePaneContainerStyle } from './styles/PeoplePaneContent.styles';\nimport { convertContextualMenuItemToDrawerMenuItem } from '../CallWithChatComposite/ConvertContextualMenuItemToDrawerMenuItem';\nimport { AddPeopleButton } from './AddPeopleButton';\n/**\n * @private\n */\nexport const PeoplePaneContent = (props: {\n  active: boolean;\n  inviteLink?: string;\n  onRemoveParticipant: (participantId: string) => void;\n  onFetchAvatarPersonaData?: AvatarPersonaDataCallback;\n  onFetchParticipantMenuItems?: ParticipantMenuItemsCallback;\n  strings: CallWithChatCompositeStrings;\n  setDrawerMenuItems: (_DrawerMenuItemProps) => void;\n  mobileView?: boolean;\n}): JSX.Element => {\n  const {\n    inviteLink,\n    onFetchParticipantMenuItems,\n    setDrawerMenuItems,\n    strings,\n    onRemoveParticipant\n  } = props;\n  const participantListDefaultProps = usePropsFor(ParticipantList);\n  const removeButtonAllowed = hasRemoveParticipantsPermissionTrampoline();\n  const setDrawerMenuItemsForParticipant: (participant?: ParticipantListParticipant) => void = useMemo(() => {\n    return (participant?: ParticipantListParticipant) => {\n      if (participant) {\n        let contextualMenuItems: IContextualMenuItem[] = createDefaultContextualMenuItems(participant, strings, removeButtonAllowed && participant.isRemovable ? participantListDefaultProps.onRemoveParticipant : undefined, participantListDefaultProps.myUserId);\n        if (onFetchParticipantMenuItems) {\n          contextualMenuItems = onFetchParticipantMenuItems(participant.userId, participantListDefaultProps.myUserId, contextualMenuItems);\n        }\n        const drawerMenuItems = contextualMenuItems.map((contextualMenu: IContextualMenuItem) => convertContextualMenuItemToDrawerMenuItem(contextualMenu, () => setDrawerMenuItems([])));\n        setDrawerMenuItems(drawerMenuItems);\n      }\n    };\n  }, [strings, participantListDefaultProps.onRemoveParticipant, participantListDefaultProps.myUserId, removeButtonAllowed, onFetchParticipantMenuItems, setDrawerMenuItems]);\n  const participantListProps: ParticipantListProps = useMemo(() => {\n    const onRemoveAParticipant = async (participantId: string): Promise<void> => onRemoveParticipant(participantId);\n    return {\n      ...participantListDefaultProps,\n      // Passing undefined callback for mobile to avoid context menus for participants in ParticipantList are clicked\n      onRemoveParticipant: props.mobileView ? undefined : onRemoveAParticipant,\n      // We want the drawer menu items to appear when participants in ParticipantList are clicked\n      onParticipantClick: props.mobileView ? setDrawerMenuItemsForParticipant : undefined\n    };\n  }, [participantListDefaultProps, props.mobileView, setDrawerMenuItemsForParticipant, onRemoveParticipant]);\n  const participantList = <ParticipantListWithHeading isMobile={props.mobileView} participantListProps={participantListProps} onFetchAvatarPersonaData={props.onFetchAvatarPersonaData} onFetchParticipantMenuItems={props.mobileView ? undefined : props.onFetchParticipantMenuItems} title={props.strings.peoplePaneSubTitle} />;\n  if (props.mobileView) {\n    return <Stack verticalFill styles={peoplePaneContainerStyle} tokens={peoplePaneContainerTokens}>\n        <Stack.Item grow styles={participantListContainerStyles}>\n          {participantList}\n        </Stack.Item>\n\n        {props.active && <AddPeopleButton inviteLink={inviteLink} mobileView={props.mobileView} participantList={participantList} strings={strings} />}\n      </Stack>;\n  }\n  return <AddPeopleButton inviteLink={inviteLink} mobileView={props.mobileView} participantList={participantList} strings={strings} />;\n};\n\n/**\n * Create default contextual menu items for particant\n * @param participant - participant to create contextual menu items for\n * @param strings - localized strings for menu item text\n * @param onRemoveParticipant - callback to remove participant\n * @param localParticipantUserId - Local participant user id\n * @returns - IContextualMenuItem[]\n */\nconst createDefaultContextualMenuItems = (participant: ParticipantListParticipant, strings: CallWithChatCompositeStrings, onRemoveParticipant?: (userId: string) => Promise<void>, localParticipantUserId?: string): IContextualMenuItem[] => {\n  const menuItems: IContextualMenuItem[] = [];\n  if (onRemoveParticipant && participant?.userId !== localParticipantUserId) {\n    menuItems.push({\n      key: 'remove',\n      text: strings.removeMenuLabel,\n      onClick: () => {\n        if (participant?.userId) {\n          onRemoveParticipant?.(participant?.userId);\n        }\n      },\n      iconProps: {\n        iconName: 'UserRemove'\n      }\n    });\n  }\n  return menuItems;\n};\n\n/**\n * @private\n */\nconst hasRemoveParticipantsPermissionTrampoline = (): boolean => {\n  // Return true if stable.\n  return true;\n};\"../../../../react-components/src\""]}