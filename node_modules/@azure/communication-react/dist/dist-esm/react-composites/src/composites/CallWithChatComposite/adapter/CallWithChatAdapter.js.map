{"version":3,"file":"CallWithChatAdapter.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallWithChatComposite/adapter/CallWithChatAdapter.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/adjacent-overload-signatures */\n\nimport { CallIdChangedListener, DisplayNameChangedListener, IsMutedChangedListener, IsLocalScreenSharingActiveChangedListener, IsSpeakingChangedListener, ParticipantsJoinedListener, ParticipantsLeftListener, CallEndedListener } from '../../CallComposite';\nimport { MessageReadListener, MessageReceivedListener, MessageSentListener, ParticipantsAddedListener, ParticipantsRemovedListener } from '../../ChatComposite';\nimport { CallWithChatAdapterState } from '../state/CallWithChatAdapterState';\nimport type { AdapterError, AdapterState, Disposable } from '../../common/adapters';\nimport { AudioDeviceInfo, Call, PermissionConstraints, PropertyChangedEvent, StartCallOptions, VideoDeviceInfo } from '@azure/communication-calling';\nimport { CreateVideoStreamViewResult, VideoStreamOptions } from '@internal/react-components';\nimport { SendMessageOptions } from '@azure/communication-chat';\n/**\n * Functionality for managing the current call with chat.\n * @public\n */\nexport interface CallWithChatAdapterManagement {\n  // CallWithChat-specific Interface methods\n  /**\n   * Remove a participant from a Call.\n   *\n   * @param userId - UserId of the participant to remove.\n   *\n   * @public\n   */\n  removeParticipant(userId: string): Promise<void>;\n  // Call Interface Methods\n  /**\n   * Join the call with microphone initially on/off.\n   *\n   * @param microphoneOn - Whether microphone is initially enabled\n   *\n   * @public\n   */\n  joinCall(microphoneOn?: boolean): Call | undefined;\n  /**\n   * Leave the call.\n   *\n   * @param forEveryone - Whether to remove all participants when leaving\n   *\n   * @public\n   */\n  leaveCall(forEveryone?: boolean): Promise<void>;\n  /**\n   * Start the camera.\n   *\n   * This method will start rendering a local camera view when the call is not active.\n   *\n   * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  startCamera(options?: VideoStreamOptions): Promise<void>;\n  /**\n   * Stop the camera.\n   *\n   * This method will stop rendering a local camera view when the call is not active.\n   *\n   * @public\n   */\n  stopCamera(): Promise<void>;\n  /**\n   * Mute the current user during the call or disable microphone locally.\n   *\n   * @public\n   */\n  mute(): Promise<void>;\n  /**\n   * Unmute the current user during the call or enable microphone locally.\n   *\n   * @public\n   */\n  unmute(): Promise<void>;\n  /**\n   * Start the call.\n   *\n   * @param participants - An array of participant ids to join\n   *\n   * @public\n   */\n  startCall(participants: string[], options?: StartCallOptions): Call | undefined;\n  /**\n   * Start sharing the screen during a call.\n   *\n   * @public\n   */\n  startScreenShare(): Promise<void>;\n  /**\n   * Stop sharing the screen.\n   *\n   * @public\n   */\n  stopScreenShare(): Promise<void>;\n  /**\n   * Create the html view for a stream.\n   *\n   * @remarks\n   * This method is implemented for composite.\n   *\n   * @param remoteUserId - Id of the participant to render, leave it undefined to create the local camera view\n   * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  createStreamView(remoteUserId?: string, options?: VideoStreamOptions): Promise<void | CreateVideoStreamViewResult>;\n  /**\n   * Dispose the html view for a stream.\n   *\n   * @remarks\n   * This method is implemented for composite.\n   *\n   * @param remoteUserId - Id of the participant to render, leave it undefined to dispose the local camera view\n   * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  disposeStreamView(remoteUserId?: string, options?: VideoStreamOptions): Promise<void>;\n  /**\n   * Ask for permissions of devices.\n   *\n   * @remarks\n   * Browser permission window will pop up if permissions are not granted yet.\n   *\n   * @param constrain - Define constraints for accessing local devices {@link @azure/communication-calling#PermissionConstraints }\n   *\n   * @public\n   */\n  askDevicePermission(constrain: PermissionConstraints): Promise<void>;\n  /**\n   * Query for available camera devices.\n   *\n   * @remarks\n   * This method should be called after askDevicePermission()\n   *\n   * @return An array of video device information entities {@link @azure/communication-calling#VideoDeviceInfo }\n   *\n   * @public\n   */\n  queryCameras(): Promise<VideoDeviceInfo[]>;\n  /**\n   * Query for available microphone devices.\n   *\n   * @remarks\n   * This method should be called after askDevicePermission()\n   *\n   * @return An array of audio device information entities {@link @azure/communication-calling#AudioDeviceInfo }\n   *\n   * @public\n   */\n  queryMicrophones(): Promise<AudioDeviceInfo[]>;\n  /**\n   * Query for available microphone devices.\n   *\n   * @remarks\n   * This method should be called after askDevicePermission()\n   *\n   * @return An array of audio device information entities {@link @azure/communication-calling#AudioDeviceInfo }\n   *\n   * @public\n   */\n  querySpeakers(): Promise<AudioDeviceInfo[]>;\n  /**\n   * Set the camera to use in the call.\n   *\n   * @param sourceInfo - Camera device to choose, pick one returned by  {@link CallAdapterDeviceManagement#queryCameras }\n   * @param options - Options to control how the camera stream is rendered {@link @azure/communication-calling#VideoStreamOptions }\n   *\n   * @public\n   */\n  setCamera(sourceInfo: VideoDeviceInfo, options?: VideoStreamOptions): Promise<void>;\n  /**\n   * Set the microphone to use in the call.\n   *\n   * @param sourceInfo - Microphone device to choose, pick one returned by {@link CallAdapterDeviceManagement#queryMicrophones }\n   *\n   * @public\n   */\n  setMicrophone(sourceInfo: AudioDeviceInfo): Promise<void>;\n  /**\n   * Set the speaker to use in the call.\n   *\n   * @param sourceInfo - Speaker device to choose, pick one returned by {@link CallAdapterDeviceManagement#querySpeakers }\n   *\n   * @public\n   */\n  setSpeaker(sourceInfo: AudioDeviceInfo): Promise<void>;\n\n  // Chat Interface Methods\n  /**\n   * Fetch initial state for the Chat adapter.\n   *\n   * Performs the minimal fetch necessary for ChatComposite and API methods.\n   *\n   * @public\n   */\n  fetchInitialData(): Promise<void>;\n  /**\n   * Send a message in the thread.\n   *\n   * @public\n   */\n  sendMessage(content: string, options?: SendMessageOptions): Promise<void>;\n  /**\n   * Send a read receipt for a message.\n   *\n   * @public\n   */\n  sendReadReceipt(chatMessageId: string): Promise<void>;\n  /**\n   * Send typing indicator in the thread.\n   *\n   * @public\n   */\n  sendTypingIndicator(): Promise<void>;\n  /**\n   * Update a message content.\n   *\n   * @public\n   */\n  updateMessage(messageId: string, content: string, metadata?: Record<string, string>): Promise<void>;\n  /**\n   * Delete a message in the thread.\n   *\n   * @public\n   */\n  deleteMessage(messageId: string): Promise<void>;\n  /**\n   * Load more previous messages in the chat thread history.\n   *\n   * @remarks\n   * This method is usually used to control incremental fetch/infinite scroll.\n   *\n   * @public\n   */\n  loadPreviousChatMessages(messagesToLoad: number): Promise<boolean>;\n}\n\n/**\n * Call and Chat events that can be subscribed to in the {@link CallWithChatAdapter}.\n * @public\n */\nexport interface CallWithChatAdapterSubscriptions {\n  // Call subscriptions\n  on(event: 'callEnded', listener: CallEndedListener): void;\n  on(event: 'isMutedChanged', listener: IsMutedChangedListener): void;\n  on(event: 'callIdChanged', listener: CallIdChangedListener): void;\n  on(event: 'isLocalScreenSharingActiveChanged', listener: IsLocalScreenSharingActiveChangedListener): void;\n  on(event: 'displayNameChanged', listener: DisplayNameChangedListener): void;\n  on(event: 'isSpeakingChanged', listener: IsSpeakingChangedListener): void;\n  on(event: 'callParticipantsJoined', listener: ParticipantsJoinedListener): void;\n  on(event: 'callParticipantsLeft', listener: ParticipantsLeftListener): void;\n  on(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;\n  on(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;\n  on(event: 'callError', listener: (e: AdapterError) => void): void;\n  off(event: 'callEnded', listener: CallEndedListener): void;\n  off(event: 'isMutedChanged', listener: IsMutedChangedListener): void;\n  off(event: 'callIdChanged', listener: CallIdChangedListener): void;\n  off(event: 'isLocalScreenSharingActiveChanged', listener: IsLocalScreenSharingActiveChangedListener): void;\n  off(event: 'displayNameChanged', listener: DisplayNameChangedListener): void;\n  off(event: 'isSpeakingChanged', listener: IsSpeakingChangedListener): void;\n  off(event: 'callParticipantsJoined', listener: ParticipantsJoinedListener): void;\n  off(event: 'callParticipantsLeft', listener: ParticipantsLeftListener): void;\n  off(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;\n  off(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;\n  off(event: 'callError', listener: (e: AdapterError) => void): void;\n\n  // Chat subscriptions\n  on(event: 'messageReceived', listener: MessageReceivedListener): void;\n  on(event: 'messageSent', listener: MessageSentListener): void;\n  on(event: 'messageRead', listener: MessageReadListener): void;\n  on(event: 'chatParticipantsAdded', listener: ParticipantsAddedListener): void;\n  on(event: 'chatParticipantsRemoved', listener: ParticipantsRemovedListener): void;\n  on(event: 'chatError', listener: (e: AdapterError) => void): void;\n  off(event: 'messageReceived', listener: MessageReceivedListener): void;\n  off(event: 'messageSent', listener: MessageSentListener): void;\n  off(event: 'messageRead', listener: MessageReadListener): void;\n  off(event: 'chatParticipantsAdded', listener: ParticipantsAddedListener): void;\n  off(event: 'chatParticipantsRemoved', listener: ParticipantsRemovedListener): void;\n  off(event: 'chatError', listener: (e: AdapterError) => void): void;\n}\n\n/**\n * {@link CallWithChatComposite} Adapter interface.\n *\n * @public\n */\nexport interface CallWithChatAdapter extends CallWithChatAdapterManagement, AdapterState<CallWithChatAdapterState>, Disposable, CallWithChatAdapterSubscriptions {}\n\n/**\n * Events fired off by the {@link CallWithChatAdapter}.\n *\n * @public\n */\nexport type CallWithChatEvent = 'callError' | 'chatError' | 'callEnded' | 'isMutedChanged' | 'callIdChanged' | 'isLocalScreenSharingActiveChanged' | 'displayNameChanged' | 'isSpeakingChanged' | 'callParticipantsJoined' | 'callParticipantsLeft' | 'selectedMicrophoneChanged' | 'selectedSpeakerChanged' | 'messageReceived' | 'messageSent' | 'messageRead' | 'chatParticipantsAdded' | 'chatParticipantsRemoved';\"../../../../../react-components/src\""]}