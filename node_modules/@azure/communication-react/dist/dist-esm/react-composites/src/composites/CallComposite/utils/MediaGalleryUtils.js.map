{"version":3,"file":"MediaGalleryUtils.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/utils/MediaGalleryUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { toFlatCommunicationIdentifier, _formatString } from '@internal/acs-ui-common';\nimport { RemoteParticipantState } from '@internal/calling-stateful-client';\nimport { useMemo, useRef, useState } from 'react';\nimport { useLocale } from '../../localization';\nimport { useSelector } from '../hooks/useSelector';\nimport { getRemoteParticipantsConnectedSelector } from '../selectors/mediaGallerySelector';\ntype ParticipantChangedAnnouncmentStrings = {\n  participantJoinedNoticeString: string;\n  twoParticipantJoinedNoticeString: string;\n  threeParticipantJoinedNoticeString: string;\n  participantLeftNoticeString: string;\n  twoParticipantLeftNoticeString: string;\n  threeParticipantLeftNoticeString: string;\n  unnamedParticipantString: string;\n  manyParticipantsJoined: string;\n  manyParticipantsLeft: string;\n  manyUnnamedParticipantsJoined: string;\n  manyUnnamedParticipantsLeft: string;\n};\n\n/**\n * sets the announcement string whenever a Participant comes or goes from a call to be\n * used by the system narrator.\n *\n * @returns string to be used by the narrator and Announcer component\n *\n * @internal\n */\nexport const useParticipantChangedAnnouncement = (): string => {\n  const locale = useLocale().strings.call;\n  const strings = useMemo(() => {\n    return {\n      participantJoinedNoticeString: locale.participantJoinedNoticeString,\n      twoParticipantJoinedNoticeString: locale.twoParticipantJoinedNoticeString,\n      threeParticipantJoinedNoticeString: locale.threeParticipantJoinedNoticeString,\n      participantLeftNoticeString: locale.participantLeftNoticeString,\n      twoParticipantLeftNoticeString: locale.twoParticipantLeftNoticeString,\n      threeParticipantLeftNoticeString: locale.threeParticipantLeftNoticeString,\n      unnamedParticipantString: locale.unnamedParticipantString,\n      manyParticipantsJoined: locale.manyParticipantsJoined,\n      manyParticipantsLeft: locale.manyParticipantsLeft,\n      manyUnnamedParticipantsJoined: locale.manyUnnamedParticipantsJoined,\n      manyUnnamedParticipantsLeft: locale.manyUnnamedParticipantsLeft\n    };\n  }, [locale]);\n  const [announcerString, setAnnouncerString] = useState<string>('');\n  const currentParticipants = useSelector(getRemoteParticipantsConnectedSelector);\n  /**\n   * We want to use a useRef here since we want to not fire this hook based on the previous participants\n   * this allows this value to be used in the hook without being in the dependency array.\n   *\n   * Note: By definition if this hook is used in another component it is not pure anymore.\n   */\n  const previousParticipants = useRef<RemoteParticipantState[]>(currentParticipants);\n  const resetAnnoucement = (string: string): void => {\n    setAnnouncerString(string);\n  };\n  useMemo(() => {\n    const currentIds = currentParticipants.map(p => toFlatCommunicationIdentifier(p.identifier));\n    const previousIds = previousParticipants.current.map(p => toFlatCommunicationIdentifier(p.identifier));\n    const whoJoined = currentParticipants.filter(p => !previousIds.includes(toFlatCommunicationIdentifier(p.identifier)));\n    const whoLeft = previousParticipants.current.filter(p => !currentIds.includes(toFlatCommunicationIdentifier(p.identifier)));\n    if (whoJoined.length > 0) {\n      resetAnnoucement(createAnnouncmentString('joined', whoJoined, strings));\n    }\n    if (whoLeft.length > 0) {\n      resetAnnoucement(createAnnouncmentString('left', whoLeft, strings));\n    }\n    // Update cached value at the end.\n    previousParticipants.current = currentParticipants;\n  }, [currentParticipants, strings]);\n  return announcerString;\n};\n\n/**\n * Generates the announcement string for when a participant joins or leaves a call.\n */\nexport const createAnnouncmentString = (direction: 'joined' | 'left', participants: RemoteParticipantState[], strings: ParticipantChangedAnnouncmentStrings): string => {\n  /**\n   * If there are no participants return empty string.\n   */\n  if (participants.length === 0) {\n    return '';\n  }\n  /**\n   * Filter participants into two arrays to put all the unnamed participants at the back of the\n   * names being announced.\n   */\n  const unnamedParticipants = participants.filter(p => p.displayName === undefined);\n  const namedParicipants = participants.filter(p => p.displayName);\n  const sortedParticipants = namedParicipants.concat(unnamedParticipants);\n\n  /**\n   * if there are only unnamed participants present in the array announce a special unnamed participants\n   * only string.\n   */\n  if (sortedParticipants.filter(p => p.displayName).length === 0 && sortedParticipants.length > 1) {\n    return _formatString(direction === 'joined' ? strings.manyUnnamedParticipantsJoined : strings.manyUnnamedParticipantsLeft, {\n      numOfParticipants: (sortedParticipants.length - 1).toString()\n    });\n  }\n  const participantNames = sortedParticipants.map(p => p.displayName ?? strings.unnamedParticipantString);\n  switch (sortedParticipants.length) {\n    case 1:\n      return _formatString(direction === 'joined' ? strings.participantJoinedNoticeString : strings.participantLeftNoticeString, {\n        displayName: participantNames[0]\n      });\n    case 2:\n      return _formatString(direction === 'joined' ? strings.twoParticipantJoinedNoticeString : strings.twoParticipantLeftNoticeString, {\n        displayName1: participantNames[0],\n        displayName2: participantNames[1]\n      });\n    case 3:\n      return _formatString(direction === 'joined' ? strings.threeParticipantJoinedNoticeString : strings.threeParticipantLeftNoticeString, {\n        displayName1: participantNames[0],\n        displayName2: participantNames[1],\n        displayName3: participantNames[2]\n      });\n  }\n\n  /**\n   * If we have more than 3 participants joining we need to do something more to announce them\n   * appropriately.\n   *\n   * We don't want to announce every name when more than 3 participants join at once so\n   * we parse out the first 3 names we have and announce those with the number of others.\n   */\n\n  const numberOfExtraParticipants = sortedParticipants.length - 3;\n  return _formatString(direction === 'joined' ? strings.manyParticipantsJoined : strings.manyParticipantsLeft, {\n    displayName1: sortedParticipants[0].displayName ?? strings.unnamedParticipantString,\n    displayName2: sortedParticipants[1].displayName ?? strings.unnamedParticipantString,\n    displayName3: sortedParticipants[2].displayName ?? strings.unnamedParticipantString,\n    numOfParticipants: numberOfExtraParticipants.toString()\n  });\n};\"../../../../../acs-ui-common/src\"\"../../../../../calling-stateful-client/src\""]}