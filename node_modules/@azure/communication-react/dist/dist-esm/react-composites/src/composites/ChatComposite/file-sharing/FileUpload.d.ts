import { FileMetadata } from "../../../../../react-components/src";
/**
 * Contains the state attibutes of a file upload like name, progress etc.
 * @beta
 */
export interface FileUploadState {
    /**
     * Unique identifier for the file upload.
     */
    id: string;
    /**
     * Filename extracted from the {@link File} object.
     * This attribute is used to render the filename if `metadata.name` is not available.
     */
    filename: string;
    /**
     * A number between 0 and 1 indicating the progress of the upload.
     */
    progress: number;
    /**
     * Meta Data {@link FileMetadata} containing information about the uploaded file.
     */
    metadata?: FileMetadata;
    /**
     * Error message to be displayed to the user if the upload fails.
     */
    error?: FileUploadError;
}
/**
 * @beta
 * Error message to be displayed to the user if the upload fails.
 */
export declare type FileUploadError = {
    message: string;
    timestamp: number;
};
/**
 * A wrapper object for a file that is being uploaded.
 * Allows mmanaging file uploads by providing common functions for updating the
 * upload progress, canceling an upload, completing an upload etc.
 * @beta
 */
export interface FileUploadManager {
    /**
     * Unique identifier for the file upload.
     */
    id: string;
    /**
     * HTML {@link File} object for the uploaded file.
     */
    file?: File;
    /**
     * Update the progress of the upload.
     * @param value - number between 0 and 1
     */
    notifyUploadProgressChanged: (value: number) => void;
    /**
     * Mark the upload as complete.
     * Requires the `metadata` param containing uploaded file information.
     * @param metadata - {@link FileMetadata}
     */
    notifyUploadCompleted: (metadata: FileMetadata) => void;
    /**
     * Mark the upload as failed.
     * @param message - An error message that can be displayed to the user.
     */
    notifyUploadFailed: (message: string) => void;
}
/**
 * A wrapper object for a file that is being uploaded.
 * Provides common functions for updating the upload progress, canceling an upload etc.
 * @private
 */
export declare class FileUpload implements FileUploadManager, FileUploadEventEmitter {
    private _emitter;
    readonly id: string;
    readonly file?: File;
    /**
     * Filename to be displayed in the UI during file upload.
     */
    readonly fileName: string;
    /**
     * Optional object of type {@link FileMetadata}
     */
    metadata?: FileMetadata;
    constructor(data: File | FileMetadata);
    notifyUploadProgressChanged(value: number): void;
    notifyUploadCompleted(metadata: FileMetadata): void;
    notifyUploadFailed(message: string): void;
    on(event: 'uploadProgressChange', listener: UploadProgressListener): void;
    on(event: 'uploadComplete', listener: UploadCompleteListener): void;
    on(event: 'uploadFail', listener: UploadFailedListener): void;
    off(event: 'uploadProgressChange', listener: UploadProgressListener): void;
    off(event: 'uploadComplete', listener: UploadCompleteListener): void;
    off(event: 'uploadFail', listener: UploadFailedListener): void;
}
/**
 * Listener for `uploadProgressed` event.
 * @beta
 */
declare type UploadProgressListener = (id: string, value: number) => void;
/**
 * Listener for `uploadComplete` event.
 * @beta
 */
declare type UploadCompleteListener = (id: string, metadata: FileMetadata) => void;
/**
 * Listener for `uploadFailed` event.
 * @beta
 */
declare type UploadFailedListener = (id: string, message: string) => void;
/**
 * @beta
 */
interface FileUploadEventEmitter {
    /**
     * Subscriber function for `uploadProgressed` event.
     */
    on(event: 'uploadProgressChange', listener: UploadProgressListener): void;
    /**
     * Subscriber function for `uploadComplete` event.
     */
    on(event: 'uploadComplete', listener: UploadCompleteListener): void;
    /**
     * Subscriber function for `uploadFailed` event.
     */
    on(event: 'uploadFail', listener: UploadFailedListener): void;
    /**
     * Unsubscriber function for `uploadProgressed` event.
     */
    off(event: 'uploadProgressChange', listener: UploadProgressListener): void;
    /**
     * Unsubscriber function for `uploadComplete` event.
     */
    off(event: 'uploadComplete', listener: UploadCompleteListener): void;
    /**
     * Unsubscriber function for `uploadFailed` event.
     */
    off(event: 'uploadFail', listener: UploadFailedListener): void;
}
export {};
//# sourceMappingURL=FileUpload.d.ts.map