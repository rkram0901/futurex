{"version":3,"file":"AzureCommunicationCallWithChatAdapter.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallWithChatComposite/adapter/AzureCommunicationCallWithChatAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/* eslint-disable @typescript-eslint/no-unused-vars */ // REMOVE ONCE THIS FILE IS IMPLEMENTED\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */ // REMOVE ONCE THIS FILE IS IMPLEMENTED\n\nimport { AudioDeviceInfo, Call, CallAgent, GroupCallLocator, PermissionConstraints, PropertyChangedEvent, TeamsMeetingLinkLocator, StartCallOptions, VideoDeviceInfo } from '@azure/communication-calling';\nimport { CreateVideoStreamViewResult, VideoStreamOptions } from '@internal/react-components';\nimport { ParticipantsJoinedListener, ParticipantsLeftListener, IsMutedChangedListener, CallIdChangedListener, IsLocalScreenSharingActiveChangedListener, DisplayNameChangedListener, IsSpeakingChangedListener, CallAdapter, CallAdapterState, createAzureCommunicationCallAdapter, CallEndedListener } from '../../CallComposite';\nimport { MessageReceivedListener, MessageReadListener, ChatAdapter, ChatAdapterState, ParticipantsRemovedListener, ParticipantsAddedListener } from '../../ChatComposite';\nimport { CallWithChatAdapter, CallWithChatEvent } from './CallWithChatAdapter';\nimport { callWithChatAdapterStateFromBackingStates, CallWithChatAdapterState, mergeCallAdapterStateIntoCallWithChatAdapterState, mergeChatAdapterStateIntoCallWithChatAdapterState } from '../state/CallWithChatAdapterState';\nimport { createAzureCommunicationChatAdapter, createAzureCommunicationChatAdapterFromClient } from '../../ChatComposite/adapter/AzureCommunicationChatAdapter';\nimport { EventEmitter } from 'events';\nimport { CommunicationTokenCredential, CommunicationUserIdentifier } from '@azure/communication-common';\nimport { getChatThreadFromTeamsLink } from './parseTeamsUrl';\nimport { AdapterError } from '../../common/adapters';\nimport { CallAdapterLocator, createAzureCommunicationCallAdapterFromClient } from '../../CallComposite/adapter/AzureCommunicationCallAdapter';\nimport { StatefulCallClient } from '@internal/calling-stateful-client';\nimport { StatefulChatClient } from '@internal/chat-stateful-client';\nimport { ChatThreadClient } from '@azure/communication-chat';\nimport { useEffect, useRef, useState } from 'react';\nimport { _toCommunicationIdentifier } from '@internal/acs-ui-common';\ntype CallWithChatAdapterStateChangedHandler = (newState: CallWithChatAdapterState) => void;\n\n/** Context of Call with Chat, which is a centralized context for all state updates */\nclass CallWithChatContext {\n  private emitter = new EventEmitter();\n  private state: CallWithChatAdapterState;\n  constructor(clientState: CallWithChatAdapterState, maxListeners = 50) {\n    this.state = clientState;\n    this.emitter.setMaxListeners(maxListeners);\n  }\n  public onStateChange(handler: CallWithChatAdapterStateChangedHandler): void {\n    this.emitter.on('stateChanged', handler);\n  }\n  public offStateChange(handler: CallWithChatAdapterStateChangedHandler): void {\n    this.emitter.off('stateChanged', handler);\n  }\n  public setState(state: CallWithChatAdapterState): void {\n    this.state = state;\n    this.emitter.emit('stateChanged', this.state);\n  }\n  public getState(): CallWithChatAdapterState {\n    return this.state;\n  }\n  public updateClientState(clientState: CallWithChatAdapterState): void {\n    this.setState(clientState);\n  }\n  public updateClientStateWithChatState(chatAdapterState: ChatAdapterState): void {\n    this.updateClientState(mergeChatAdapterStateIntoCallWithChatAdapterState(this.state, chatAdapterState));\n  }\n  public updateClientStateWithCallState(callAdapterState: CallAdapterState): void {\n    this.updateClientState(mergeCallAdapterStateIntoCallWithChatAdapterState(this.state, callAdapterState));\n  }\n}\n\n/**\n * CallWithChat adapter backed by Azure Communication Services.\n * Created for easy use with the {@link CallWithChatComposite}.\n */\nexport class AzureCommunicationCallWithChatAdapter implements CallWithChatAdapter {\n  private callAdapter: CallAdapter;\n  private chatAdapter: ChatAdapter;\n  private context: CallWithChatContext;\n  private onChatStateChange: (newChatAdapterState: ChatAdapterState) => void;\n  private onCallStateChange: (newChatAdapterState: CallAdapterState) => void;\n  constructor(callAdapter: CallAdapter, chatAdapter: ChatAdapter) {\n    this.bindPublicMethods();\n    this.callAdapter = callAdapter;\n    this.chatAdapter = chatAdapter;\n    this.context = new CallWithChatContext(callWithChatAdapterStateFromBackingStates(callAdapter, chatAdapter));\n    const onChatStateChange = (newChatAdapterState: ChatAdapterState): void => {\n      this.context.updateClientStateWithChatState(newChatAdapterState);\n    };\n    this.chatAdapter.onStateChange(onChatStateChange);\n    this.onChatStateChange = onChatStateChange;\n    const onCallStateChange = (newCallAdapterState: CallAdapterState): void => {\n      this.context.updateClientStateWithCallState(newCallAdapterState);\n    };\n    this.callAdapter.onStateChange(onCallStateChange);\n    this.onCallStateChange = onCallStateChange;\n  }\n  private bindPublicMethods(): void {\n    this.joinCall.bind(this);\n    this.leaveCall.bind(this);\n    this.startCall.bind(this);\n    this.onStateChange.bind(this);\n    this.offStateChange.bind(this);\n    this.getState.bind(this);\n    this.dispose.bind(this);\n    this.setCamera.bind(this);\n    this.setMicrophone.bind(this);\n    this.setSpeaker.bind(this);\n    this.askDevicePermission.bind(this);\n    this.queryCameras.bind(this);\n    this.queryMicrophones.bind(this);\n    this.querySpeakers.bind(this);\n    this.startCamera.bind(this);\n    this.stopCamera.bind(this);\n    this.mute.bind(this);\n    this.unmute.bind(this);\n    this.startScreenShare.bind(this);\n    this.stopScreenShare.bind(this);\n    this.removeParticipant.bind(this);\n    this.createStreamView.bind(this);\n    this.disposeStreamView.bind(this);\n    this.fetchInitialData.bind(this);\n    this.sendMessage.bind(this);\n    this.sendReadReceipt.bind(this);\n    this.sendTypingIndicator.bind(this);\n    this.loadPreviousChatMessages.bind(this);\n    this.updateMessage.bind(this);\n    this.deleteMessage.bind(this);\n    this.on.bind(this);\n    this.off.bind(this);\n  }\n\n  /** Join existing Call. */\n  public joinCall(microphoneOn?: boolean): Call | undefined {\n    return this.callAdapter.joinCall(microphoneOn);\n  }\n  /** Leave current Call. */\n  public async leaveCall(forEveryone?: boolean): Promise<void> {\n    // Only remove self from the GroupCall. Contoso must manage access to Chat.\n    await this.callAdapter.leaveCall(forEveryone);\n  }\n  /** Start a new Call. */\n  public startCall(participants: string[], options?: StartCallOptions): Call | undefined {\n    let communicationParticipants = participants;\n    return this.callAdapter.startCall(communicationParticipants, options);\n  }\n  /**\n   * Subscribe to state change events.\n   * @param handler - handler to be called when the state changes. This is passed the new state.\n   */\n  public onStateChange(handler: (state: CallWithChatAdapterState) => void): void {\n    this.context.onStateChange(handler);\n  }\n  /**\n   * Unsubscribe to state change events.\n   * @param handler - handler to be no longer called when state changes.\n   */\n  public offStateChange(handler: (state: CallWithChatAdapterState) => void): void {\n    this.context.offStateChange(handler);\n  }\n  /** Get current Call and Chat state. */\n  public getState(): CallWithChatAdapterState {\n    return this.context.getState();\n  }\n  /** Dispose of the current CallWithChatAdapter. */\n  public dispose(): void {\n    this.chatAdapter.offStateChange(this.onChatStateChange);\n    this.callAdapter.offStateChange(this.onCallStateChange);\n    this.chatAdapter.dispose();\n    this.callAdapter.dispose();\n  }\n  /** Remove a participant from the Call only. */\n  public async removeParticipant(userId: string): Promise<void> {\n    let participant = userId;\n    await this.callAdapter.removeParticipant(participant);\n  }\n  public async setCamera(device: VideoDeviceInfo, options?: VideoStreamOptions): Promise<void> {\n    await this.callAdapter.setCamera(device, options);\n  }\n  /** Set the microphone to be used in the Call. */\n  public async setMicrophone(device: AudioDeviceInfo): Promise<void> {\n    await this.callAdapter.setMicrophone(device);\n  }\n  /** Set the speaker to be used in the Call. */\n  public async setSpeaker(device: AudioDeviceInfo): Promise<void> {\n    await this.callAdapter.setSpeaker(device);\n  }\n  public async askDevicePermission(constraints: PermissionConstraints): Promise<void> {\n    await this.callAdapter.askDevicePermission(constraints);\n  }\n  /** Query for available cameras. */\n  public async queryCameras(): Promise<VideoDeviceInfo[]> {\n    return await this.callAdapter.queryCameras();\n  }\n  /** Query for available microphones. */\n  public async queryMicrophones(): Promise<AudioDeviceInfo[]> {\n    return await this.callAdapter.queryMicrophones();\n  }\n  /** Query for available speakers. */\n  public async querySpeakers(): Promise<AudioDeviceInfo[]> {\n    return await this.callAdapter.querySpeakers();\n  }\n  /** Start the camera for the user in the Call. */\n  public async startCamera(options?: VideoStreamOptions): Promise<void> {\n    await this.callAdapter.startCamera(options);\n  }\n  /** Stop the camera for the user in the Call. */\n  public async stopCamera(): Promise<void> {\n    await this.callAdapter.stopCamera();\n  }\n  /** Mute the user in the Call. */\n  public async mute(): Promise<void> {\n    await this.callAdapter.mute();\n  }\n  /** Unmute the user in the Call. */\n  public async unmute(): Promise<void> {\n    await this.callAdapter.unmute();\n  }\n  /** Trigger the user to start screen share. */\n  public async startScreenShare(): Promise<void> {\n    await this.callAdapter.startScreenShare();\n  }\n  /** Stop the current active screen share. */\n  public async stopScreenShare(): Promise<void> {\n    await this.callAdapter.stopScreenShare();\n  }\n  /** Create a stream view for a remote participants video feed. */\n  public async createStreamView(remoteUserId?: string, options?: VideoStreamOptions): Promise<void | CreateVideoStreamViewResult> {\n    return await this.callAdapter.createStreamView(remoteUserId, options);\n  }\n  /** Dispose of a created stream view of a remote participants video feed. */\n  public async disposeStreamView(remoteUserId?: string, options?: VideoStreamOptions): Promise<void> {\n    await this.callAdapter.disposeStreamView(remoteUserId, options);\n  }\n  /** Fetch initial Call and Chat data such as chat messages. */\n  public async fetchInitialData(): Promise<void> {\n    await this.chatAdapter.fetchInitialData();\n  }\n  /** Send a chat message. */\n  public async sendMessage(content: string): Promise<void> {\n    await this.chatAdapter.sendMessage(content);\n  }\n  /** Send a chat read receipt. */\n  public async sendReadReceipt(chatMessageId: string): Promise<void> {\n    await this.chatAdapter.sendReadReceipt(chatMessageId);\n  }\n  /** Send an isTyping indicator. */\n  public async sendTypingIndicator(): Promise<void> {\n    await this.chatAdapter.sendTypingIndicator();\n  }\n  /** Load previous Chat messages. */\n  public async loadPreviousChatMessages(messagesToLoad: number): Promise<boolean> {\n    return await this.chatAdapter.loadPreviousChatMessages(messagesToLoad);\n  }\n  /** Update an existing message. */\n  public async updateMessage(messageId: string, content: string, metadata?: Record<string, string>): Promise<void> {\n    return await this.chatAdapter.updateMessage(messageId, content, metadata);\n  }\n  /** Delete an existing message. */\n  public async deleteMessage(messageId: string): Promise<void> {\n    return await this.chatAdapter.deleteMessage(messageId);\n  }\n  on(event: 'callParticipantsJoined', listener: ParticipantsJoinedListener): void;\n  on(event: 'callParticipantsLeft', listener: ParticipantsLeftListener): void;\n  on(event: 'callEnded', listener: CallEndedListener): void;\n  on(event: 'callError', listener: (e: AdapterError) => void): void;\n  on(event: 'isMutedChanged', listener: IsMutedChangedListener): void;\n  on(event: 'callIdChanged', listener: CallIdChangedListener): void;\n  on(event: 'isLocalScreenSharingActiveChanged', listener: IsLocalScreenSharingActiveChangedListener): void;\n  on(event: 'displayNameChanged', listener: DisplayNameChangedListener): void;\n  on(event: 'isSpeakingChanged', listener: IsSpeakingChangedListener): void;\n  on(event: 'messageReceived', listener: MessageReceivedListener): void;\n  on(event: 'messageSent', listener: MessageReceivedListener): void;\n  on(event: 'messageRead', listener: MessageReadListener): void;\n  on(event: 'chatParticipantsAdded', listener: ParticipantsAddedListener): void;\n  on(event: 'chatParticipantsRemoved', listener: ParticipantsRemovedListener): void;\n  on(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;\n  on(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;\n  on(event: 'chatError', listener: (e: AdapterError) => void): void;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  on(event: CallWithChatEvent, listener: any): void {\n    switch (event) {\n      case 'callParticipantsJoined':\n        this.callAdapter.on('participantsJoined', listener);\n        break;\n      case 'callParticipantsLeft':\n        this.callAdapter.on('participantsLeft', listener);\n        break;\n      case 'callEnded':\n        this.callAdapter.on('callEnded', listener);\n        break;\n      case 'isMutedChanged':\n        this.callAdapter.on('isMutedChanged', listener);\n        break;\n      case 'callIdChanged':\n        this.callAdapter.on('callIdChanged', listener);\n        break;\n      case 'isLocalScreenSharingActiveChanged':\n        this.callAdapter.on('isLocalScreenSharingActiveChanged', listener);\n        break;\n      case 'displayNameChanged':\n        this.callAdapter.on('displayNameChanged', listener);\n        break;\n      case 'isSpeakingChanged':\n        this.callAdapter.on('isSpeakingChanged', listener);\n        break;\n      case 'selectedMicrophoneChanged':\n        this.callAdapter.on('selectedMicrophoneChanged', listener);\n        break;\n      case 'selectedSpeakerChanged':\n        this.callAdapter.on('selectedSpeakerChanged', listener);\n        break;\n      case 'messageReceived':\n        this.chatAdapter.on('messageReceived', listener);\n        break;\n      case 'messageSent':\n        this.chatAdapter.on('messageSent', listener);\n        break;\n      case 'messageRead':\n        this.chatAdapter.on('messageRead', listener);\n        break;\n      case 'chatParticipantsAdded':\n        this.chatAdapter.on('participantsAdded', listener);\n        break;\n      case 'chatParticipantsRemoved':\n        this.chatAdapter.on('participantsRemoved', listener);\n        break;\n      case 'callError':\n        this.callAdapter.on('error', listener);\n        break;\n      case 'chatError':\n        this.chatAdapter.on('error', listener);\n        break;\n      default:\n        throw `Unknown AzureCommunicationCallWithChatAdapter Event: ${event}`;\n    }\n  }\n  off(event: 'callParticipantsJoined', listener: ParticipantsJoinedListener): void;\n  off(event: 'callParticipantsLeft', listener: ParticipantsLeftListener): void;\n  off(event: 'callEnded', listener: CallEndedListener): void;\n  off(event: 'callError', listener: (e: AdapterError) => void): void;\n  off(event: 'isMutedChanged', listener: IsMutedChangedListener): void;\n  off(event: 'callIdChanged', listener: CallIdChangedListener): void;\n  off(event: 'isLocalScreenSharingActiveChanged', listener: IsLocalScreenSharingActiveChangedListener): void;\n  off(event: 'displayNameChanged', listener: DisplayNameChangedListener): void;\n  off(event: 'isSpeakingChanged', listener: IsSpeakingChangedListener): void;\n  off(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;\n  off(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;\n  off(event: 'messageReceived', listener: MessageReceivedListener): void;\n  off(event: 'messageSent', listener: MessageReceivedListener): void;\n  off(event: 'messageRead', listener: MessageReadListener): void;\n  off(event: 'chatParticipantsAdded', listener: ParticipantsAddedListener): void;\n  off(event: 'chatParticipantsRemoved', listener: ParticipantsRemovedListener): void;\n  off(event: 'chatError', listener: (e: AdapterError) => void): void;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  off(event: CallWithChatEvent, listener: any): void {\n    switch (event) {\n      case 'callParticipantsJoined':\n        this.callAdapter.off('participantsJoined', listener);\n        break;\n      case 'callParticipantsLeft':\n        this.callAdapter.off('participantsLeft', listener);\n        break;\n      case 'callEnded':\n        this.callAdapter.off('callEnded', listener);\n        break;\n      case 'isMutedChanged':\n        this.callAdapter.off('isMutedChanged', listener);\n        break;\n      case 'callIdChanged':\n        this.callAdapter.off('callIdChanged', listener);\n        break;\n      case 'isLocalScreenSharingActiveChanged':\n        this.callAdapter.off('isLocalScreenSharingActiveChanged', listener);\n        break;\n      case 'displayNameChanged':\n        this.callAdapter.off('displayNameChanged', listener);\n        break;\n      case 'isSpeakingChanged':\n        this.callAdapter.off('isSpeakingChanged', listener);\n        break;\n      case 'selectedMicrophoneChanged':\n        this.callAdapter.off('selectedMicrophoneChanged', listener);\n        break;\n      case 'selectedSpeakerChanged':\n        this.callAdapter.off('selectedSpeakerChanged', listener);\n        break;\n      case 'messageReceived':\n        this.chatAdapter.off('messageReceived', listener);\n        break;\n      case 'messageSent':\n        this.chatAdapter.off('messageSent', listener);\n        break;\n      case 'messageRead':\n        this.chatAdapter.off('messageRead', listener);\n        break;\n      case 'chatParticipantsAdded':\n        this.chatAdapter.off('participantsAdded', listener);\n        break;\n      case 'chatParticipantsRemoved':\n        this.chatAdapter.off('participantsRemoved', listener);\n        break;\n      case 'callError':\n        this.callAdapter.off('error', listener);\n        break;\n      case 'chatError':\n        this.chatAdapter.off('error', listener);\n        break;\n      default:\n        throw `Unknown AzureCommunicationCallWithChatAdapter Event: ${event}`;\n    }\n  }\n}\n\n/**\n * Arguments for use in {@link createAzureCommunicationCallWithChatAdapter} to join a Call with an associated Chat thread.\n *\n * @public\n */\nexport interface CallAndChatLocator {\n  /** Locator used by {@link createAzureCommunicationCallWithChatAdapter} to locate the call to join */\n  callLocator: GroupCallLocator;\n  /** Chat thread ID used by {@link createAzureCommunicationCallWithChatAdapter} to locate the chat thread to join */\n  chatThreadId: string;\n}\n\n/**\n * Arguments for {@link createAzureCommunicationCallWithChatAdapter}\n *\n * @public\n */\nexport type AzureCommunicationCallWithChatAdapterArgs = {\n  endpoint: string;\n  userId: CommunicationUserIdentifier;\n  displayName: string;\n  credential: CommunicationTokenCredential;\n  locator: CallAndChatLocator | TeamsMeetingLinkLocator;\n};\n\n/**\n * Create a CallWithChatAdapter backed by Azure Communication services\n * to plug into the {@link CallWithChatComposite}.\n *\n * @public\n */\nexport const createAzureCommunicationCallWithChatAdapter = async ({\n  userId,\n  displayName,\n  credential,\n  endpoint,\n  locator\n}: AzureCommunicationCallWithChatAdapterArgs): Promise<CallWithChatAdapter> => {\n  const callAdapterLocator = isTeamsMeetingLinkLocator(locator) ? locator : locator.callLocator;\n  const createCallAdapterPromise = createAzureCommunicationCallAdapter({\n    userId,\n    displayName,\n    credential,\n    locator: callAdapterLocator\n  });\n  const threadId = isTeamsMeetingLinkLocator(locator) ? getChatThreadFromTeamsLink(locator.meetingLink) : locator.chatThreadId;\n  const createChatAdapterPromise = createAzureCommunicationChatAdapter({\n    endpoint,\n    userId,\n    displayName,\n    credential,\n    threadId\n  });\n  const [callAdapter, chatAdapter] = await Promise.all([createCallAdapterPromise, createChatAdapterPromise]);\n  return new AzureCommunicationCallWithChatAdapter(callAdapter, chatAdapter);\n};\n\n/**\n * A custom React hook to simplify the creation of {@link CallWithChatAdapter}.\n *\n * Similar to {@link createAzureCommunicationCallWithChatAdapter}, but takes care of asynchronous\n * creation of the adapter internally.\n *\n * Allows arguments to be undefined so that you can respect the rule-of-hooks and pass in arguments\n * as they are created. The adapter is only created when all arguments are defined.\n *\n * Note that you must memoize the arguments to avoid recreating adapter on each render.\n * See storybook for typical usage examples.\n *\n * @public\n */\nexport const useAzureCommunicationCallWithChatAdapter = (args: Partial<AzureCommunicationCallWithChatAdapterArgs>, afterCreate?: (adapter: CallWithChatAdapter) => Promise<CallWithChatAdapter>, beforeDispose?: (adapter: CallWithChatAdapter) => Promise<void>): CallWithChatAdapter | undefined => {\n  const {\n    credential,\n    displayName,\n    endpoint,\n    locator,\n    userId\n  } = args;\n\n  // State update needed to rerender the parent component when a new adapter is created.\n  const [adapter, setAdapter] = useState<CallWithChatAdapter | undefined>(undefined);\n  // Ref needed for cleanup to access the old adapter created asynchronously.\n  const adapterRef = useRef<CallWithChatAdapter | undefined>(undefined);\n  const afterCreateRef = useRef<((adapter: CallWithChatAdapter) => Promise<CallWithChatAdapter>) | undefined>(undefined);\n  const beforeDisposeRef = useRef<((adapter: CallWithChatAdapter) => Promise<void>) | undefined>(undefined);\n  // These refs are updated on *each* render, so that the latest values\n  // are used in the `useEffect` closures below.\n  // Using a Ref ensures that new values for the callbacks do not trigger the\n  // useEffect blocks, and a new adapter creation / distruction is not triggered.\n  afterCreateRef.current = afterCreate;\n  beforeDisposeRef.current = beforeDispose;\n  useEffect(() => {\n    if (!credential || !displayName || !endpoint || !locator || !userId) {\n      return;\n    }\n    (async () => {\n      if (adapterRef.current) {\n        // Dispose the old adapter when a new one is created.\n        //\n        // This clean up function uses `adapterRef` because `adapter` can not be added to the dependency array of\n        // this `useEffect` -- we do not want to trigger a new adapter creation because of the first adapter\n        // creation.\n        if (beforeDisposeRef.current) {\n          await beforeDisposeRef.current(adapterRef.current);\n        }\n        adapterRef.current.dispose();\n        adapterRef.current = undefined;\n      }\n      let newAdapter = await createAzureCommunicationCallWithChatAdapter({\n        credential,\n        displayName,\n        endpoint,\n        locator,\n        userId\n      });\n      if (afterCreateRef.current) {\n        newAdapter = await afterCreateRef.current(newAdapter);\n      }\n      adapterRef.current = newAdapter;\n      setAdapter(newAdapter);\n    })();\n  },\n  // Explicitly list all arguments so that caller doesn't have to memoize the `args` object.\n  [adapterRef, afterCreateRef, beforeDisposeRef, credential, displayName, endpoint, locator, userId]);\n\n  // Dispose any existing adapter when the component unmounts.\n  useEffect(() => {\n    return () => {\n      (async () => {\n        if (adapterRef.current) {\n          if (beforeDisposeRef.current) {\n            await beforeDisposeRef.current(adapterRef.current);\n          }\n          adapterRef.current.dispose();\n          adapterRef.current = undefined;\n        }\n      })();\n    };\n  }, []);\n  return adapter;\n};\n\n/**\n * Arguments for {@link createAzureCommunicationCallWithChatAdapterFromClient}\n *\n * @public\n */\nexport type AzureCommunicationCallWithChatAdapterFromClientArgs = {\n  callLocator: CallAdapterLocator | TeamsMeetingLinkLocator;\n  callAgent: CallAgent;\n  callClient: StatefulCallClient;\n  chatClient: StatefulChatClient;\n  chatThreadClient: ChatThreadClient;\n};\n\n/**\n * Create a {@link CallWithChatAdapter} using the provided {@link StatefulChatClient} and {@link StatefulCallClient}.\n *\n * Useful if you want to keep a reference to {@link StatefulChatClient} and {@link StatefulCallClient}.\n * Consider using {@link createAzureCommunicationCallWithChatAdapter} for a simpler API.\n *\n * @public\n */\nexport const createAzureCommunicationCallWithChatAdapterFromClients = async ({\n  callClient,\n  callAgent,\n  callLocator,\n  chatClient,\n  chatThreadClient\n}: AzureCommunicationCallWithChatAdapterFromClientArgs): Promise<CallWithChatAdapter> => {\n  const createCallAdapterPromise = createAzureCommunicationCallAdapterFromClient(callClient, callAgent, callLocator);\n  const createChatAdapterPromise = createAzureCommunicationChatAdapterFromClient(chatClient, chatThreadClient);\n  const [callAdapter, chatAdapter] = await Promise.all([createCallAdapterPromise, createChatAdapterPromise]);\n  return new AzureCommunicationCallWithChatAdapter(callAdapter, chatAdapter);\n};\n\n/**\n * Create a {@link CallWithChatAdapter} from the underlying adapters.\n *\n * This is an internal factory function used by browser tests to inject fake adapters for call and chat.\n *\n * @internal\n */\nexport const _createAzureCommunicationCallWithChatAdapterFromAdapters = (callAdapter: CallAdapter, chatAdapter: ChatAdapter): CallWithChatAdapter => new AzureCommunicationCallWithChatAdapter(callAdapter, chatAdapter);\nconst isTeamsMeetingLinkLocator = (locator: CallAndChatLocator | TeamsMeetingLinkLocator): locator is TeamsMeetingLinkLocator => {\n  return 'meetingLink' in locator;\n};\"../../../../../react-components/src\"\"../../../../../calling-stateful-client/src\"\"../../../../../chat-stateful-client/src\"\"../../../../../acs-ui-common/src\""]}