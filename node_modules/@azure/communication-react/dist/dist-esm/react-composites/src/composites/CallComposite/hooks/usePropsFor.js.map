{"version":3,"file":"usePropsFor.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/hooks/usePropsFor.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAKlC,OAAO,EAAmB,kBAAkB,EAAsB,sDAA6C;AAC/G,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAG5C;;GAEG;AACH,+HAA+H;AAC/H,MAAM,CAAC,MAAM,WAAW,GAAG,CAAiD,SAAoB,EAA0K,EAAE;IAC1Q,MAAM,QAAQ,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC;IAC/C,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;KACjG;IACD,uCACK,kBAAkB,CAAE,QAAqB,CAAC,GAC1C,WAAW,CAAC,SAAS,CAAC,EACzB;AACJ,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Common } from '@internal/acs-ui-common';\nimport { CallingHandlers, getCallingSelector, GetCallingSelector } from '@internal/calling-component-bindings';\nimport { useAdaptedSelector } from './useAdaptedSelector';\nimport { useHandlers } from './useHandlers';\ntype Selector = (state: any, props: any) => any;\n\n/**\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type\nexport const usePropsFor = <Component extends (props: any) => JSX.Element,>(component: Component): GetCallingSelector<Component> extends Selector ? ReturnType<GetCallingSelector<Component>> & Common<CallingHandlers, Parameters<Component>[0]> : Record<string, never> => {\n  const selector = getCallingSelector(component);\n  if (!selector) {\n    throw new Error(\"Can't find the selector for component, please check supported component list\");\n  }\n  return {\n    ...useAdaptedSelector((selector as Selector)),\n    ...useHandlers(component)\n  };\n};\"../../../../../acs-ui-common/src\"\"../../../../../calling-component-bindings/src\""]}