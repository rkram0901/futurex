// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/**
 * Facade around the CallWithChatAdapter to satisfy the call adapter interface.
 *
 * @private
 */
export class CallWithChatBackedCallAdapter {
    constructor(callWithChatAdapter) {
        // For onStateChange we must convert CallWithChat state to chat state. This involves creating a new handler to be passed into the onStateChange.
        // In order to unsubscribe the handler when offStateChange is called we must have a mapping of the original handler to the newly created handler.
        this.eventStore = new Map();
        this.on = (event, listener) => {
            switch (event) {
                case 'error':
                    return this.callWithChatAdapter.on('callError', listener);
                case 'participantsJoined':
                    return this.callWithChatAdapter.on('callParticipantsJoined', listener);
                case 'participantsLeft':
                    return this.callWithChatAdapter.on('callParticipantsLeft', listener);
                default:
                    return this.callWithChatAdapter.on(event, listener);
            }
        };
        this.off = (event, listener) => {
            switch (event) {
                case 'error':
                    return this.callWithChatAdapter.off('callError', listener);
                case 'participantsJoined':
                    return this.callWithChatAdapter.off('callParticipantsJoined', listener);
                case 'participantsLeft':
                    return this.callWithChatAdapter.off('callParticipantsLeft', listener);
                default:
                    return this.callWithChatAdapter.off(event, listener);
            }
        };
        this.onStateChange = (handler) => {
            const convertedHandler = (state) => {
                handler(callAdapterStateFromCallWithChatAdapterState(state));
            };
            this.callWithChatAdapter.onStateChange(convertedHandler);
            this.eventStore.set(handler, convertedHandler);
        };
        this.offStateChange = (handler) => {
            const convertedHandler = this.eventStore.get(handler);
            convertedHandler && this.callWithChatAdapter.offStateChange(convertedHandler);
        };
        this.getState = () => callAdapterStateFromCallWithChatAdapterState(this.callWithChatAdapter.getState());
        this.dispose = () => this.callWithChatAdapter.dispose();
        this.joinCall = (microphoneOn) => {
            return this.callWithChatAdapter.joinCall(microphoneOn);
        };
        this.leaveCall = (forEveryone) => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.leaveCall(forEveryone); });
        this.startCall = (participants, options) => {
            let communicationParticipants = participants;
            return this.callWithChatAdapter.startCall(communicationParticipants, options);
        };
        this.setCamera = (sourceId, options) => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.setCamera(sourceId, options); });
        this.setMicrophone = (sourceId) => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.setMicrophone(sourceId); });
        this.setSpeaker = (sourceId) => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.setSpeaker(sourceId); });
        this.askDevicePermission = (constraints) => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.askDevicePermission(constraints); });
        this.queryCameras = () => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.queryCameras(); });
        this.queryMicrophones = () => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.queryMicrophones(); });
        this.querySpeakers = () => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.querySpeakers(); });
        this.startCamera = (options) => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.startCamera(options); });
        this.stopCamera = () => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.stopCamera(); });
        this.mute = () => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.mute(); });
        this.unmute = () => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.unmute(); });
        this.startScreenShare = () => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.startScreenShare(); });
        this.stopScreenShare = () => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.stopScreenShare(); });
        this.removeParticipant = (userId) => __awaiter(this, void 0, void 0, function* () {
            let participant = userId;
            yield this.callWithChatAdapter.removeParticipant(participant);
        });
        this.createStreamView = (remoteUserId, options) => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.createStreamView(remoteUserId, options); });
        this.disposeStreamView = (remoteUserId, options) => __awaiter(this, void 0, void 0, function* () { return yield this.callWithChatAdapter.disposeStreamView(remoteUserId, options); });
        this.callWithChatAdapter = callWithChatAdapter;
    }
}
function callAdapterStateFromCallWithChatAdapterState(callWithChatAdapterState) {
    return {
        isLocalPreviewMicrophoneEnabled: callWithChatAdapterState.isLocalPreviewMicrophoneEnabled,
        page: callWithChatAdapterState.page,
        userId: callWithChatAdapterState.userId,
        displayName: callWithChatAdapterState.displayName,
        call: callWithChatAdapterState.call,
        devices: callWithChatAdapterState.devices,
        isTeamsCall: callWithChatAdapterState.isTeamsCall,
        latestErrors: callWithChatAdapterState.latestCallErrors
    };
}
//# sourceMappingURL=CallWithChatBackedCallAdapter.js.map