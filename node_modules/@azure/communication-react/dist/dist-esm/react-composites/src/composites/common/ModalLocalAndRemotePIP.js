// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { concatStyleSets, ContextualMenu, Stack } from '@fluentui/react';
import React, { useMemo } from 'react';
import { LocalAndRemotePIP } from '../CallComposite/components/LocalAndRemotePIP';
import { useHandlers } from '../CallComposite/hooks/useHandlers';
import { useSelector } from '../CallComposite/hooks/useSelector';
import { localAndRemotePIPSelector } from '../CallComposite/selectors/localAndRemotePIPSelector';
import { _ModalClone } from "../../../../react-components/src";
import { hiddenStyle, modalStyle, PIPContainerStyle } from './styles/ModalLocalAndRemotePIP.styles';
/**
 * Drag options for Modal in {@link ModalLocalAndRemotePIP} component
 */
const DRAG_OPTIONS = {
    moveMenuItemText: 'Move',
    closeMenuItemText: 'Close',
    menu: ContextualMenu,
    keepInBounds: true
};
/**
 * A wrapping component with a draggable {@link LocalAndRemotePIP} component that is bound to a LayerHost component with id
 * specified by `modalLayerHostId` prop
 * @private
 */
export const ModalLocalAndRemotePIP = (props) => {
    var _a;
    const rootStyles = props.hidden ? hiddenStyle : PIPContainerStyle;
    const pictureInPictureProps = useSelector(localAndRemotePIPSelector);
    const pictureInPictureHandlers = useHandlers(LocalAndRemotePIP);
    const localAndRemotePIP = useMemo(() => {
        return React.createElement(LocalAndRemotePIP, Object.assign({}, pictureInPictureProps, pictureInPictureHandlers));
    }, [pictureInPictureProps, pictureInPictureHandlers]);
    const modalStylesThemed = concatStyleSets(modalStyle, (_a = props.styles) === null || _a === void 0 ? void 0 : _a.modal);
    return React.createElement(Stack, { styles: rootStyles },
        React.createElement(_ModalClone, { isOpen: true, isModeless: true, dragOptions: DRAG_OPTIONS, styles: modalStylesThemed, layerProps: {
                hostId: props.modalLayerHostId
            }, minDragPosition: props.minDragPosition, maxDragPosition: props.maxDragPosition }, 
        // Only render LocalAndRemotePIP when this component is NOT hidden because VideoGallery needs to have
        // possession of the dominant remote participant video stream
        !props.hidden && localAndRemotePIP));
};
//# sourceMappingURL=ModalLocalAndRemotePIP.js.map