// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import React, { useMemo } from 'react';
import { _LocalVideoTile, _RemoteVideoTile, _PictureInPictureInPicture } from "../../../../../react-components/src";
import { useLocale } from '../../localization';
/**
 * @private
 */
export const LocalAndRemotePIP = (props) => {
    var _a, _b;
    const { localParticipant, dominantRemoteParticipant, onCreateLocalStreamView, onDisposeLocalStreamView, onCreateRemoteStreamView, onDisposeRemoteStreamView } = props;
    const localVideoTileProps = useMemo(() => {
        var _a, _b;
        return ({
            onCreateLocalStreamView,
            onDisposeLocalStreamView,
            localVideoViewOptions,
            displayName: localParticipant.displayName,
            showLabel: false,
            showMuteIndicator: false,
            showCameraSwitcherInLocalPreview: false,
            isAvailable: (_a = localParticipant.videoStream) === null || _a === void 0 ? void 0 : _a.isAvailable,
            renderElement: (_b = localParticipant.videoStream) === null || _b === void 0 ? void 0 : _b.renderElement
        });
    }, [localParticipant.displayName, (_a = localParticipant.videoStream) === null || _a === void 0 ? void 0 : _a.isAvailable, (_b = localParticipant.videoStream) === null || _b === void 0 ? void 0 : _b.renderElement, onCreateLocalStreamView, onDisposeLocalStreamView]);
    const remoteVideoTileProps = useMemo(() => {
        var _a, _b, _c;
        return !dominantRemoteParticipant ? undefined : {
            remoteParticipant: dominantRemoteParticipant,
            onCreateRemoteStreamView,
            onDisposeRemoteStreamView,
            remoteVideoViewOptions,
            displayName: dominantRemoteParticipant === null || dominantRemoteParticipant === void 0 ? void 0 : dominantRemoteParticipant.displayName,
            showLabel: false,
            showMuteIndicator: false,
            isAvailable: (_a = dominantRemoteParticipant.videoStream) === null || _a === void 0 ? void 0 : _a.isAvailable,
            isReceiving: (_b = dominantRemoteParticipant.videoStream) === null || _b === void 0 ? void 0 : _b.isReceiving,
            renderElement: (_c = dominantRemoteParticipant.videoStream) === null || _c === void 0 ? void 0 : _c.renderElement,
            userId: dominantRemoteParticipant.userId,
            key: dominantRemoteParticipant.userId
        };
    }, [dominantRemoteParticipant, onCreateRemoteStreamView, onDisposeRemoteStreamView]);
    const locale = useLocale();
    const ariaLabel = locale.strings.callWithChat.pictureInPictureTileAriaLabel;
    const strings = useMemo(() => ({
        rootAriaLabel: ariaLabel
    }), [ariaLabel]);
    // If there are no remote participants, show the local participant as the primary tile
    const primaryTileProps = useMemo(() => ({
        children: remoteVideoTileProps ? React.createElement(_RemoteVideoTile, Object.assign({}, remoteVideoTileProps)) : React.createElement(_LocalVideoTile, Object.assign({}, localVideoTileProps)),
        // TODO: when the calling SDK provides height/width stream information - update this to reflect the stream orientation.
        orientation: 'portrait'
    }), [localVideoTileProps, remoteVideoTileProps]);
    // If we are showing the local participant as the primary tile, show nothing for the secondary tile
    const secondaryTileProps = useMemo(() => remoteVideoTileProps ? {
        children: React.createElement(_LocalVideoTile, Object.assign({}, localVideoTileProps, { personaMinSize: 20 })),
        // TODO: when the calling SDK provides height/width stream information - update this to reflect the stream orientation.
        orientation: 'portrait'
    } : undefined, [localVideoTileProps, remoteVideoTileProps]);
    return React.createElement(_PictureInPictureInPicture, { onClick: props.onClick, strings: strings, primaryTile: primaryTileProps, secondaryTile: secondaryTileProps });
};
const localVideoViewOptions = {
    scalingMode: 'Crop',
    isMirrored: true
};
const remoteVideoViewOptions = {
    scalingMode: 'Crop',
    isMirrored: false
};
//# sourceMappingURL=LocalAndRemotePIP.js.map