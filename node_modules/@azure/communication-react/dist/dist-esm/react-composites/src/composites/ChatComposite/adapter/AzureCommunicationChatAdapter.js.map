{"version":3,"file":"AzureCommunicationChatAdapter.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/ChatComposite/adapter/AzureCommunicationChatAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createStatefulChatClient, ChatClientState, ChatError, StatefulChatClient } from '@internal/chat-stateful-client';\nimport { ChatHandlers, createDefaultChatHandlers } from '@internal/chat-component-bindings';\nimport { ChatMessage, ChatMessageType, ChatThreadClient, SendMessageOptions } from '@azure/communication-chat';\nimport { CommunicationTokenCredential, CommunicationUserIdentifier } from '@azure/communication-common';\nimport type { ChatMessageReceivedEvent, ChatThreadPropertiesUpdatedEvent, ParticipantsAddedEvent, ParticipantsRemovedEvent, ReadReceiptReceivedEvent } from '@azure/communication-chat';\nimport { toFlatCommunicationIdentifier } from '@internal/acs-ui-common';\nimport EventEmitter from 'events';\nimport { ChatAdapter, ChatAdapterState, MessageReadListener, MessageReceivedListener, ParticipantsAddedListener, ParticipantsRemovedListener, TopicChangedListener } from './ChatAdapter';\nimport { AdapterError } from '../../common/adapters';\nimport { useEffect, useRef, useState } from 'react';\nimport { FileMetadata } from '@internal/react-components';\nimport { isValidIdentifier } from '../../CallComposite/utils/Utils';\n\n/**\n * Context of Chat, which is a centralized context for all state updates\n * @private\n */\nexport class ChatContext {\n  private emitter: EventEmitter = new EventEmitter();\n  private state: ChatAdapterState;\n  private threadId: string;\n  constructor(clientState: ChatClientState, threadId: string) {\n    const thread = clientState.threads[threadId];\n    this.threadId = threadId;\n    if (!thread) {\n      throw 'Cannot find threadId, please initialize thread before use!';\n    }\n    this.state = {\n      userId: clientState.userId,\n      displayName: clientState.displayName,\n      thread,\n      latestErrors: clientState.latestErrors\n    };\n  }\n  public onStateChange(handler: (_uiState: ChatAdapterState) => void): void {\n    this.emitter.on('stateChanged', handler);\n  }\n  public offStateChange(handler: (_uiState: ChatAdapterState) => void): void {\n    this.emitter.off('stateChanged', handler);\n  }\n  public setState(state: ChatAdapterState): void {\n    this.state = state;\n    this.emitter.emit('stateChanged', this.state);\n  }\n  public getState(): ChatAdapterState {\n    return this.state;\n  }\n  public setError(error: Error): void {\n    this.setState({\n      ...this.state,\n      error\n    });\n  }\n  public updateClientState(clientState: ChatClientState): void {\n    const thread = clientState.threads[this.threadId];\n    if (!thread) {\n      throw 'Cannot find threadId, please make sure thread state is still in Stateful ChatClient.';\n    }\n    let updatedState: ChatAdapterState = {\n      userId: clientState.userId,\n      displayName: clientState.displayName,\n      thread,\n      latestErrors: clientState.latestErrors\n    };\n    this.setState(updatedState);\n  }\n}\n\n/**\n * @private\n */\nexport class AzureCommunicationChatAdapter implements ChatAdapter {\n  private chatClient: StatefulChatClient;\n  private chatThreadClient: ChatThreadClient;\n  private context: ChatContext;\n  private handlers: ChatHandlers;\n  private emitter: EventEmitter = new EventEmitter();\n  constructor(chatClient: StatefulChatClient, chatThreadClient: ChatThreadClient) {\n    this.bindAllPublicMethods();\n    this.chatClient = chatClient;\n    this.chatThreadClient = chatThreadClient;\n    this.context = new ChatContext(chatClient.getState(), chatThreadClient.threadId);\n    const onStateChange = (clientState: ChatClientState): void => {\n      // unsubscribe when the instance gets disposed\n      if (!this) {\n        chatClient.offStateChange(onStateChange);\n        return;\n      }\n      this.context.updateClientState(clientState);\n    };\n    this.handlers = createDefaultChatHandlers(chatClient, chatThreadClient);\n    this.chatClient.onStateChange(onStateChange);\n    this.subscribeAllEvents();\n  }\n  private bindAllPublicMethods(): void {\n    this.onStateChange = this.onStateChange.bind(this);\n    this.offStateChange = this.offStateChange.bind(this);\n    this.getState = this.getState.bind(this);\n    this.dispose = this.dispose.bind(this);\n    this.fetchInitialData = this.fetchInitialData.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.sendReadReceipt = this.sendReadReceipt.bind(this);\n    this.sendTypingIndicator = this.sendTypingIndicator.bind(this);\n    this.updateMessage = this.updateMessage.bind(this);\n    this.deleteMessage = this.deleteMessage.bind(this);\n    this.removeParticipant = this.removeParticipant.bind(this);\n    this.setTopic = this.setTopic.bind(this);\n    this.loadPreviousChatMessages = this.loadPreviousChatMessages.bind(this);\n    this.on = this.on.bind(this);\n    this.off = this.off.bind(this);\n  }\n  dispose(): void {\n    this.unsubscribeAllEvents();\n  }\n  async fetchInitialData(): Promise<void> {\n    // If get properties fails we dont want to try to get the participants after.\n    await this.asyncTeeErrorToEventEmitter(async () => {\n      await this.chatThreadClient.getProperties();\n      // Fetch all participants who joined before the local user.\n      for await (const _page of this.chatThreadClient.listParticipants().byPage({\n        // Fetch 100 participants per page by default.\n        maxPageSize: 100\n        // eslint-disable-next-line curly\n      }));\n    });\n  }\n  getState(): ChatAdapterState {\n    return this.context.getState();\n  }\n  onStateChange(handler: (state: ChatAdapterState) => void): void {\n    this.context.onStateChange(handler);\n  }\n  offStateChange(handler: (state: ChatAdapterState) => void): void {\n    this.context.offStateChange(handler);\n  }\n  async sendMessage(content: string, options: SendMessageOptions = {}): Promise<void> {\n    await this.asyncTeeErrorToEventEmitter(async () => {\n      await this.handlers.onSendMessage(content, options);\n    });\n  }\n  async sendReadReceipt(chatMessageId: string): Promise<void> {\n    await this.asyncTeeErrorToEventEmitter(async () => {\n      await this.handlers.onMessageSeen(chatMessageId);\n    });\n  }\n  async sendTypingIndicator(): Promise<void> {\n    await this.asyncTeeErrorToEventEmitter(async () => {\n      await this.handlers.onTyping();\n    });\n  }\n  async removeParticipant(userId: string): Promise<void> {\n    await this.asyncTeeErrorToEventEmitter(async () => {\n      await this.handlers.onRemoveParticipant(userId);\n    });\n  }\n  async setTopic(topicName: string): Promise<void> {\n    await this.asyncTeeErrorToEventEmitter(async () => {\n      await this.handlers.updateThreadTopicName(topicName);\n    });\n  }\n  async loadPreviousChatMessages(messagesToLoad: number): Promise<boolean> {\n    return await this.asyncTeeErrorToEventEmitter(async () => {\n      return await this.handlers.onLoadPreviousChatMessages(messagesToLoad);\n    });\n  }\n  async updateMessage(messageId: string, content: string, metadata?: Record<string, string>, options?: {\n    attachedFilesMetadata?: FileMetadata[];\n  }): Promise<void> {\n    return await this.asyncTeeErrorToEventEmitter(async () => {\n      return await this.handlers.onUpdateMessage(messageId, content);\n    });\n  }\n  async deleteMessage(messageId: string): Promise<void> {\n    return await this.asyncTeeErrorToEventEmitter(async () => {\n      return await this.handlers.onDeleteMessage(messageId);\n    });\n  }\n  private messageReceivedListener(event: ChatMessageReceivedEvent): void {\n    const message = convertEventToChatMessage(event);\n    this.emitter.emit('messageReceived', {\n      message\n    });\n    const currentUserId = toFlatCommunicationIdentifier(this.chatClient.getState().userId);\n    if (message?.sender && toFlatCommunicationIdentifier(message.sender) === currentUserId) {\n      this.emitter.emit('messageSent', {\n        message\n      });\n    }\n  }\n  private messageReadListener({\n    chatMessageId,\n    recipient\n  }: ReadReceiptReceivedEvent): void {\n    const message = this.getState().thread.chatMessages[chatMessageId];\n    if (message) {\n      this.emitter.emit('messageRead', {\n        message,\n        readBy: recipient\n      });\n    }\n  }\n  private participantsAddedListener({\n    addedBy,\n    participantsAdded\n  }: ParticipantsAddedEvent): void {\n    this.emitter.emit('participantsAdded', {\n      addedBy,\n      participantsAdded\n    });\n  }\n  private participantsRemovedListener({\n    removedBy,\n    participantsRemoved\n  }: ParticipantsRemovedEvent): void {\n    this.emitter.emit('participantsRemoved', {\n      removedBy,\n      participantsRemoved\n    });\n  }\n  private chatThreadPropertiesUpdatedListener(event: ChatThreadPropertiesUpdatedEvent): void {\n    this.emitter.emit('topicChanged', {\n      topic: event.properties.topic\n    });\n  }\n  private subscribeAllEvents(): void {\n    this.chatClient.on('chatThreadPropertiesUpdated', this.chatThreadPropertiesUpdatedListener.bind(this));\n    this.chatClient.on('participantsAdded', this.participantsAddedListener.bind(this));\n    this.chatClient.on('participantsRemoved', this.participantsRemovedListener.bind(this));\n    this.chatClient.on('chatMessageReceived', this.messageReceivedListener.bind(this));\n    this.chatClient.on('readReceiptReceived', this.messageReadListener.bind(this));\n    this.chatClient.on('participantsRemoved', this.participantsRemovedListener.bind(this));\n  }\n  private unsubscribeAllEvents(): void {\n    this.chatClient.off('chatThreadPropertiesUpdated', this.chatThreadPropertiesUpdatedListener.bind(this));\n    this.chatClient.off('participantsAdded', this.participantsAddedListener.bind(this));\n    this.chatClient.off('participantsRemoved', this.participantsRemovedListener.bind(this));\n    this.chatClient.off('chatMessageReceived', this.messageReceivedListener.bind(this));\n    this.chatClient.off('readReceiptReceived', this.messageReadListener.bind(this));\n    this.chatClient.off('participantsRemoved', this.participantsRemovedListener.bind(this));\n  }\n  on(event: 'messageReceived', listener: MessageReceivedListener): void;\n  on(event: 'messageSent', listener: MessageReceivedListener): void;\n  on(event: 'messageRead', listener: MessageReadListener): void;\n  on(event: 'participantsAdded', listener: ParticipantsAddedListener): void;\n  on(event: 'participantsRemoved', listener: ParticipantsRemovedListener): void;\n  on(event: 'topicChanged', listener: TopicChangedListener): void;\n  on(event: 'error', listener: (e: AdapterError) => void): void;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  on(event: string, listener: (e: any) => void): void {\n    this.emitter.on(event, listener);\n  }\n  off(event: 'messageReceived', listener: MessageReceivedListener): void;\n  off(event: 'messageSent', listener: MessageReceivedListener): void;\n  off(event: 'messageRead', listener: MessageReadListener): void;\n  off(event: 'participantsAdded', listener: ParticipantsAddedListener): void;\n  off(event: 'participantsRemoved', listener: ParticipantsRemovedListener): void;\n  off(event: 'topicChanged', listener: TopicChangedListener): void;\n  off(event: 'error', listener: (e: AdapterError) => void): void;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  off(event: string, listener: (e: any) => void): void {\n    this.emitter.off(event, listener);\n  }\n  private async asyncTeeErrorToEventEmitter<T>(f: () => Promise<T>): Promise<T> {\n    try {\n      return await f();\n    } catch (error) {\n      if (isChatError((error as Error))) {\n        this.emitter.emit('error', (error as AdapterError));\n      }\n      throw error;\n    }\n  }\n}\nconst convertEventToChatMessage = (event: ChatMessageReceivedEvent): ChatMessage => {\n  return {\n    id: event.id,\n    version: event.version,\n    content: {\n      message: event.message\n    },\n    type: convertEventType(event.type),\n    sender: event.sender,\n    senderDisplayName: event.senderDisplayName,\n    sequenceId: '',\n    createdOn: new Date(event.createdOn)\n  };\n};\n\n// only text/html message type will be received from event\nconst convertEventType = (type: string): ChatMessageType => {\n  const lowerCaseType = type.toLowerCase();\n  if (lowerCaseType === 'richtext/html' || lowerCaseType === 'html') {\n    return 'html';\n  } else {\n    return 'text';\n  }\n};\n\n/**\n * Arguments for creating the Azure Communication Services implementation of {@link ChatAdapter}.\n *\n * @public\n */\nexport type AzureCommunicationChatAdapterArgs = {\n  endpoint: string;\n  userId: CommunicationUserIdentifier;\n  displayName: string;\n  credential: CommunicationTokenCredential;\n  threadId: string;\n};\n\n/**\n * Create a {@link ChatAdapter} backed by Azure Communication Services.\n *\n * This is the default implementation of {@link ChatAdapter} provided by this library.\n *\n * @public\n */\nexport const createAzureCommunicationChatAdapter = async ({\n  endpoint: endpointUrl,\n  userId,\n  displayName,\n  credential,\n  threadId\n}: AzureCommunicationChatAdapterArgs): Promise<ChatAdapter> => {\n  if (!isValidIdentifier(userId)) {\n    throw new Error('Provided userId is invalid. Please provide valid identifier object.');\n  }\n  const chatClient = createStatefulChatClient({\n    userId,\n    displayName,\n    endpoint: endpointUrl,\n    credential: credential\n  });\n  const chatThreadClient = await chatClient.getChatThreadClient(threadId);\n  await chatClient.startRealtimeNotifications();\n  const adapter = await createAzureCommunicationChatAdapterFromClient(chatClient, chatThreadClient);\n  return adapter;\n};\n\n/**\n * A custom React hook to simplify the creation of {@link ChatAdapter}.\n *\n * Similar to {@link createAzureCommunicationChatAdapter}, but takes care of asynchronous\n * creation of the adapter internally.\n *\n * Allows arguments to be undefined so that you can respect the rule-of-hooks and pass in arguments\n * as they are created. The adapter is only created when all arguments are defined.\n *\n * Note that you must memoize the arguments to avoid recreating adapter on each render.\n * See storybook for typical usage examples.\n *\n * @public\n */\nexport const useAzureCommunicationChatAdapter = (args: Partial<AzureCommunicationChatAdapterArgs>, afterCreate?: (adapter: ChatAdapter) => Promise<ChatAdapter>, beforeDispose?: (adapter: ChatAdapter) => Promise<void>): ChatAdapter | undefined => {\n  const {\n    credential,\n    displayName,\n    endpoint,\n    threadId,\n    userId\n  } = args;\n\n  // State update needed to rerender the parent component when a new adapter is created.\n  const [adapter, setAdapter] = useState<ChatAdapter | undefined>(undefined);\n  // Ref needed for cleanup to access the old adapter created asynchronously.\n  const adapterRef = useRef<ChatAdapter | undefined>(undefined);\n  const afterCreateRef = useRef<((adapter: ChatAdapter) => Promise<ChatAdapter>) | undefined>(undefined);\n  const beforeDisposeRef = useRef<((adapter: ChatAdapter) => Promise<void>) | undefined>(undefined);\n  // These refs are updated on *each* render, so that the latest values\n  // are used in the `useEffect` closures below.\n  // Using a Ref ensures that new values for the callbacks do not trigger the\n  // useEffect blocks, and a new adapter creation / distruction is not triggered.\n  afterCreateRef.current = afterCreate;\n  beforeDisposeRef.current = beforeDispose;\n  useEffect(() => {\n    if (!credential || !displayName || !endpoint || !threadId || !userId) {\n      return;\n    }\n    (async () => {\n      if (adapterRef.current) {\n        // Dispose the old adapter when a new one is created.\n        //\n        // This clean up function uses `adapterRef` because `adapter` can not be added to the dependency array of\n        // this `useEffect` -- we do not want to trigger a new adapter creation because of the first adapter\n        // creation.\n        if (beforeDisposeRef.current) {\n          await beforeDisposeRef.current(adapterRef.current);\n        }\n        adapterRef.current.dispose();\n        adapterRef.current = undefined;\n      }\n      let newAdapter = await createAzureCommunicationChatAdapter({\n        credential,\n        displayName,\n        endpoint,\n        threadId,\n        userId\n      });\n      if (afterCreateRef.current) {\n        newAdapter = await afterCreateRef.current(newAdapter);\n      }\n      adapterRef.current = newAdapter;\n      setAdapter(newAdapter);\n    })();\n  },\n  // Explicitly list all arguments so that caller doesn't have to memoize the `args` object.\n  [adapterRef, afterCreateRef, beforeDisposeRef, credential, displayName, endpoint, threadId, userId]);\n\n  // Dispose any existing adapter when the component unmounts.\n  useEffect(() => {\n    return () => {\n      (async () => {\n        if (adapterRef.current) {\n          if (beforeDisposeRef.current) {\n            await beforeDisposeRef.current(adapterRef.current);\n          }\n          adapterRef.current.dispose();\n          adapterRef.current = undefined;\n        }\n      })();\n    };\n  }, []);\n  return adapter;\n};\n\n/**\n * Create a {@link ChatAdapter} using the provided {@link StatefulChatClient}.\n *\n * Useful if you want to keep a reference to {@link StatefulChatClient}.\n * Consider using {@link createAzureCommunicationChatAdapter} for a simpler API.\n *\n * @public\n */\nexport const createAzureCommunicationChatAdapterFromClient = async (chatClient: StatefulChatClient, chatThreadClient: ChatThreadClient): Promise<ChatAdapter> => {\n  return new AzureCommunicationChatAdapter(chatClient, chatThreadClient);\n};\nconst isChatError = (e: Error): e is ChatError => {\n  return e['target'] !== undefined && e['innerError'] !== undefined;\n};\"../../../../../chat-stateful-client/src\"\"../../../../../chat-component-bindings/src\"\"../../../../../acs-ui-common/src\"\"../../../../../react-components/src\""]}