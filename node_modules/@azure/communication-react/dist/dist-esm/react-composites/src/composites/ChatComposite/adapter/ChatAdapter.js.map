{"version":3,"file":"ChatAdapter.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/ChatComposite/adapter/ChatAdapter.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { ChatMessage, ChatParticipant, SendMessageOptions } from '@azure/communication-chat';\nimport type { CommunicationIdentifierKind, CommunicationUserKind } from '@azure/communication-common';\nimport { ChatThreadClientState } from '@internal/chat-stateful-client';\nimport type { AdapterError, AdapterErrors, AdapterState, Disposable } from '../../common/adapters';\n/**\n * {@link ChatAdapter} state for pure UI purposes.\n *\n * @public\n */\nexport type ChatAdapterUiState = {\n  // FIXME(Delete?)\n  // Self-contained state for composite\n  error?: Error;\n};\n\n/**\n * {@link ChatAdapter} state inferred from Azure Communication Services backend.\n *\n * @public\n */\nexport type ChatCompositeClientState = {\n  userId: CommunicationIdentifierKind;\n  displayName: string;\n  thread: ChatThreadClientState;\n  /**\n   * Latest error encountered for each operation performed via the adapter.\n   */\n  latestErrors: AdapterErrors;\n};\n\n/**\n * {@link ChatAdapter} state.\n *\n * @public\n */\nexport type ChatAdapterState = ChatAdapterUiState & ChatCompositeClientState;\n\n/**\n * Functionality for managing the current chat thread.\n *\n * @public\n */\nexport interface ChatAdapterThreadManagement {\n  /**\n   * Fetch initial state for the Chat adapter.\n   *\n   * Performs the minimal fetch necessary for ChatComposite and API methods.\n   */\n  fetchInitialData(): Promise<void>;\n  /**\n   * Send a message in the thread.\n   */\n  sendMessage(content: string, options?: SendMessageOptions): Promise<void>;\n  /**\n   * Send a read receipt for a message.\n   */\n  sendReadReceipt(chatMessageId: string): Promise<void>;\n  /**\n   * Send typing indicator in the thread.\n   */\n  sendTypingIndicator(): Promise<void>;\n  /**\n   * Remove a participant in the thread.\n   */\n  removeParticipant(userId: string): Promise<void>;\n  /**\n   * Set the topic for the thread.\n   */\n  setTopic(topicName: string): Promise<void>;\n  /**\n   * Update a message content.\n   */\n  updateMessage(messageId: string, content: string, metadata?: Record<string, string>): Promise<void>;\n  /**\n   * Delete a message in the thread.\n   */\n  deleteMessage(messageId: string): Promise<void>;\n  /**\n   * Load more previous messages in the chat thread history.\n   *\n   * @remarks\n   * This method is usually used to control incremental fetch/infinite scroll\n   *\n   */\n  loadPreviousChatMessages(messagesToLoad: number): Promise<boolean>;\n}\n\n/**\n * Chat composite events that can be subscribed to.\n *\n * @public\n */\nexport interface ChatAdapterSubscribers {\n  /**\n   * Subscribe function for 'messageReceived' event.\n   */\n  on(event: 'messageReceived', listener: MessageReceivedListener): void;\n  /**\n   * Subscribe function for 'messageSent' event.\n   */\n  on(event: 'messageSent', listener: MessageSentListener): void;\n  /**\n   * Subscribe function for 'messageRead' event.\n   */\n  on(event: 'messageRead', listener: MessageReadListener): void;\n  /**\n   * Subscribe function for 'participantsAdded' event.\n   */\n  on(event: 'participantsAdded', listener: ParticipantsAddedListener): void;\n  /**\n   * Subscribe function for 'participantsRemoved' event.\n   */\n  on(event: 'participantsRemoved', listener: ParticipantsRemovedListener): void;\n  /**\n   * Subscribe function for 'topicChanged' event.\n   */\n  on(event: 'topicChanged', listener: TopicChangedListener): void;\n  /**\n   * Subscribe function for 'error' event.\n   */\n  on(event: 'error', listener: (e: AdapterError) => void): void;\n\n  /**\n   * Unsubscribe function for 'messageReceived' event.\n   */\n  off(event: 'messageReceived', listener: MessageReceivedListener): void;\n  /**\n   * Unsubscribe function for 'messageSent' event.\n   */\n  off(event: 'messageSent', listener: MessageSentListener): void;\n  /**\n   * Unsubscribe function for 'messageRead' event.\n   */\n  off(event: 'messageRead', listener: MessageReadListener): void;\n  /**\n   * Unsubscribe function for 'participantsAdded' event.\n   */\n  off(event: 'participantsAdded', listener: ParticipantsAddedListener): void;\n  /**\n   * Unsubscribe function for 'participantsRemoved' event.\n   */\n  off(event: 'participantsRemoved', listener: ParticipantsRemovedListener): void;\n  /**\n   * Unsubscribe function for 'topicChanged' event.\n   */\n  off(event: 'topicChanged', listener: TopicChangedListener): void;\n  /**\n   * Unsubscribe function for 'error' event.\n   */\n  off(event: 'error', listener: (e: AdapterError) => void): void;\n}\n\n/**\n * {@link ChatComposite} Adapter interface.\n *\n * @public\n */\nexport type ChatAdapter = ChatAdapterThreadManagement & AdapterState<ChatAdapterState> & Disposable & ChatAdapterSubscribers;\n\n/**\n * Callback for {@link ChatAdapterSubscribers} 'messageReceived' event.\n *\n * @public\n */\nexport type MessageReceivedListener = (event: {\n  message: ChatMessage;\n}) => void;\n\n/**\n * Callback for {@link ChatAdapterSubscribers} 'messageSent' event.\n *\n * @public\n */\nexport type MessageSentListener = MessageReceivedListener;\n\n/**\n * Callback for {@link ChatAdapterSubscribers} 'messageRead' event.\n *\n * @public\n */\nexport type MessageReadListener = (event: {\n  message: ChatMessage;\n  readBy: CommunicationUserKind;\n}) => void;\n\n/**\n * Callback for {@link ChatAdapterSubscribers} 'participantsAdded' event.\n *\n * @public\n */\nexport type ParticipantsAddedListener = (event: {\n  participantsAdded: ChatParticipant[];\n  addedBy: ChatParticipant;\n}) => void;\n\n/**\n * Callback for {@link ChatAdapterSubscribers} 'participantsRemoved' event.\n *\n * @public\n */\nexport type ParticipantsRemovedListener = (event: {\n  participantsRemoved: ChatParticipant[];\n  removedBy: ChatParticipant;\n}) => void;\n\n/**\n * Callback for {@link ChatAdapterSubscribers} 'topicChanged' event.\n *\n * @public\n */\nexport type TopicChangedListener = (event: {\n  topic: string;\n}) => void;\"../../../../../chat-stateful-client/src\""]}