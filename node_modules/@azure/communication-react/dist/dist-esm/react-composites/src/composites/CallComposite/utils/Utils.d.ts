import { CallAdapterState, CallCompositePage } from '../adapter/CallAdapter';
import { CallControlOptions } from '../types/CallControlOptions';
import { CallState } from "../../../../../calling-stateful-client/src";
import { CommunicationIdentifier } from '@azure/communication-common';
/**
 * @private
 */
export declare const isCameraOn: (state: CallAdapterState) => boolean;
/**
 * Reduce the set of call controls visible on mobile.
 * For example do not show screenshare button.
 *
 * @private
 */
export declare const reduceCallControlsForMobile: (callControlOptions: CallControlOptions | boolean | undefined) => CallControlOptions | false;
/**
 * type definition for conditional-compilation
 */
declare type GetCallCompositePageFunction = ((call: CallState | undefined, previousCall: CallState | undefined) => CallCompositePage);
/**
 * Get the current call composite page based on the current call composite state
 *
 * @param Call - The current call state
 * @param previousCall - The state of the most recent previous call that has ended.
 *
 * @remarks - The previousCall state is needed to determine if the call has ended.
 * When the call ends a new call object is created, and so we must lookback at the
 * previous call state to understand how the call has ended. If there is no previous
 * call we know that this is a fresh call and can display the configuration page.
 *
 * @private
 */
export declare const getCallCompositePage: GetCallCompositePageFunction;
/** @private */
export declare const IsCallEndedPage: (page: 'accessDeniedTeamsMeeting' | 'call' | 'configuration' | 'joinCallFailedDueToNoNetwork' | 'leftCall' | 'lobby' | 'removedFromCall') => boolean;
/**
 * Creates a new call control options object and sets the correct values for disabling
 * the buttons provided in the `disabledControls` array.
 * Returns a new object without changing the original object.
 * @param callControlOptions options for the call control component that need to be modified.
 * @param disabledControls An array of controls to disable.
 * @returns a copy of callControlOptions with disabledControls disabled
 * @private
 */
export declare const disableCallControls: (callControlOptions: CallControlOptions | boolean | undefined, disabledControls: (keyof CallControlOptions)[]) => CallControlOptions | boolean | undefined;
/**
 * Check if a disabled object is provided for a button and returns if the button is disabled.
 * A button is only disabled if is explicitly set to disabled.
 *
 * @param option
 * @returns whether a button is disabled
 * @private
 */
export declare const isDisabled: (option: boolean | {
    disabled: boolean;
} | undefined) => boolean;
/**
 * Check if an object is identifier.
 *
 * @param identifier
 * @returns whether an identifier is one of identifier types (for runtime validation)
 * @private
 */
export declare const isValidIdentifier: (identifier: CommunicationIdentifier) => boolean;
/**
 * Check if we are using safari browser
 * @private
 */
export declare const _isSafari: (environmentInfo: undefined) => boolean;
export {};
//# sourceMappingURL=Utils.d.ts.map