// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { EventEmitter } from 'events';
import { nanoid } from 'nanoid';
import { _MAX_EVENT_LISTENERS } from "../../../../../acs-ui-common/src";
/**
 * A wrapper object for a file that is being uploaded.
 * Provides common functions for updating the upload progress, canceling an upload etc.
 * @private
 */
export class FileUpload {
    constructor(data) {
        this._emitter = new EventEmitter();
        this._emitter.setMaxListeners(_MAX_EVENT_LISTENERS);
        this.id = nanoid();
        if (data instanceof File) {
            this.file = data;
        }
        else {
            this.metadata = data;
        }
        this.fileName = data.name;
    }
    notifyUploadProgressChanged(value) {
        this._emitter.emit('uploadProgressChange', this.id, value);
    }
    notifyUploadCompleted(metadata) {
        this._emitter.emit('uploadComplete', this.id, metadata);
    }
    notifyUploadFailed(message) {
        this._emitter.emit('uploadFail', this.id, message);
    }
    /**
     * File upload event subscriber.
     * @param event - {@link FileUploadEvents}
     * @param listener - {@link FileUploadEventListener}
     */
    on(event, listener) {
        this._emitter.addListener(event, listener);
    }
    /**
     * File upload event unsubscriber.
     * @param event - {@link FileUploadEvents}
     * @param listener - {@link FileUploadEventListener}
     */
    off(event, listener) {
        this._emitter.removeListener(event, listener);
    }
}
//# sourceMappingURL=FileUpload.js.map