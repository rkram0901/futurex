{"version":3,"file":"ParticipantSubcriber.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/adapter/ParticipantSubcriber.ts"],"names":[],"mappings":"AAKA;;GAEG;AACH,MAAM,OAAO,qBAAqB;IAGhC,YAAY,WAA8B,EAAE,OAAqB;QAKzD,0BAAqB,GAAG,GAAS,EAAE;YACzC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBAClC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;gBAC1C,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO;aAClC,CAAC,CAAC;QACL,CAAC,CAAC;QACM,8BAAyB,GAAG,GAAS,EAAE;YAC7C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE;gBACtC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;gBAC1C,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW;aAC1C,CAAC,CAAC;QACL,CAAC,CAAC;QACM,6BAAwB,GAAG,GAAS,EAAE;YAC5C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBACrC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;gBAC1C,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;aACxC,CAAC,CAAC;QACL,CAAC,CAAC;QACM,+BAA0B,GAAG,CAAC,KAGrC,EAAQ,EAAE;YACT,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC;QA3BA,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,0BAA0B,EAAE,CAAC;IACpC,CAAC;IAyBO,0BAA0B;QAChC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAClE,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,oBAAoB,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAC1E,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,mBAAmB,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACxE,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,qBAAqB,EAAE,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAC9E,CAAC;IACM,cAAc;QACnB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAC3E,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACzE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAC/E,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { RemoteParticipant, RemoteVideoStream } from '@azure/communication-calling';\nimport EventEmitter from 'events';\n\n/**\n * @private\n */\nexport class ParticipantSubscriber {\n  private participant: RemoteParticipant;\n  private emitter: EventEmitter;\n  constructor(participant: RemoteParticipant, emitter: EventEmitter) {\n    this.participant = participant;\n    this.emitter = emitter;\n    this.subscribeParticipantEvents();\n  }\n  private isMutedChangedHandler = (): void => {\n    this.emitter.emit('isMutedChanged', {\n      participantId: this.participant.identifier,\n      isMuted: this.participant.isMuted\n    });\n  };\n  private displayNameChangedHandler = (): void => {\n    this.emitter.emit('displayNameChanged', {\n      participantId: this.participant.identifier,\n      displayName: this.participant.displayName\n    });\n  };\n  private isSpeakingChangedHandler = (): void => {\n    this.emitter.emit('isSpeakingChanged', {\n      participantId: this.participant.identifier,\n      isSpeaking: this.participant.isSpeaking\n    });\n  };\n  private videoStreamsUpdatedHandler = (event: {\n    added: RemoteVideoStream[];\n    removed: RemoteVideoStream[];\n  }): void => {\n    this.emitter.emit('videoStreamsUpdated', event);\n  };\n  private subscribeParticipantEvents(): void {\n    this.participant.on('isMutedChanged', this.isMutedChangedHandler);\n    this.participant.on('displayNameChanged', this.displayNameChangedHandler);\n    this.participant.on('isSpeakingChanged', this.isSpeakingChangedHandler);\n    this.participant.on('videoStreamsUpdated', this.videoStreamsUpdatedHandler);\n  }\n  public unsubscribeAll(): void {\n    this.participant.off('isMutedChanged', this.isMutedChangedHandler);\n    this.participant.off('displayNameChanged', this.displayNameChangedHandler);\n    this.participant.off('isSpeakingChanged', this.isSpeakingChangedHandler);\n    this.participant.off('videoStreamsUpdated', this.videoStreamsUpdatedHandler);\n  }\n}\n\n/**\n * @private\n */\nexport type ParticipantEvent = 'isMutedChanged' | 'displayNameChanged' | 'isSpeakingChanged' | 'videoStreamsUpdated';"]}