var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { Stack } from '@fluentui/react';
import { _DrawerMenu, useTheme } from "../../../../react-components/src";
import React, { useMemo, useState } from 'react';
import { CallAdapterProvider } from '../CallComposite/adapter/CallAdapterProvider';
import { ChatComposite } from '../ChatComposite';
import { paneBodyContainer, scrollableContainer, scrollableContainerContents } from '../common/styles/ParticipantContainer.styles';
import { SidePaneHeader } from '../common/SidePaneHeader';
import { useCallWithChatCompositeStrings } from './hooks/useCallWithChatCompositeStrings';
import { ModalLocalAndRemotePIP } from '../common/ModalLocalAndRemotePIP';
import { PeoplePaneContent } from '../common/PeoplePaneContent';
import { TabHeader } from '../common/TabHeader';
import { getPipStyles } from '../common/styles/ModalLocalAndRemotePIP.styles';
import { useMinMaxDragPosition } from '../common/utils';
import { availableSpaceStyles, hiddenStyles, sidePaneStyles, sidePaneTokens } from '../common/styles/Pane.styles';
import { isDisabled } from '../CallComposite/utils';
import { drawerContainerStyles } from '../CallComposite/styles/CallComposite.styles';
/**
 * Pane that is used to store chat and people for CallWithChat composite
 * @private
 */
export const CallWithChatPane = (props) => {
    var _a, _b;
    const [drawerMenuItems, setDrawerMenuItems] = useState([]);
    const hidden = props.activePane === 'none';
    const paneStyles = hidden ? hiddenStyles : props.mobileView ? availableSpaceStyles : sidePaneStyles;
    const callWithChatStrings = useCallWithChatCompositeStrings();
    const theme = useTheme();
    const header = props.activePane === 'none' ? null : props.mobileView ? React.createElement(TabHeader, Object.assign({}, props, { strings: callWithChatStrings, activeTab: props.activePane, disableChatButton: isDisabled((_a = props.callControls) === null || _a === void 0 ? void 0 : _a.chatButton), disablePeopleButton: isDisabled((_b = props.callControls) === null || _b === void 0 ? void 0 : _b.peopleButton) })) : React.createElement(SidePaneHeader, Object.assign({}, props, { strings: callWithChatStrings, headingText: props.activePane === 'chat' ? callWithChatStrings.chatPaneTitle : props.activePane === 'people' ? callWithChatStrings.peoplePaneTitle : '' }));
    const chatContent = React.createElement(ChatComposite, Object.assign({}, props.chatCompositeProps, { adapter: props.chatAdapter, fluentTheme: theme, options: {
            topic: false
        }, onFetchAvatarPersonaData: props.onFetchAvatarPersonaData }));
    /**
     * In a CallWithChat when a participant is removed, we must remove them from both
     * the call and the chat thread.
     */
    const removeParticipantFromCallWithChat = (participantId) => __awaiter(void 0, void 0, void 0, function* () {
        yield props.callAdapter.removeParticipant(participantId);
        yield props.chatAdapter.removeParticipant(participantId);
    });
    const peopleContent = React.createElement(CallAdapterProvider, { adapter: props.callAdapter },
        React.createElement(PeoplePaneContent, Object.assign({ active: props.activePane === 'people' }, props, { onRemoveParticipant: removeParticipantFromCallWithChat, setDrawerMenuItems: setDrawerMenuItems, strings: callWithChatStrings })));
    const minMaxDragPosition = useMinMaxDragPosition(props.modalLayerHostId, props.rtl);
    const pipStyles = useMemo(() => getPipStyles(theme), [theme]);
    const dataUiId = props.activePane === 'chat' ? 'call-with-chat-composite-chat-pane' : props.activePane === 'people' ? 'call-with-chat-composite-people-pane' : '';
    return React.createElement(Stack, { verticalFill: true, grow: true, styles: paneStyles, "data-ui-id": dataUiId, tokens: props.mobileView ? {} : sidePaneTokens },
        header,
        React.createElement(Stack.Item, { verticalFill: true, grow: true, styles: paneBodyContainer },
            React.createElement(Stack, { horizontal: true, styles: scrollableContainer },
                React.createElement(Stack.Item, { verticalFill: true, styles: scrollableContainerContents },
                    React.createElement(Stack, { styles: props.activePane === 'chat' ? availableSpaceStyles : hiddenStyles }, chatContent),
                    props.activePane === 'people' && peopleContent))),
        props.mobileView && React.createElement(CallAdapterProvider, { adapter: props.callAdapter },
            React.createElement(ModalLocalAndRemotePIP, { modalLayerHostId: props.modalLayerHostId, hidden: hidden, styles: pipStyles, minDragPosition: minMaxDragPosition.minDragPosition, maxDragPosition: minMaxDragPosition.maxDragPosition })),
        drawerMenuItems.length > 0 && React.createElement(Stack, { styles: drawerContainerStyles() },
            React.createElement(_DrawerMenu, { onLightDismiss: () => setDrawerMenuItems([]), items: drawerMenuItems })));
};
//# sourceMappingURL=CallWithChatPane.js.map