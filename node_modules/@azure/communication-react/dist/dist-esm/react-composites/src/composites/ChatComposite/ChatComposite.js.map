{"version":3,"file":"ChatComposite.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-composites/src/composites/ChatComposite/ChatComposite.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,YAAY,EAAsB,MAAM,yBAAyB,CAAC;AAG3E,OAAO,EAAE,mBAAmB,EAAE,MAAM,+BAA+B,CAAC;AACpE,OAAO,EAAE,wBAAwB,EAAE,MAAM,sBAAsB,CAAC;AAChE,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAoD1C;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,KAAyB,EAAe,EAAE;IACtE,MAAM,EACJ,OAAO,EACP,OAAO,EACP,wBAAwB,EACxB,uBAAuB,EACvB,eAAe,EACf,2BAA2B,EAC5B,GAAG,KAAK,CAAC;IACV,MAAM,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,SAAS,CAAC;IAEpD;;;OAGG;IACH,4EAA4E;IAC5E,MAAM,kBAAkB,GAAG,GAAG,EAAE;QAC9B,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC;IACF,OAAO,6BAAK,SAAS,EAAE,wBAAwB;QAC3C,oBAAC,YAAY,oBAAK,KAAK;YACrB,oBAAC,mBAAmB,IAAC,OAAO,EAAE,OAAO;gBACnC,oBAAC,UAAU,kBAAC,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,wBAAwB,EAAE,wBAAwB,EAAE,uBAAuB,EAAE,uBAAuB,EAAE,eAAe,EAAE,eAAe,EAAE,2BAA2B,EAAE,2BAA2B,IAAM,kBAAkB,EAAE,EAAI,CAChQ,CACT,CACX,CAAC;AACX,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommunicationParticipant, MessageRenderer, MessageProps } from '@internal/react-components';\nimport React from 'react';\nimport { BaseProvider, BaseCompositeProps } from '../common/BaseComposite';\nimport { ChatCompositeIcons } from '../common/icons';\nimport { ChatAdapter } from './adapter/ChatAdapter';\nimport { ChatAdapterProvider } from './adapter/ChatAdapterProvider';\nimport { chatScreenContainerStyle } from './styles/Chat.styles';\nimport { ChatScreen } from './ChatScreen';\n/**\n * Props for {@link ChatComposite}.\n *\n * @public\n */\nexport interface ChatCompositeProps extends BaseCompositeProps<ChatCompositeIcons> {\n  /**\n   * An adapter provides logic and data to the composite.\n   * Composite can also be controlled using the adapter.\n   */\n  adapter: ChatAdapter;\n  /**\n   * `(messageProps: MessageProps, defaultOnRender?: MessageRenderer) => JSX.Element`\n   * A callback for customizing the message renderer.\n   */\n  onRenderMessage?: (messageProps: MessageProps, defaultOnRender?: MessageRenderer) => JSX.Element;\n  /**\n   * `(typingUsers: CommunicationParticipant[]) => JSX.Element`\n   * A callback for customizing the typing indicator renderer.\n   */\n  onRenderTypingIndicator?: (typingUsers: CommunicationParticipant[]) => JSX.Element;\n  /**\n   * Flags to enable/disable visual elements of the {@link ChatComposite}.\n   */\n  options?: ChatCompositeOptions;\n}\n\n/**\n * Optional features of the {@link ChatComposite}.\n *\n * @public\n */\nexport type ChatCompositeOptions = {\n  /**\n   * Surface Azure Communication Services backend errors in the UI with {@link @azure/communication-react#ErrorBar}.\n   * Hide or show the error bar.\n   * @defaultValue true\n   */\n  errorBar?: boolean;\n  /**\n   * Show or hide the topic at the top of the chat. Hidden if set to `false`\n   * @defaultValue true\n   */\n  topic?: boolean;\n  /**\n   * enumerable to determine if the input box has focus on render or not.\n   * When undefined nothing has focus on render\n   */\n  autoFocus?: 'sendBoxTextField';\n};\n\n/**\n * A customizable UI composite for the chat experience.\n *\n * @remarks Chat composite min width and height are respectively 17.5rem and 20rem (280px and 320px, with default rem at 16px)\n *\n * @public\n */\nexport const ChatComposite = (props: ChatCompositeProps): JSX.Element => {\n  const {\n    adapter,\n    options,\n    onFetchAvatarPersonaData,\n    onRenderTypingIndicator,\n    onRenderMessage,\n    onFetchParticipantMenuItems\n  } = props;\n  const formFactor = props['formFactor'] || 'desktop';\n\n  /**\n   * @TODO Remove this function and pass the props directly when file-sharing is promoted to stable.\n   * @private\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  const fileSharingOptions = () => {\n    return {};\n  };\n  return <div className={chatScreenContainerStyle}>\n      <BaseProvider {...props}>\n        <ChatAdapterProvider adapter={adapter}>\n          <ChatScreen formFactor={formFactor} options={options} onFetchAvatarPersonaData={onFetchAvatarPersonaData} onRenderTypingIndicator={onRenderTypingIndicator} onRenderMessage={onRenderMessage} onFetchParticipantMenuItems={onFetchParticipantMenuItems} {...fileSharingOptions()} />\n        </ChatAdapterProvider>\n      </BaseProvider>\n    </div>;\n};\"../../../../react-components/src\""]}