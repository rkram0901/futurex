{"version":3,"file":"adapters.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-composites/src/composites/common/adapters.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Functionality for interfacing with Composite adapter state.\n *\n * @public\n */\nexport interface AdapterState<TState> {\n  /** Subscribes the handler to stateChanged events. */\n  onStateChange(handler: (state: TState) => void): void;\n  /** Unsubscribes the handler to stateChanged events. */\n  offStateChange(handler: (state: TState) => void): void;\n  /** Get the current State */\n  getState(): TState;\n}\n\n/**\n * Functionality for correctly disposing a Composite.\n *\n * @public\n */\nexport interface Disposable {\n  /** Dispose of the Composite */\n  dispose(): void;\n}\n\n/**\n * Error reported via error events and stored in adapter state.\n *\n * @public\n */\nexport interface AdapterError extends Error {\n  /**\n   * The operation that failed.\n   */\n  target: string;\n  /**\n   * Error thrown by the failed operation.\n   */\n  innerError: Error;\n  /**\n   * Timestamp added to the error in the adapter implementation.\n   */\n  timestamp: Date;\n}\n\n/**\n * Adapters stores the latest error for each operation in the state.\n *\n * `target` is an adapter defined string for each unique operation performed by the adapter.\n *\n * @public\n */\nexport type AdapterErrors = {\n  [target: string]: AdapterError;\n};"]}