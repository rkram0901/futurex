{"version":3,"file":"LocalizationProvider.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-composites/src/composites/localization/LocalizationProvider.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AACzD,OAAO,EAAmB,oBAAoB,IAAI,6BAA6B,EAAE,yCAAmC;AACpH,OAAO,EAAE,sBAAsB,EAAE,MAAM,WAAW,CAAC;AA4CnD;;;;GAIG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,aAAa,CAAkB,sBAAsB,CAAC,CAAC;AAcpF;;;;GAIG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,KAAgC,EAAe,EAAE;IACpF,MAAM,EACJ,MAAM,EACN,QAAQ,EACT,GAAG,KAAK,CAAC;IACV,OAAO,oBAAC,aAAa,CAAC,QAAQ,IAAC,KAAK,EAAE,MAAM;QACxC,oBAAC,6BAA6B,IAAC,MAAM,EAAE,MAAM,CAAC,SAAS,IAAG,QAAQ,CAAiC,CAC5E,CAAC;AAC9B,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,GAAoB,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { createContext, useContext } from 'react';\nimport { ComponentLocale, LocalizationProvider as ComponentLocalizationProvider } from '@internal/react-components';\nimport { COMPOSITE_LOCALE_EN_US } from './locales';\nimport { CallCompositeStrings } from '../CallComposite';\nimport { CallWithChatCompositeStrings } from '../CallWithChatComposite';\nimport { ChatCompositeStrings } from '../ChatComposite';\n\n/**\n * Locale information for all composites exported from this library.\n *\n * @public\n */\nexport interface CompositeLocale {\n  /** Strings used in composites directly\n   *\n   * Contrast with {@link CompositeLocale.component}, which contains strings used via the component library.\n   */\n  strings: CompositeStrings;\n\n  /** Locale information for the pure Components used by Composites. See {@link communication-react#ComponentLocale}. */\n  component: ComponentLocale;\n}\n\n/**\n * Strings used in the composites directly.\n *\n * These strings are used by the composites directly, instead of by the contained components.\n *\n * @public\n */\nexport interface CompositeStrings {\n  /**\n   * Strings used by {@link CallComposite}.\n   */\n  call: CallCompositeStrings;\n  /**\n   * Strings used by {@link ChatComposite}.\n   */\n  chat: ChatCompositeStrings;\n\n  /**\n   * Strings used by {@link CallWithChatComposite}.\n   */\n  callWithChat: CallWithChatCompositeStrings;\n}\n\n/**\n * Context for providing localized strings to components\n *\n * @private\n */\nexport const LocaleContext = createContext<CompositeLocale>(COMPOSITE_LOCALE_EN_US);\n\n/**\n * Props to LocalizationProvider\n *\n * @private\n */\nexport type LocalizationProviderProps = {\n  /** Locale context to provide components */\n  locale: CompositeLocale;\n  /** Children to provide locale context. */\n  children: React.ReactNode;\n};\n\n/**\n * Provider to provide localized strings for this library's composites.\n *\n * @private\n */\nexport const LocalizationProvider = (props: LocalizationProviderProps): JSX.Element => {\n  const {\n    locale,\n    children\n  } = props;\n  return <LocaleContext.Provider value={locale}>\n      <ComponentLocalizationProvider locale={locale.component}>{children}</ComponentLocalizationProvider>\n    </LocaleContext.Provider>;\n};\n\n/**\n * @private\n */\nexport const useLocale = (): CompositeLocale => useContext(LocaleContext);\"../../../../react-components/src\""]}