// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { memoizeFunction, Stack, useTheme } from '@fluentui/react';
import { ControlBar } from "../../../../../react-components/src";
import React, { useMemo } from 'react';
import { Camera } from './buttons/Camera';
import { Devices } from './buttons/Devices';
import { EndCall } from './buttons/EndCall';
import { Microphone } from './buttons/Microphone';
import { Participants } from './buttons/Participants';
import { ScreenShare } from './buttons/ScreenShare';
import { isDisabled } from '../utils';
// Enforce a background color on control bar to ensure it matches the composite background color.
const controlBarStyles = memoizeFunction((background) => ({
    root: {
        background: background
    }
}));
/**
 * @private
 */
export const CallControls = (props) => {
    const options = useMemo(() => typeof props.options === 'boolean' ? {} : props.options, [props.options]);
    const theme = useTheme();
    // when props.options is false then we want to hide the whole control bar.
    if (props.options === false) {
        return React.createElement(React.Fragment, null);
    }
    let screenShareButtonIsEnabled = isEnabled(options === null || options === void 0 ? void 0 : options.screenShareButton);
    let microphoneButtonIsEnabled = isEnabled(options === null || options === void 0 ? void 0 : options.microphoneButton);
    let cameraButtonIsEnabled = isEnabled(options === null || options === void 0 ? void 0 : options.cameraButton);
    return React.createElement(Stack, { horizontalAlign: "center" },
        React.createElement(Stack.Item, null,
            React.createElement(ControlBar, { layout: "horizontal", styles: controlBarStyles(theme.semanticColors.bodyBackground) },
                microphoneButtonIsEnabled && React.createElement(Microphone, { displayType: options === null || options === void 0 ? void 0 : options.displayType, disabled: isDisabled(options === null || options === void 0 ? void 0 : options.microphoneButton) }),
                cameraButtonIsEnabled && React.createElement(Camera, { displayType: options === null || options === void 0 ? void 0 : options.displayType, disabled: isDisabled(options === null || options === void 0 ? void 0 : options.cameraButton) }),
                screenShareButtonIsEnabled && React.createElement(ScreenShare, { option: options === null || options === void 0 ? void 0 : options.screenShareButton, displayType: options === null || options === void 0 ? void 0 : options.displayType, disabled: isDisabled(options === null || options === void 0 ? void 0 : options.screenShareButton) }),
                isEnabled(options === null || options === void 0 ? void 0 : options.participantsButton) && React.createElement(Participants, { option: options === null || options === void 0 ? void 0 : options.participantsButton, callInvitationURL: props.callInvitationURL, onFetchParticipantMenuItems: props.onFetchParticipantMenuItems, displayType: options === null || options === void 0 ? void 0 : options.displayType, increaseFlyoutItemSize: props.increaseFlyoutItemSize, isMobile: props.isMobile, disabled: isDisabled(options === null || options === void 0 ? void 0 : options.participantsButton) }),
                isEnabled(options === null || options === void 0 ? void 0 : options.devicesButton) && React.createElement(Devices, { displayType: options === null || options === void 0 ? void 0 : options.displayType, increaseFlyoutItemSize: props.increaseFlyoutItemSize, disabled: isDisabled(options === null || options === void 0 ? void 0 : options.devicesButton) }),
                isEnabled(options === null || options === void 0 ? void 0 : options.endCallButton) && React.createElement(EndCall, { displayType: options === null || options === void 0 ? void 0 : options.displayType }))));
};
const isEnabled = (option) => option !== false;
/** @private */
export const isRoomsCallTrampoline = () => {
    return false;
};
//# sourceMappingURL=CallControls.js.map