{"version":3,"file":"CallWithChatBackedChatAdapter.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallWithChatComposite/adapter/CallWithChatBackedChatAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CallWithChatAdapter } from './CallWithChatAdapter';\nimport { ChatAdapter, ChatAdapterState } from '../../ChatComposite';\nimport { ErrorBarStrings } from '@internal/react-components';\nimport { CallWithChatAdapterState } from '../state/CallWithChatAdapterState';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/**\n * Facade around the CallWithChatAdapter to satisfy the chat adapter interface.\n *\n * @private\n */\nexport class CallWithChatBackedChatAdapter implements ChatAdapter {\n  private callWithChatAdapter: CallWithChatAdapter;\n\n  // For onStateChange we must convert CallWithChat state to chat state. This involves creating a new handler to be passed into the onStateChange.\n  // In order to unsubscribe the handler when offStateChange is called we must have a mapping of the original handler to the newly created handler.\n  private eventStore: Map<(state: ChatAdapterState) => void, (state: CallWithChatAdapterState) => void> = new Map();\n  constructor(callWithChatAdapter: CallWithChatAdapter) {\n    this.callWithChatAdapter = callWithChatAdapter;\n  }\n  public fetchInitialData = async (): Promise<void> => await this.callWithChatAdapter.fetchInitialData();\n  public sendMessage = async (content: string): Promise<void> => await this.callWithChatAdapter.sendMessage(content);\n  public sendReadReceipt = async (chatMessageId: string): Promise<void> => await this.callWithChatAdapter.sendReadReceipt(chatMessageId);\n  public sendTypingIndicator = async (): Promise<void> => await this.callWithChatAdapter.sendTypingIndicator();\n  public removeParticipant = async (userId: string): Promise<void> => await this.callWithChatAdapter.removeParticipant(userId);\n  public loadPreviousChatMessages = async (messagesToLoad: number): Promise<boolean> => await this.callWithChatAdapter.loadPreviousChatMessages(messagesToLoad);\n  public dispose = (): void => this.callWithChatAdapter.dispose();\n  public onStateChange = (handler: (state: ChatAdapterState) => void): void => {\n    const convertedHandler = (state: CallWithChatAdapterState): void => {\n      handler(chatAdapterStateFromCallWithChatAdapterState(state));\n    };\n    this.callWithChatAdapter.onStateChange(convertedHandler);\n    this.eventStore.set(handler, convertedHandler);\n  };\n  public offStateChange = (handler: (state: ChatAdapterState) => void): void => {\n    const convertedHandler = this.eventStore.get(handler);\n    convertedHandler && this.callWithChatAdapter.offStateChange(convertedHandler);\n  };\n  public getState = (): ChatAdapterState => chatAdapterStateFromCallWithChatAdapterState(this.callWithChatAdapter.getState());\n\n  /* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n  public on = (event: any, listener: any): void => {\n    switch (event) {\n      case 'error':\n        return this.callWithChatAdapter.on('chatError', listener);\n      case 'participantsAdded':\n        return this.callWithChatAdapter.on('chatParticipantsAdded', listener);\n      case 'participantsRemoved':\n        return this.callWithChatAdapter.on('chatParticipantsRemoved', listener);\n      default:\n        return this.callWithChatAdapter.on(event, listener);\n    }\n  };\n  public off = (event: any, listener: any): void => {\n    switch (event) {\n      case 'error':\n        return this.callWithChatAdapter.off('chatError', listener);\n      case 'participantsAdded':\n        return this.callWithChatAdapter.off('chatParticipantsAdded', listener);\n      case 'participantsRemoved':\n        return this.callWithChatAdapter.off('chatParticipantsRemoved', listener);\n      default:\n        return this.callWithChatAdapter.off(event, listener);\n    }\n  };\n  public updateMessage = async (messageId: string, content: string, metadata?: Record<string, string>): Promise<void> => await this.callWithChatAdapter.updateMessage(messageId, content, metadata);\n  public deleteMessage = async (messageId: string): Promise<void> => await this.callWithChatAdapter.deleteMessage(messageId);\n  public clearErrors = (errorTypes: (keyof ErrorBarStrings)[]): void => {\n    throw new Error(`Method not supported in CallWithChatComposite.`);\n  };\n  public setTopic = async (topicName: string): Promise<void> => {\n    throw new Error(`Chat Topics are not supported in CallWithChatComposite.`);\n  };\n}\nfunction chatAdapterStateFromCallWithChatAdapterState(callWithChatAdapterState: CallWithChatAdapterState): ChatAdapterState {\n  if (!callWithChatAdapterState.chat) {\n    throw new Error('Chat thread state id undefined.');\n  }\n  return {\n    userId: callWithChatAdapterState.userId,\n    displayName: callWithChatAdapterState.displayName || '',\n    thread: callWithChatAdapterState.chat,\n    latestErrors: callWithChatAdapterState.latestChatErrors\n  };\n}\"../../../../../react-components/src\""]}