{"version":3,"file":"StatefulChatClient.js","sourceRoot":"","sources":["../../../../preprocess-dist/chat-stateful-client/src/StatefulChatClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ChatClient, ChatClientOptions } from '@azure/communication-chat';\nimport { _getApplicationId } from '@internal/acs-ui-common';\nimport { ChatContext } from './ChatContext';\nimport { ChatClientState } from './ChatClientState';\nimport { EventSubscriber } from './EventSubscriber';\nimport { chatThreadClientDeclaratify } from './StatefulChatThreadClient';\nimport { createDecoratedListThreads } from './iterators/createDecoratedListThreads';\nimport { CommunicationTokenCredential, CommunicationUserIdentifier, getIdentifierKind } from '@azure/communication-common';\nimport { chatStatefulLogger } from './Logger';\n\n/**\n * Defines the methods that allow {@Link @azure/communication-chat#ChatClient} to be used with a centralized generated state.\n *\n * The interface provides access to proxied state and also allows registering a handler for state change events.\n *\n * @public\n */\nexport interface StatefulChatClient extends ChatClient {\n  /**\n   * Holds all the state that we could proxy from ChatClient {@Link @azure/communication-chat#ChatClient} as\n   * ChatClientState {@Link ChatClientState}.\n   */\n  getState(): ChatClientState;\n  /**\n   * Allows a handler to be registered for 'stateChanged' events.\n   *\n   * @param handler - Callback to receive the state.\n   */\n  onStateChange(handler: (state: ChatClientState) => void): void;\n  /**\n   * Allows unregistering for 'stateChanged' events.\n   *\n   * @param handler - Original callback to be unsubscribed.\n   */\n  offStateChange(handler: (state: ChatClientState) => void): void;\n}\ninterface StatefulChatClientWithPrivateProps extends StatefulChatClient {\n  context: ChatContext;\n  eventSubscriber: EventSubscriber | undefined;\n}\nconst proxyChatClient: ProxyHandler<ChatClient> = {\n  get: function <P extends keyof StatefulChatClientWithPrivateProps>(chatClient: ChatClient, prop: P, receiver: StatefulChatClientWithPrivateProps) {\n    // skip receiver.context call to avoid recursive bugs\n    if (prop === 'context') {\n      return Reflect.get(chatClient, prop);\n    }\n    const context = receiver.context;\n    switch (prop) {\n      case 'createChatThread':\n        {\n          return context.withAsyncErrorTeedToState(async function (...args: Parameters<ChatClient['createChatThread']>) {\n            const result = await chatClient.createChatThread(...args);\n            const thread = result.chatThread;\n            if (thread) {\n              const [request] = args;\n              context.createThread(thread.id, {\n                topic: request.topic\n              });\n            }\n            return result;\n          }, 'ChatClient.createChatThread');\n        }\n      case 'deleteChatThread':\n        {\n          return context.withAsyncErrorTeedToState(async function (...args: Parameters<ChatClient['deleteChatThread']>) {\n            const result = await chatClient.deleteChatThread(...args);\n            context.deleteThread(args[0]);\n            return result;\n          }, 'ChatClient.deleteChatThread');\n        }\n      case 'listChatThreads':\n        {\n          return createDecoratedListThreads(chatClient, context);\n        }\n      case 'getChatThreadClient':\n        {\n          return function (...args: Parameters<ChatClient['getChatThreadClient']>) {\n            const chatThreadClient = chatClient.getChatThreadClient(...args);\n            // TODO(prprabhu): Ensure that thread properties are fetched into the ChatContext at this point.\n            // A new thread might be created here, but the properties will never be fetched.\n            return chatThreadClientDeclaratify(chatThreadClient, context);\n          };\n        }\n      case 'startRealtimeNotifications':\n        {\n          return context.withAsyncErrorTeedToState(async function (...args: Parameters<ChatClient['startRealtimeNotifications']>) {\n            const ret = await chatClient.startRealtimeNotifications(...args);\n            if (!receiver.eventSubscriber) {\n              receiver.eventSubscriber = new EventSubscriber(chatClient, context);\n            }\n            return ret;\n          }, 'ChatClient.startRealtimeNotifications');\n        }\n      case 'stopRealtimeNotifications':\n        {\n          return context.withAsyncErrorTeedToState(async function (...args: Parameters<ChatClient['stopRealtimeNotifications']>) {\n            const ret = await chatClient.stopRealtimeNotifications(...args);\n            if (receiver.eventSubscriber) {\n              receiver.eventSubscriber.unsubscribe();\n              receiver.eventSubscriber = undefined;\n            }\n            return ret;\n          }, 'ChatClient.stopRealtimeNotifications');\n        }\n      default:\n        return Reflect.get(chatClient, prop);\n    }\n  }\n};\n\n/**\n * Arguments to construct the {@link StatefulChatClient}.\n *\n * @public\n */\nexport type StatefulChatClientArgs = {\n  userId: CommunicationUserIdentifier;\n  displayName: string;\n  endpoint: string;\n  credential: CommunicationTokenCredential;\n};\n\n/**\n * Options to construct the {@link StatefulChatClient}.\n *\n * @public\n */\nexport type StatefulChatClientOptions = {\n  /**\n   * Options to construct the {@link @azure/communication-chat#ChatClient} with.\n   */\n  chatClientOptions: ChatClientOptions;\n  /**\n   * Sets the max listeners limit of the 'stateChange' event. Defaults to the node.js EventEmitter.defaultMaxListeners\n   * if not specified.\n   */\n  maxStateChangeListeners?: number;\n};\n\n/**\n * Creates a stateful ChatClient {@link StatefulChatClient} by proxying ChatClient\n * {@link @azure/communication-chat#ChatClient} with ProxyChatClient {@link ProxyChatClient} which then allows access\n * to state in a declarative way.\n *\n * @public\n */\nexport const createStatefulChatClient = (args: StatefulChatClientArgs, options?: StatefulChatClientOptions): StatefulChatClient => {\n  chatStatefulLogger.info(`Creating chat stateful client using library version: ${_getApplicationId()}`);\n  const tweakedOptions = {\n    ...options,\n    chatClientOptions: {\n      ...options?.chatClientOptions,\n      userAgentOptions: {\n        userAgentPrefix: _getApplicationId()\n      }\n    }\n  };\n  return _createStatefulChatClientWithDeps(new ChatClient(args.endpoint, args.credential, tweakedOptions.chatClientOptions), args, tweakedOptions);\n};\n\n/**\n * A function to modify the state of the StatefulChatClient.\n *\n * Provided as a callback to the {@link StatefulChatClient.modifyState} method.\n *\n * The function must modify the provided state in place as much as possible.\n * Making large modifications can lead to bad performance by causing spurious rerendering of the UI.\n *\n * Consider using commonly used modifier functions exported from this package.\n */\nexport type ChatStateModifier = (state: ChatClientState) => void;\n\n/**\n * Internal implementation of {@link createStatefulChatClient} for dependency injection.\n *\n * Used by tests. Should not be exported out of this package.\n * @internal\n */\nexport const _createStatefulChatClientWithDeps = (chatClient: ChatClient, args: StatefulChatClientArgs, options?: StatefulChatClientOptions): StatefulChatClient => {\n  const context = new ChatContext(options?.maxStateChangeListeners);\n  let eventSubscriber: EventSubscriber;\n  context.updateChatConfig(getIdentifierKind(args.userId), args.displayName);\n  const proxy = new Proxy(chatClient, proxyChatClient);\n  Object.defineProperty(proxy, 'context', {\n    configurable: false,\n    get: () => context\n  });\n  Object.defineProperty(proxy, 'eventSubscriber', {\n    configurable: false,\n    get: () => eventSubscriber,\n    set: (val: EventSubscriber) => {\n      eventSubscriber = val;\n    }\n  });\n  Object.defineProperty(proxy, 'getState', {\n    configurable: false,\n    value: () => context?.getState()\n  });\n  Object.defineProperty(proxy, 'onStateChange', {\n    configurable: false,\n    value: (handler: (state: ChatClientState) => void) => context?.onStateChange(handler)\n  });\n  Object.defineProperty(proxy, 'offStateChange', {\n    configurable: false,\n    value: (handler: (state: ChatClientState) => void) => context?.offStateChange(handler)\n  });\n  return (proxy as StatefulChatClient);\n};\"../../acs-ui-common/src\""]}