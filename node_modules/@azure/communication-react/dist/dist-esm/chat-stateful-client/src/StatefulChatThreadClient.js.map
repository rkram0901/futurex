{"version":3,"file":"StatefulChatThreadClient.js","sourceRoot":"","sources":["../../../../preprocess-dist/chat-stateful-client/src/StatefulChatThreadClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ChatThreadClient, SendChatMessageResult } from '@azure/communication-chat';\nimport { getIdentifierKind } from '@azure/communication-common';\nimport { ChatMessageWithStatus } from './types/ChatMessageWithStatus';\nimport { ChatContext } from './ChatContext';\nimport { nanoid } from 'nanoid';\nimport { createDecoratedListMessages } from './iterators/createDecoratedListMessages';\nimport { createDecoratedListReadReceipts } from './iterators/createDecoratedListReadReceipts';\nimport { createDecoratedListParticipants } from './iterators/createDecoratedListParticipants';\nimport { convertChatMessage } from './convertChatMessage';\nclass ProxyChatThreadClient implements ProxyHandler<ChatThreadClient> {\n  private _context: ChatContext;\n  constructor(context: ChatContext) {\n    this._context = context;\n  }\n  public get<P extends keyof ChatThreadClient>(chatThreadClient: ChatThreadClient, prop: P): any {\n    switch (prop) {\n      case 'listMessages':\n        {\n          return createDecoratedListMessages(chatThreadClient, this._context);\n        }\n      case 'getMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['getMessage']>) => {\n            const message = await chatThreadClient.getMessage(...args);\n            this._context.setChatMessage(chatThreadClient.threadId, convertChatMessage(message));\n            return message;\n          }, 'ChatThreadClient.getMessage');\n        }\n      case 'sendMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['sendMessage']>) => {\n            // Retry logic?\n            const [request, options] = args;\n            const {\n              content\n            } = request;\n            const clientMessageId = nanoid(); // Generate a local short uuid for message\n            const newMessage: ChatMessageWithStatus = {\n              content: {\n                message: content\n              },\n              clientMessageId,\n              id: '',\n              type: 'text',\n              sequenceId: '',\n              version: '',\n              createdOn: new Date(),\n              status: 'sending',\n              senderDisplayName: this._context.getState().displayName,\n              sender: this._context.getState().userId,\n              metadata: options?.metadata\n            };\n            this._context.setChatMessage(chatThreadClient.threadId, newMessage);\n            let result: SendChatMessageResult | undefined = undefined;\n            try {\n              result = await chatThreadClient.sendMessage(...args);\n            } catch (e) {\n              this._context.setChatMessage(chatThreadClient.threadId, {\n                ...newMessage,\n                status: 'failed'\n              });\n              throw e;\n            }\n            if (result?.id) {\n              this._context.batch(() => {\n                if (!result) {\n                  return;\n                }\n                this._context.setChatMessage(chatThreadClient.threadId, {\n                  ...newMessage,\n                  clientMessageId: undefined,\n                  status: 'delivered',\n                  id: result.id\n                });\n                this._context.deleteLocalMessage(chatThreadClient.threadId, clientMessageId);\n              });\n            }\n            return result;\n          }, 'ChatThreadClient.sendMessage');\n        }\n      case 'addParticipants':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['addParticipants']>) => {\n            const result = await chatThreadClient.addParticipants(...args);\n            const [addRequest] = args;\n            const participantsToAdd = addRequest.participants;\n            this._context.setParticipants(chatThreadClient.threadId, participantsToAdd);\n            return result;\n          }, 'ChatThreadClient.addParticipants');\n        }\n      case 'deleteMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['deleteMessage']>) => {\n            // DeleteMessage is able to either delete local one(for failed message) or synced message\n            const [messageId] = args;\n            if (this._context.deleteLocalMessage(chatThreadClient.threadId, messageId)) {\n              return {};\n            }\n            const result = await chatThreadClient.deleteMessage(...args);\n            this._context.deleteMessage(chatThreadClient.threadId, messageId);\n            return result;\n          }, 'ChatThreadClient.deleteMessage');\n        }\n      case 'listParticipants':\n        {\n          return createDecoratedListParticipants(chatThreadClient, this._context);\n        }\n      case 'listReadReceipts':\n        {\n          return createDecoratedListReadReceipts(chatThreadClient, this._context);\n        }\n      case 'sendTypingNotification':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['sendTypingNotification']>) => {\n            return await chatThreadClient.sendTypingNotification(...args);\n          }, 'ChatThreadClient.sendTypingNotification');\n        }\n      case 'removeParticipant':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['removeParticipant']>) => {\n            const result = await chatThreadClient.removeParticipant(...args);\n            const [removeIdentifier] = args;\n            this._context.deleteParticipant(chatThreadClient.threadId, getIdentifierKind(removeIdentifier));\n            return result;\n          }, 'ChatThreadClient.removeParticipant');\n        }\n      case 'updateMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['updateMessage']>) => {\n            const result = await chatThreadClient.updateMessage(...args);\n            const [messageId, updateOption] = args;\n            this._context.updateChatMessageContent(chatThreadClient.threadId, messageId, updateOption?.content);\n            return result;\n          }, 'ChatThreadClient.updateMessage');\n        }\n      case 'updateTopic':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['updateTopic']>) => {\n            const result = await chatThreadClient.updateTopic(...args);\n            const [topic] = args;\n            this._context.updateThreadTopic(chatThreadClient.threadId, topic);\n            return result;\n          }, 'ChatThreadClient.updateTopic');\n        }\n      case 'getProperties':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['getProperties']>) => {\n            const result = await chatThreadClient.getProperties(...args);\n            this._context.updateThread(chatThreadClient.threadId, result);\n            return result;\n          }, 'ChatThreadClient.getProperties');\n        }\n      default:\n        return Reflect.get(chatThreadClient, prop);\n    }\n  }\n}\n\n/**\n * @private\n */\nexport const chatThreadClientDeclaratify = (chatThreadClient: ChatThreadClient, context: ChatContext): ChatThreadClient => {\n  context.createThreadIfNotExist(chatThreadClient.threadId);\n  return (new Proxy(chatThreadClient, new ProxyChatThreadClient(context)) as ChatThreadClient);\n};"]}