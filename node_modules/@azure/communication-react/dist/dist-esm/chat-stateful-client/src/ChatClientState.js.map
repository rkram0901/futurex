{"version":3,"file":"ChatClientState.js","sourceRoot":"","sources":["../../../../preprocess-dist/chat-stateful-client/src/ChatClientState.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAwGlC;;;;GAIG;AACH,MAAM,OAAO,SAAU,SAAQ,KAAK;IAalC,YAAY,MAAuB,EAAE,UAAiB,EAAE,SAAgB;QACtE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,8EAA8E;QAC9E,IAAI,CAAC,SAAS,GAAG,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ChatMessageReadReceipt, ChatParticipant } from '@azure/communication-chat';\nimport { CommunicationIdentifierKind } from '@azure/communication-common';\nimport { ChatMessageWithStatus } from './types/ChatMessageWithStatus';\nimport { TypingIndicatorReceivedEvent } from '@azure/communication-chat';\n\n/**\n * Centralized state for {@link @azure/communication-chat#ChatClient}.\n *\n * @public\n */\nexport type ChatClientState = {\n  /**\n   * Identifier of the current user.\n   */\n  userId: CommunicationIdentifierKind;\n  /**\n   * DisplayName of the current user.\n   * The same value as what others see in {@link @azure/communication-chat#ChatParticipant.displayName}\n   */\n  displayName: string;\n  /**\n   * Chat threads joined by the current user.\n   * Object with {@link ChatThreadClientState} fields, keyed by {@link ChatThreadClientState.threadId}.\n   */\n  threads: {\n    [key: string]: ChatThreadClientState;\n  };\n  /**\n   * Stores the latest error for each API method.\n   *\n   * See documentation of {@link ChatErrors} for details.\n   */\n  latestErrors: ChatErrors;\n};\n\n/**\n * Centralized state for {@link @azure/communication-chat#ChatThreadClient}.\n *\n * @public\n */\nexport type ChatThreadClientState = {\n  /**\n   * Messages in this thread.\n   * Object with {@link ChatMessageWithStatus} entries\n   * Local messages are keyed by keyed by {@link ChatMessageWithStatus.clientMessageId}.\n   * Remote messages are keyed by {@link @azure/communication-chat#ChatMessage.id}.\n   */\n  chatMessages: {\n    [key: string]: ChatMessageWithStatus;\n  };\n  /**\n   * Participants of this chat thread.\n   *\n   * Object with {@link @azure/communication-chat#ChatParticipant} fields,\n   * keyed by {@link @azure/communication-chat#ChatParticipant.id}.\n   */\n  participants: {\n    [key: string]: ChatParticipant;\n  };\n  /**\n   * Id of this chat thread. Returned from {@link @azure/communication-chat#ChatThreadClient.threadId}\n   */\n  threadId: string;\n  /**\n   * An object containing properties of this chat thread.\n   */\n  properties?: ChatThreadProperties;\n  /**\n   * An array of ReadReceipts of this chat thread. Returned from {@link @azure/communication-chat#ChatThreadClient.listReadReceipts}\n   */\n  readReceipts: ChatMessageReadReceipt[];\n  /**\n   * An array of typingIndicators of this chat thread. Captured from event listener of {@link @azure/communication-chat#ChatClient}\n   * Stateful client only stores recent 8000ms real-time typing indicators data.\n   */\n  typingIndicators: TypingIndicatorReceivedEvent[];\n  /**\n   * Latest timestamp when other users read messages sent by current user.\n   */\n  latestReadTime: Date;\n};\n\n/**\n * Properties of a chat thread.\n *\n * We define a minimal one that helps us hide the different types used by underlying API.\n *\n * @public\n */\nexport type ChatThreadProperties = {\n  topic?: string;\n};\n\n/**\n * Errors teed from API calls to the Chat SDK.\n *\n * Each property in the object stores the latest error for a particular SDK API method.\n *\n * @public\n */\nexport type ChatErrors = { [target in ChatErrorTarget]: ChatError };\n\n/**\n * Error thrown from failed {@link StatefulChatClient} methods.\n *\n * @public\n */\nexport class ChatError extends Error {\n  /**\n   * The API method target that failed.\n   */\n  public target: ChatErrorTarget;\n  /**\n   * Error thrown by the failed SDK method.\n   */\n  public innerError: Error;\n  /**\n   * Timestamp added to the error by the stateful layer.\n   */\n  public timestamp: Date;\n  constructor(target: ChatErrorTarget, innerError: Error, timestamp?: Date) {\n    super();\n    this.target = target;\n    this.innerError = innerError;\n    // Testing note: It is easier to mock Date::now() than the Date() constructor.\n    this.timestamp = timestamp ?? new Date(Date.now());\n    this.name = 'ChatError';\n    this.message = `${this.target}: ${this.innerError.message}`;\n  }\n}\n\n/**\n * String literal type for all permissible keys in {@link ChatErrors}.\n *\n * @public\n */\nexport type ChatErrorTarget = 'ChatClient.createChatThread' | 'ChatClient.deleteChatThread' | 'ChatClient.getChatThreadClient' | 'ChatClient.listChatThreads' | 'ChatClient.off' | 'ChatClient.on' | 'ChatClient.startRealtimeNotifications' | 'ChatClient.stopRealtimeNotifications' | 'ChatThreadClient.addParticipants' | 'ChatThreadClient.deleteMessage' | 'ChatThreadClient.getMessage' | 'ChatThreadClient.getProperties' | 'ChatThreadClient.listMessages' | 'ChatThreadClient.listParticipants' | 'ChatThreadClient.listReadReceipts' | 'ChatThreadClient.removeParticipant' | 'ChatThreadClient.sendMessage' | 'ChatThreadClient.sendReadReceipt' | 'ChatThreadClient.sendTypingNotification' | 'ChatThreadClient.updateMessage' | 'ChatThreadClient.updateTopic';"]}