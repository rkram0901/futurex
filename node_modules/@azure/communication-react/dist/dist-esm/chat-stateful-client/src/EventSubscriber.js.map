{"version":3,"file":"EventSubscriber.js","sourceRoot":"","sources":["../../../../preprocess-dist/chat-stateful-client/src/EventSubscriber.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ChatClient, ChatMessageReadReceipt, ChatMessageType } from '@azure/communication-chat';\nimport { ChatMessageDeletedEvent, ChatMessageEditedEvent, ChatMessageReceivedEvent, ChatThreadCreatedEvent, ChatThreadDeletedEvent, ChatThreadPropertiesUpdatedEvent, ParticipantsAddedEvent, ParticipantsRemovedEvent, ReadReceiptReceivedEvent, TypingIndicatorReceivedEvent } from '@azure/communication-chat';\nimport { ChatContext } from './ChatContext';\nimport { convertChatMessage } from './convertChatMessage';\nimport { ChatMessageWithStatus } from './types/ChatMessageWithStatus';\n\n// TODO: When we can get messageId of event from SDK, remove this\n// Maximum time to look back message list when we receive a system event\nconst maxSyncTimeInMs = 10 * 1000;\n\n/**\n * @private\n */\nexport class EventSubscriber {\n  private chatClient: ChatClient;\n  private chatContext: ChatContext;\n  constructor(chatClient: ChatClient, chatContext: ChatContext) {\n    this.chatClient = chatClient;\n    this.chatContext = chatContext;\n    this.subscribe();\n  }\n  private convertEventToChatMessage = (event: ChatMessageReceivedEvent | ChatMessageEditedEvent): ChatMessageWithStatus => {\n    return convertChatMessage({\n      id: event.id,\n      version: event.version,\n      content: {\n        message: event.message\n      },\n      type: this.convertEventType(event.type),\n      sender: event.sender,\n      senderDisplayName: event.senderDisplayName,\n      sequenceId: '',\n      // Note: there is a bug in chatMessageReceived event that it is missing sequenceId\n      createdOn: new Date(event.createdOn),\n      editedOn: 'editedOn' in event ? event.editedOn : undefined,\n      metadata: event.metadata\n    });\n  };\n\n  // convert event type to chatMessage type, only possible type is 'html' and 'text' in chat event\n  private convertEventType = (type: string): ChatMessageType => {\n    const lowerCaseType = type.toLowerCase();\n    if (lowerCaseType === 'richtext/html' || lowerCaseType === 'html') {\n      return 'html';\n    } else {\n      return 'text';\n    }\n  };\n  private onChatMessageReceived = (event: ChatMessageReceivedEvent): void => {\n    // Today we are avoiding how to render these messages. In the future we can\n    // remove this condition and handle this message appropriately.\n    const messageEventType = event.type.toLowerCase();\n    if (messageEventType !== 'text' && messageEventType !== 'richtext/html' && messageEventType !== 'html') {\n      return;\n    }\n    const newMessage = this.convertEventToChatMessage(event);\n\n    // Because of bug in chatMessageReceived event, if we already have that particular message in context, we want to\n    // make sure to not overwrite the sequenceId when calling setChatMessage.\n    const existingMessage = this.chatContext.getState().threads[event.threadId]?.chatMessages[event.id];\n    if (existingMessage) {\n      newMessage.sequenceId = existingMessage.sequenceId;\n    }\n    this.chatContext.batch(() => {\n      this.chatContext.createThreadIfNotExist(event.threadId);\n      this.chatContext.setChatMessage(event.threadId, newMessage);\n    });\n  };\n  private onChatMessageDeleted = (event: ChatMessageDeletedEvent): void => {\n    this.chatContext.deleteMessage(event.threadId, event.id);\n  };\n  private onChatMessageEdited = (event: ChatMessageEditedEvent): void => {\n    const editedMessage = this.convertEventToChatMessage(event);\n    this.chatContext.setChatMessage(event.threadId, convertChatMessage(editedMessage));\n  };\n  private onParticipantsAdded = (event: ParticipantsAddedEvent): void => {\n    const participantsToAdd = event.participantsAdded.map(participant => ({\n      ...participant,\n      shareHistoryTime: participant.shareHistoryTime ? new Date(participant.shareHistoryTime) : undefined\n    }));\n    this.chatContext.batch(() => {\n      this.chatContext.createThreadIfNotExist(event.threadId);\n      this.chatContext.setParticipants(event.threadId, participantsToAdd);\n    });\n    this.fetchLastParticipantMessage(event.threadId, 'participantAdded');\n  };\n\n  // This is a hot fix that no participant message is received for onChatMessageReceived event, which should be handled by JS SDK\n  private fetchLastParticipantMessage = async (threadId: string, actionType: 'participantAdded' | 'participantRemoved'): Promise<void> => {\n    for await (const message of this.chatClient.getChatThreadClient(threadId).listMessages({\n      startTime: new Date(Date.now() - maxSyncTimeInMs)\n    })) {\n      if (message.type === actionType) {\n        this.chatContext.setChatMessage(threadId, {\n          ...message,\n          status: 'delivered'\n        });\n      }\n    }\n  };\n  private onParticipantsRemoved = (event: ParticipantsRemovedEvent): void => {\n    const participantIds = event.participantsRemoved.map(participant => {\n      return participant.id;\n    });\n    this.chatContext.deleteParticipants(event.threadId, participantIds);\n    this.fetchLastParticipantMessage(event.threadId, 'participantRemoved');\n  };\n  private onReadReceiptReceived = (event: ReadReceiptReceivedEvent): void => {\n    const readReceipt: ChatMessageReadReceipt = {\n      ...event,\n      sender: event.sender,\n      readOn: new Date(event.readOn)\n    };\n    this.chatContext.batch(() => {\n      this.chatContext.createThreadIfNotExist(event.threadId);\n      this.chatContext.addReadReceipt(event.threadId, readReceipt);\n    });\n  };\n  private onTypingIndicatorReceived = (typingIndicator: TypingIndicatorReceivedEvent): void => {\n    this.chatContext.batch(() => {\n      this.chatContext.createThreadIfNotExist(typingIndicator.threadId);\n      this.chatContext.addTypingIndicator(typingIndicator.threadId, typingIndicator);\n    });\n  };\n  private onChatThreadCreated = (event: ChatThreadCreatedEvent): void => {\n    const properties = {\n      topic: event.properties.topic\n    };\n    if (!this.chatContext.createThreadIfNotExist(event.threadId, properties)) {\n      this.chatContext.updateThread(event.threadId, properties);\n    }\n  };\n  private onChatThreadDeleted = (event: ChatThreadDeletedEvent): void => {\n    this.chatContext.deleteThread(event.threadId);\n  };\n  private onChatThreadPropertiesUpdated = (event: ChatThreadPropertiesUpdatedEvent): void => {\n    this.chatContext.updateThread(event.threadId, {\n      topic: event.properties.topic\n    });\n  };\n  public subscribe = (): void => {\n    this.chatClient.on('chatMessageReceived', this.onChatMessageReceived);\n    this.chatClient.on('chatMessageDeleted', this.onChatMessageDeleted);\n    this.chatClient.on('chatMessageEdited', this.onChatMessageEdited);\n    this.chatClient.on('participantsAdded', this.onParticipantsAdded);\n    this.chatClient.on('participantsRemoved', this.onParticipantsRemoved);\n    this.chatClient.on('readReceiptReceived', this.onReadReceiptReceived);\n    this.chatClient.on('typingIndicatorReceived', this.onTypingIndicatorReceived);\n    this.chatClient.on('chatThreadCreated', this.onChatThreadCreated);\n    this.chatClient.on('chatThreadDeleted', this.onChatThreadDeleted);\n    this.chatClient.on('chatThreadPropertiesUpdated', this.onChatThreadPropertiesUpdated);\n  };\n  public unsubscribe = (): void => {\n    this.chatClient.off('chatMessageReceived', this.onChatMessageReceived);\n    this.chatClient.off('chatMessageDeleted', this.onChatMessageDeleted);\n    this.chatClient.off('chatMessageEdited', this.onChatMessageEdited);\n    this.chatClient.off('participantsAdded', this.onParticipantsAdded);\n    this.chatClient.off('participantsRemoved', this.onParticipantsRemoved);\n    this.chatClient.off('readReceiptReceived', this.onReadReceiptReceived);\n    this.chatClient.off('typingIndicatorReceived', this.onTypingIndicatorReceived);\n    this.chatClient.off('chatThreadCreated', this.onChatThreadCreated);\n    this.chatClient.off('chatThreadDeleted', this.onChatThreadDeleted);\n    this.chatClient.off('chatThreadPropertiesUpdated', this.onChatThreadPropertiesUpdated);\n  };\n}"]}