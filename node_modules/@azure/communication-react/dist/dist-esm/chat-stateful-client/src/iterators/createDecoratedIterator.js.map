{"version":3,"file":"createDecoratedIterator.js","sourceRoot":"","sources":["../../../../../preprocess-dist/chat-stateful-client/src/iterators/createDecoratedIterator.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAQlC;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAwB,eAAyD,EAAE,OAAoB,EAAE,UAA0D,EAAE,EAAE;IAC5M,OAAO,CAAC,GAAG,IAA0D,EAAwC,EAAE;QAC7G,MAAM,eAAe,GAAG,eAAe,CAAC,GAAG,IAAI,CAAC,CAAC;QACjD,OAAO;YACC,IAAI;;oBACR,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,IAAI,EAAE,CAAC;oBAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;wBAChC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;qBACnC;oBACD,OAAO,MAAM,CAAC;gBAChB,CAAC;aAAA;YACD,CAAC,MAAM,CAAC,aAAa,CAAC;gBACpB,OAAO,IAAI,CAAC;YACd,CAAC;YACD,MAAM,EAAE,CAAC,WAA6B,EAAE,EAAqC,EAAE;gBAC7E,MAAM,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC/C,OAAO;oBACC,IAAI;;4BACR,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;4BAClC,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;4BAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;gCAChC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE;oCACjB,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;wCACvB,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;qCAC3B;gCACH,CAAC,CAAC,CAAC;6BACJ;4BACD,OAAO,MAAM,CAAC;wBAChB,CAAC;qBAAA;oBACD,CAAC,MAAM,CAAC,aAAa,CAAC;wBACpB,OAAO,IAAI,CAAC;oBACd,CAAC;iBACF,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAwB,eAAyD,EAAE,OAAoB,EAAE,MAAuB,EAA4C,EAAE;IACvN,OAAO,CAAC,GAAG,IAA0D,EAAwC,EAAE;QAC7G,MAAM,SAAS,GAAG,eAAe,CAAC,GAAG,IAAI,CAAC,CAAC;QAC3C,OAAO;YACL,IAAI,EAAE,OAAO,CAAC,yBAAyB,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC;YAC/E,CAAC,MAAM,CAAC,aAAa,CAAC;gBACpB,OAAO,IAAI,CAAC;YACd,CAAC;YACD,MAAM,EAAE,CAAC,WAA6B,EAAE,EAAqC,EAAE;gBAC7E,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACzC,OAAO;oBACL,IAAI,EAAE,OAAO,CAAC,yBAAyB,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC;oBACvE,CAAC,MAAM,CAAC,aAAa,CAAC;wBACpB,OAAO,IAAI,CAAC;oBACd,CAAC;iBACF,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ListPageSettings } from '@azure/communication-chat';\nimport { ChatContext } from '../ChatContext';\nimport { PagedAsyncIterableIterator } from '@azure/core-paging';\nimport { ChatErrorTarget } from '../ChatClientState';\ntype IteratorCreatorFn<T, OptionsType, PageT = T[]> = (options?: OptionsType) => PagedAsyncIterableIterator<T, PageT>;\n\n/**\n * Create a decorated iterator\n * returned iterators.\n *\n * @param iteratorCreator the function to create the original iterator\n * @param context chatContext\n * @param decorateFn the function for the decorating behavior\n */\nexport const createDecoratedIterator = <ItemType, OptionsType>(iteratorCreator: IteratorCreatorFn<ItemType, OptionsType>, context: ChatContext, decorateFn: (item: ItemType, context: ChatContext) => void) => {\n  return (...args: Parameters<IteratorCreatorFn<ItemType, OptionsType>>): PagedAsyncIterableIterator<ItemType> => {\n    const threadsIterator = iteratorCreator(...args);\n    return {\n      async next() {\n        const result = await threadsIterator.next();\n        if (!result.done && result.value) {\n          decorateFn(result.value, context);\n        }\n        return result;\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: ListPageSettings = {}): AsyncIterableIterator<ItemType[]> => {\n        const pages = threadsIterator.byPage(settings);\n        return {\n          async next() {\n            const result = await pages.next();\n            const page = result.value;\n            if (!result.done && result.value) {\n              context.batch(() => {\n                for (const item of page) {\n                  decorateFn(item, context);\n                }\n              });\n            }\n            return result;\n          },\n          [Symbol.asyncIterator]() {\n            return this;\n          }\n        };\n      }\n    };\n  };\n};\n\n/**\n *\n * @param iteratorCreator Function that creates the base iteartor\n * @param context The ChatContext that stores all internal state.\n * @param target See {@link ChatContext.asyncTeeErrorToState}.\n * @returns A function to create an iterator that handles errors when iterting over the iterator from `iteratorCreator`.\n */\nexport const createErrorHandlingIterator = <ItemType, OptionsType>(iteratorCreator: IteratorCreatorFn<ItemType, OptionsType>, context: ChatContext, target: ChatErrorTarget): IteratorCreatorFn<ItemType, OptionsType> => {\n  return (...args: Parameters<IteratorCreatorFn<ItemType, OptionsType>>): PagedAsyncIterableIterator<ItemType> => {\n    const innerIter = iteratorCreator(...args);\n    return {\n      next: context.withAsyncErrorTeedToState(innerIter.next.bind(innerIter), target),\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: ListPageSettings = {}): AsyncIterableIterator<ItemType[]> => {\n        const pages = innerIter.byPage(settings);\n        return {\n          next: context.withAsyncErrorTeedToState(pages.next.bind(pages), target),\n          [Symbol.asyncIterator]() {\n            return this;\n          }\n        };\n      }\n    };\n  };\n};"]}