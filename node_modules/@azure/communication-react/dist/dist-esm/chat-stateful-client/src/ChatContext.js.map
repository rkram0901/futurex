{"version":3,"file":"ChatContext.js","sourceRoot":"","sources":["../../../../preprocess-dist/chat-stateful-client/src/ChatContext.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAElC,OAAO,YAAY,MAAM,QAAQ,CAAC;AAClC,OAAO,OAAO,EAAE,EAAE,YAAY,EAAE,aAAa,EAAS,MAAM,OAAO,CAAC;AACpE,OAAO,EAA6F,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAIzI,OAAO,EAAe,kBAAkB,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC7E,OAAO,EAAE,kBAAkB,EAAE,6BAA6B,EAAE,gCAAgC;AAC5F,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAC9C,YAAY,EAAE,CAAC;AACf,qDAAqD;AACrD,aAAa,EAAE,CAAC;AAEhB;;GAEG;AACH,MAAM,OAAO,WAAW;IAatB,YAAY,YAAqB;QAZzB,WAAM,GAAoB;YAChC,MAAM,EAAG;gBACP,EAAE,EAAE,EAAE;aACmB;YAC3B,WAAW,EAAE,EAAE;YACf,OAAO,EAAE,EAAE;YACX,YAAY,EAAG,EAAiB;SACjC,CAAC;QACM,eAAU,GAAG,KAAK,CAAC;QAGnB,4BAAuB,GAAuB,SAAS,CAAC;QAE9D,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,kCAAkC,CAAC,CAAC;QACtE,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QACnC,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;SAC7C;IACH,CAAC;IACM,QAAQ;QACb,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACM,WAAW,CAAC,QAA0C;QAC3D,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,OAAgB,EAAE,EAAE;YAChE,IAAI,WAAW,EAAE,KAAK,SAAS,EAAE;gBAC/B,0EAA0E;gBAC1E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aACnE;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YAClD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACjD;IACH,CAAC;IACM,SAAS,CAAC,QAAgB,EAAE,WAAkC;QACnE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IACM,YAAY,CAAC,QAAgB,EAAE,UAAiC;QACrE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG;gBACxB,YAAY,EAAE,EAAE;gBAChB,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,UAAU;gBACtB,YAAY,EAAE,EAAE;gBAChB,YAAY,EAAE,EAAE;gBAChB,gBAAgB,EAAE,EAAE;gBACpB,cAAc,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;aAC5B,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IACM,gBAAgB,CAAC,MAAmC,EAAE,WAAmB;QAC9E,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;YAChC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IACM,sBAAsB,CAAC,QAAgB,EAAE,UAAiC;QAC/E,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACvF,IAAI,CAAC,MAAM,EAAE;YACX,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YACxC,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACM,YAAY,CAAC,QAAgB,EAAE,UAAiC;QACrE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,MAAM,EAAE;gBACV,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;aAChC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,iBAAiB,CAAC,QAAgB,EAAE,KAAc;QACvD,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,OAAO;aACR;YACD,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;gBAChC,MAAM,CAAC,UAAU,GAAG;oBAClB,KAAK,EAAE,KAAK;iBACb,CAAC;aACH;iBAAM,IAAI,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE;gBACtC,MAAM,CAAC,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;aACjC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,YAAY,CAAC,QAAgB;QAClC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,MAAM,EAAE;gBACV,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;aAChC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,eAAe,CAAC,QAAgB,EAAE,QAExC;QACC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC5C,IAAI,WAAW,EAAE;gBACf,WAAW,CAAC,YAAY,GAAG,QAAQ,CAAC;aACrC;YAED,gDAAgD;YAChD,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,MAAM,EAAE;gBACV,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;oBAC7C,IAAI,CAAC,4BAA4B,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;iBAC3D;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,wBAAwB,CAAC,QAAgB,EAAE,UAAkB,EAAE,OAA2B;QAC/F,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;;YAC1C,MAAM,WAAW,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,0CAAE,YAAY,CAAC,UAAU,CAAC,CAAC;YACtE,IAAI,WAAW,EAAE;gBACf,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;oBACxB,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;iBAC1B;gBACD,WAAW,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;aACvC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,kBAAkB,CAAC,QAAgB,EAAE,OAAe;QACzD,IAAI,mBAAmB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;;YAC1C,MAAM,YAAY,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,0CAAE,YAAY,CAAC;YAC3D,MAAM,OAAO,GAAsC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACpG,IAAI,YAAY,IAAI,OAAO,IAAI,OAAO,CAAC,eAAe,EAAE;gBACtD,OAAO,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;gBAC7C,mBAAmB,GAAG,IAAI,CAAC;aAC5B;QACH,CAAC,CAAC,CAAC;QACH,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IACM,aAAa,CAAC,QAAgB,EAAE,EAAU;QAC/C,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;;YAC1C,MAAM,YAAY,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,0CAAE,YAAY,CAAC;YAC3D,IAAI,YAAY,EAAE;gBAChB,OAAO,YAAY,CAAC,EAAE,CAAC,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,cAAc,CAAC,QAAgB,EAAE,WAA4B;QAClE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;;YAC1C,MAAM,YAAY,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,0CAAE,YAAY,CAAC;YAC3D,IAAI,YAAY,EAAE;gBAChB,YAAY,CAAC,6BAA6B,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,GAAG,WAAW,CAAC;aAC3E;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,eAAe,CAAC,QAAgB,EAAE,YAA+B;QACtE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;;YAC1C,MAAM,eAAe,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,0CAAE,YAAY,CAAC;YAC9D,IAAI,eAAe,EAAE;gBACnB,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;oBACtC,eAAe,CAAC,6BAA6B,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,GAAG,WAAW,CAAC;iBAC9E;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,kBAAkB,CAAC,QAAgB,EAAE,cAA6C;QACvF,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;;YAC1C,MAAM,YAAY,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,0CAAE,YAAY,CAAC;YAC3D,IAAI,YAAY,EAAE;gBAChB,cAAc,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;oBAC1B,OAAO,YAAY,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzD,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,iBAAiB,CAAC,QAAgB,EAAE,aAA0C;QACnF,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;;YAC1C,MAAM,YAAY,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,0CAAE,YAAY,CAAC;YAC3D,IAAI,YAAY,EAAE;gBAChB,OAAO,YAAY,CAAC,6BAA6B,CAAC,aAAa,CAAC,CAAC,CAAC;aACnE;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACM,cAAc,CAAC,QAAgB,EAAE,WAAmC;QACzE,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACvC,MAAM,YAAY,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,YAAY,CAAC;YAC1C,IAAI,MAAM,IAAI,YAAY,EAAE;gBAC1B,0DAA0D;gBAC1D,IAAI,WAAW,CAAC,MAAM,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,MAAM,CAAC,cAAc,GAAG,WAAW,CAAC,MAAM,EAAE;oBAC/F,MAAM,CAAC,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC;iBAC5C;gBACD,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAChC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACO,2BAA2B;QACjC,IAAI,IAAI,CAAC,uBAAuB,EAAE;YAChC,OAAO;SACR;QACD,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE;YACrD,IAAI,cAAc,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;gBAC1C,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;oBACjD,MAAM,wBAAwB,GAAG,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;wBAChF,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;wBAClE,OAAO,OAAO,GAAG,SAAS,CAAC,8BAA8B,CAAC;oBAC5D,CAAC,CAAC,CAAC;oBACH,IAAI,MAAM,CAAC,gBAAgB,CAAC,MAAM,KAAK,wBAAwB,CAAC,MAAM,EAAE;wBACtE,MAAM,CAAC,gBAAgB,GAAG,wBAAwB,CAAC;qBACpD;oBACD,IAAI,MAAM,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;wBACtC,cAAc,GAAG,IAAI,CAAC;qBACvB;iBACF;YACH,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,uBAAuB,EAAE;gBACnD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;gBACnD,IAAI,CAAC,uBAAuB,GAAG,SAAS,CAAC;aAC1C;QACH,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IACM,kBAAkB,CAAC,QAAgB,EAAE,eAA6C;QACvF,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,MAAM,EAAE;gBACV,MAAM,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;gBACjD,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aACxC;QACH,CAAC,CAAC,CAAC;QAEH,4EAA4E;QAC5E,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IACM,cAAc,CAAC,QAAgB,EAAE,OAA8B;QACpE,MAAM,EACJ,EAAE,EAAE,SAAS,EACb,eAAe,EAChB,GAAG,OAAO,CAAC;QACZ,IAAI,SAAS,IAAI,eAAe,EAAE;YAChC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;;gBAC1C,MAAM,cAAc,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,0CAAE,YAAY,CAAC;gBAC7D,MAAM,cAAc,GAAG,cAAc,IAAI,eAAe,IAAI,cAAc,CAAC,eAAe,CAAC,CAAC;gBAC5F,MAAM,UAAU,GAAG,CAAC,SAAS,IAAI,cAAc,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC9E,IAAI,cAAc,IAAI,UAAU,EAAE;oBAChC,cAAc,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;iBACtC;gBAED,6DAA6D;gBAC7D,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACvC,IAAI,MAAM,EAAE;oBACV,IAAI,CAAC,4BAA4B,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;iBAC3D;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED;;;;;;;OAOG;IACI,yBAAyB,CAA4B,CAAgC,EAAE,MAAuB;QACnH,OAAO,CAAO,GAAG,IAAU,EAAc,EAAE;YACzC,IAAI;gBACF,OAAO,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;aACzB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBAC7C,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;gBACvC,MAAM,SAAS,CAAC;aACjB;QACH,CAAC,CAAA,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACI,oBAAoB,CAA4B,CAAuB,EAAE,MAAuB;QACrG,OAAO,CAAC,GAAG,IAAU,EAAK,EAAE;YAC1B,IAAI;gBACF,kBAAkB,CAAC,IAAI,CAAC,gDAAgD,MAAM,EAAE,CAAC,CAAC;gBAClF,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;aACnB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBAC7C,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;gBACvC,MAAM,SAAS,CAAC;aACjB;QACH,CAAC,CAAC;IACJ,CAAC;IACO,cAAc,CAAC,MAAuB,EAAE,KAAgB;QAC9D,IAAI,CAAC,WAAW,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC1C,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,0EAA0E;IAClE,4BAA4B,CAAC,MAA6B,EAAE,MAAoC;QACtG,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QACD,MAAM,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QACjD,MAAM,WAAW,GAAG,6BAA6B,CAAC,MAAM,CAAC,CAAC;QAC1D,MAAM,wBAAwB,GAAG,gBAAgB,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,6BAA6B,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,WAAW,CAAC,CAAC;QACnJ,IAAI,wBAAwB,CAAC,MAAM,KAAK,gBAAgB,CAAC,MAAM,EAAE;YAC/D,MAAM,CAAC,gBAAgB,GAAG,wBAAwB,CAAC;SACpD;IACH,CAAC;IAED;;;;;;;;;OASG;IACI,KAAK,CAAC,UAAsB;QACjC,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/B,IAAI;YACF,UAAU,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;gBAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aACjD;SACF;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;YACzB,IAAI,WAAW,EAAE,KAAK,SAAS,EAAE;gBAC/B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,kBAAkB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;aAC9E;YACD,MAAM,CAAC,CAAC;SACT;gBAAS;YACR,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SACzB;IACH,CAAC;IACM,aAAa,CAAC,OAAyC;QAC5D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IAC5C,CAAC;IACM,cAAc,CAAC,OAAyC;QAC7D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC;CACF;AACD,MAAM,WAAW,GAAG,CAAC,MAAuB,EAAE,KAAc,EAAa,EAAE;IACzE,IAAI,KAAK,YAAY,KAAK,EAAE;QAC1B,OAAO,IAAI,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACrC;IACD,OAAO,IAAI,SAAS,CAAC,MAAM,EAAE,IAAI,KAAK,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport EventEmitter from 'events';\nimport produce, { enableMapSet, enablePatches, Patch } from 'immer';\nimport { ChatClientState, ChatErrors, ChatThreadClientState, ChatThreadProperties, ChatErrorTarget, ChatError } from './ChatClientState';\nimport { ChatMessageWithStatus } from './types/ChatMessageWithStatus';\nimport { ChatMessageReadReceipt, ChatParticipant } from '@azure/communication-chat';\nimport { CommunicationIdentifierKind, UnknownIdentifierKind } from '@azure/communication-common';\nimport { AzureLogger, createClientLogger, getLogLevel } from '@azure/logger';\nimport { _safeJSONStringify, toFlatCommunicationIdentifier } from '@internal/acs-ui-common';\nimport { Constants } from './Constants';\nimport { TypingIndicatorReceivedEvent } from '@azure/communication-chat';\nimport { chatStatefulLogger } from './Logger';\nenableMapSet();\n// Needed to generate state diff for verbose logging.\nenablePatches();\n\n/**\n * @private\n */\nexport class ChatContext {\n  private _state: ChatClientState = {\n    userId: ({\n      id: ''\n    } as UnknownIdentifierKind),\n    displayName: '',\n    threads: {},\n    latestErrors: ({} as ChatErrors)\n  };\n  private _batchMode = false;\n  private _logger: AzureLogger;\n  private _emitter: EventEmitter;\n  private typingIndicatorInterval: number | undefined = undefined;\n  constructor(maxListeners?: number) {\n    this._logger = createClientLogger('communication-react:chat-context');\n    this._emitter = new EventEmitter();\n    if (maxListeners) {\n      this._emitter.setMaxListeners(maxListeners);\n    }\n  }\n  public getState(): ChatClientState {\n    return this._state;\n  }\n  public modifyState(modifier: (draft: ChatClientState) => void): void {\n    const priorState = this._state;\n    this._state = produce(this._state, modifier, (patches: Patch[]) => {\n      if (getLogLevel() === 'verbose') {\n        // Log to `info` because AzureLogger.verbose() doesn't show up in console.\n        this._logger.info(`State change: ${_safeJSONStringify(patches)}`);\n      }\n    });\n    if (!this._batchMode && this._state !== priorState) {\n      this._emitter.emit('stateChanged', this._state);\n    }\n  }\n  public setThread(threadId: string, threadState: ChatThreadClientState): void {\n    this.modifyState((draft: ChatClientState) => {\n      draft.threads[threadId] = threadState;\n    });\n  }\n  public createThread(threadId: string, properties?: ChatThreadProperties): void {\n    this.modifyState((draft: ChatClientState) => {\n      draft.threads[threadId] = {\n        chatMessages: {},\n        threadId: threadId,\n        properties: properties,\n        participants: {},\n        readReceipts: [],\n        typingIndicators: [],\n        latestReadTime: new Date(0)\n      };\n    });\n  }\n  public updateChatConfig(userId: CommunicationIdentifierKind, displayName: string): void {\n    this.modifyState((draft: ChatClientState) => {\n      draft.displayName = displayName;\n      draft.userId = userId;\n    });\n  }\n  public createThreadIfNotExist(threadId: string, properties?: ChatThreadProperties): boolean {\n    const exists = Object.prototype.hasOwnProperty.call(this.getState().threads, threadId);\n    if (!exists) {\n      this.createThread(threadId, properties);\n      return true;\n    }\n    return false;\n  }\n  public updateThread(threadId: string, properties?: ChatThreadProperties): void {\n    this.modifyState((draft: ChatClientState) => {\n      const thread = draft.threads[threadId];\n      if (thread) {\n        thread.properties = properties;\n      }\n    });\n  }\n  public updateThreadTopic(threadId: string, topic?: string): void {\n    this.modifyState((draft: ChatClientState) => {\n      if (topic === undefined) {\n        return;\n      }\n      const thread = draft.threads[threadId];\n      if (thread && !thread.properties) {\n        thread.properties = {\n          topic: topic\n        };\n      } else if (thread && thread.properties) {\n        thread.properties.topic = topic;\n      }\n    });\n  }\n  public deleteThread(threadId: string): void {\n    this.modifyState((draft: ChatClientState) => {\n      const thread = draft.threads[threadId];\n      if (thread) {\n        delete draft.threads[threadId];\n      }\n    });\n  }\n  public setChatMessages(threadId: string, messages: {\n    [key: string]: ChatMessageWithStatus;\n  }): void {\n    this.modifyState((draft: ChatClientState) => {\n      const threadState = draft.threads[threadId];\n      if (threadState) {\n        threadState.chatMessages = messages;\n      }\n\n      // remove typing indicator when receive messages\n      const thread = draft.threads[threadId];\n      if (thread) {\n        for (const message of Object.values(messages)) {\n          this.filterTypingIndicatorForUser(thread, message.sender);\n        }\n      }\n    });\n  }\n  public updateChatMessageContent(threadId: string, messagesId: string, content: string | undefined): void {\n    this.modifyState((draft: ChatClientState) => {\n      const chatMessage = draft.threads[threadId]?.chatMessages[messagesId];\n      if (chatMessage) {\n        if (!chatMessage.content) {\n          chatMessage.content = {};\n        }\n        chatMessage.content.message = content;\n      }\n    });\n  }\n  public deleteLocalMessage(threadId: string, localId: string): boolean {\n    let localMessageDeleted = false;\n    this.modifyState((draft: ChatClientState) => {\n      const chatMessages = draft.threads[threadId]?.chatMessages;\n      const message: ChatMessageWithStatus | undefined = chatMessages ? chatMessages[localId] : undefined;\n      if (chatMessages && message && message.clientMessageId) {\n        delete chatMessages[message.clientMessageId];\n        localMessageDeleted = true;\n      }\n    });\n    return localMessageDeleted;\n  }\n  public deleteMessage(threadId: string, id: string): void {\n    this.modifyState((draft: ChatClientState) => {\n      const chatMessages = draft.threads[threadId]?.chatMessages;\n      if (chatMessages) {\n        delete chatMessages[id];\n      }\n    });\n  }\n  public setParticipant(threadId: string, participant: ChatParticipant): void {\n    this.modifyState((draft: ChatClientState) => {\n      const participants = draft.threads[threadId]?.participants;\n      if (participants) {\n        participants[toFlatCommunicationIdentifier(participant.id)] = participant;\n      }\n    });\n  }\n  public setParticipants(threadId: string, participants: ChatParticipant[]): void {\n    this.modifyState((draft: ChatClientState) => {\n      const participantsMap = draft.threads[threadId]?.participants;\n      if (participantsMap) {\n        for (const participant of participants) {\n          participantsMap[toFlatCommunicationIdentifier(participant.id)] = participant;\n        }\n      }\n    });\n  }\n  public deleteParticipants(threadId: string, participantIds: CommunicationIdentifierKind[]): void {\n    this.modifyState((draft: ChatClientState) => {\n      const participants = draft.threads[threadId]?.participants;\n      if (participants) {\n        participantIds.forEach(id => {\n          delete participants[toFlatCommunicationIdentifier(id)];\n        });\n      }\n    });\n  }\n  public deleteParticipant(threadId: string, participantId: CommunicationIdentifierKind): void {\n    this.modifyState((draft: ChatClientState) => {\n      const participants = draft.threads[threadId]?.participants;\n      if (participants) {\n        delete participants[toFlatCommunicationIdentifier(participantId)];\n      }\n    });\n  }\n  public addReadReceipt(threadId: string, readReceipt: ChatMessageReadReceipt): void {\n    this.modifyState((draft: ChatClientState) => {\n      const thread = draft.threads[threadId];\n      const readReceipts = thread?.readReceipts;\n      if (thread && readReceipts) {\n        // TODO(prprabhu): Replace `this.getState()` with `draft`?\n        if (readReceipt.sender !== this.getState().userId && thread.latestReadTime < readReceipt.readOn) {\n          thread.latestReadTime = readReceipt.readOn;\n        }\n        readReceipts.push(readReceipt);\n      }\n    });\n  }\n  private startTypingIndicatorCleanUp(): void {\n    if (this.typingIndicatorInterval) {\n      return;\n    }\n    this.typingIndicatorInterval = window.setInterval(() => {\n      let isTypingActive = false;\n      this.modifyState((draft: ChatClientState) => {\n        for (const thread of Object.values(draft.threads)) {\n          const filteredTypingIndicators = thread.typingIndicators.filter(typingIndicator => {\n            const timeGap = Date.now() - typingIndicator.receivedOn.getTime();\n            return timeGap < Constants.TYPING_INDICATOR_MAINTAIN_TIME;\n          });\n          if (thread.typingIndicators.length !== filteredTypingIndicators.length) {\n            thread.typingIndicators = filteredTypingIndicators;\n          }\n          if (thread.typingIndicators.length > 0) {\n            isTypingActive = true;\n          }\n        }\n      });\n      if (!isTypingActive && this.typingIndicatorInterval) {\n        window.clearInterval(this.typingIndicatorInterval);\n        this.typingIndicatorInterval = undefined;\n      }\n    }, 1000);\n  }\n  public addTypingIndicator(threadId: string, typingIndicator: TypingIndicatorReceivedEvent): void {\n    this.modifyState((draft: ChatClientState) => {\n      const thread = draft.threads[threadId];\n      if (thread) {\n        const typingIndicators = thread.typingIndicators;\n        typingIndicators.push(typingIndicator);\n      }\n    });\n\n    // Make sure we only maintain a period of typing indicator for perf purposes\n    this.startTypingIndicatorCleanUp();\n  }\n  public setChatMessage(threadId: string, message: ChatMessageWithStatus): void {\n    const {\n      id: messageId,\n      clientMessageId\n    } = message;\n    if (messageId || clientMessageId) {\n      this.modifyState((draft: ChatClientState) => {\n        const threadMessages = draft.threads[threadId]?.chatMessages;\n        const isLocalIdInMap = threadMessages && clientMessageId && threadMessages[clientMessageId];\n        const messageKey = !messageId || isLocalIdInMap ? clientMessageId : messageId;\n        if (threadMessages && messageKey) {\n          threadMessages[messageKey] = message;\n        }\n\n        // remove typing indicator when receive a message from a user\n        const thread = draft.threads[threadId];\n        if (thread) {\n          this.filterTypingIndicatorForUser(thread, message.sender);\n        }\n      });\n    }\n  }\n\n  /**\n   * Tees any errors encountered in an async function to the state.\n   *\n   * @param f Async function to execute.\n   * @param target The error target to tee error to.\n   * @returns Result of calling `f`. Also re-raises any exceptions thrown from `f`.\n   * @throws ChatError. Exceptions thrown from `f` are tagged with the failed `target.\n   */\n  public withAsyncErrorTeedToState<Args extends unknown[], R>(f: (...args: Args) => Promise<R>, target: ChatErrorTarget): (...args: Args) => Promise<R> {\n    return async (...args: Args): Promise<R> => {\n      try {\n        return await f(...args);\n      } catch (error) {\n        const chatError = toChatError(target, error);\n        this.setLatestError(target, chatError);\n        throw chatError;\n      }\n    };\n  }\n\n  /**\n   * Tees any errors encountered in an function to the state.\n   *\n   * @param f Function to execute.\n   * @param target The error target to tee error to.\n   * @returns Result of calling `f`. Also re-raises any exceptions thrown from `f`.\n   * @throws ChatError. Exceptions thrown from `f` are tagged with the failed `target.\n   */\n  public withErrorTeedToState<Args extends unknown[], R>(f: (...args: Args) => R, target: ChatErrorTarget): (...args: Args) => R {\n    return (...args: Args): R => {\n      try {\n        chatStatefulLogger.info(`Chat stateful client target function called: ${target}`);\n        return f(...args);\n      } catch (error) {\n        const chatError = toChatError(target, error);\n        this.setLatestError(target, chatError);\n        throw chatError;\n      }\n    };\n  }\n  private setLatestError(target: ChatErrorTarget, error: ChatError): void {\n    this.modifyState((draft: ChatClientState) => {\n      draft.latestErrors[target] = error;\n    });\n  }\n\n  // This is a mutating function, only use it inside of a produce() function\n  private filterTypingIndicatorForUser(thread: ChatThreadClientState, userId?: CommunicationIdentifierKind): void {\n    if (!userId) {\n      return;\n    }\n    const typingIndicators = thread.typingIndicators;\n    const userIdAsKey = toFlatCommunicationIdentifier(userId);\n    const filteredTypingIndicators = typingIndicators.filter(typingIndicator => toFlatCommunicationIdentifier(typingIndicator.sender) !== userIdAsKey);\n    if (filteredTypingIndicators.length !== typingIndicators.length) {\n      thread.typingIndicators = filteredTypingIndicators;\n    }\n  }\n\n  /**\n   * Batch updates to minimize `stateChanged` events across related operations.\n   *\n   * - A maximum of one `stateChanged` event is emitted, at the end of the operations.\n   * - No `stateChanged` event is emitted if the state did not change through the operations.\n   * - In case of an exception, state is reset to the prior value and no `stateChanged` event is emitted.\n   *\n   * All operations finished in this batch should be synchronous.\n   * This function is not reentrant -- do not call batch() from within another batch().\n   */\n  public batch(operations: () => void): void {\n    if (this._batchMode) {\n      throw new Error('batch() called from within another batch()');\n    }\n    this._batchMode = true;\n    const priorState = this._state;\n    try {\n      operations();\n      if (this._state !== priorState) {\n        this._emitter.emit('stateChanged', this._state);\n      }\n    } catch (e) {\n      this._state = priorState;\n      if (getLogLevel() === 'verbose') {\n        this._logger.warning(`State rollback to: ${_safeJSONStringify(priorState)}`);\n      }\n      throw e;\n    } finally {\n      this._batchMode = false;\n    }\n  }\n  public onStateChange(handler: (state: ChatClientState) => void): void {\n    this._emitter.on('stateChanged', handler);\n  }\n  public offStateChange(handler: (state: ChatClientState) => void): void {\n    this._emitter.off('stateChanged', handler);\n  }\n}\nconst toChatError = (target: ChatErrorTarget, error: unknown): ChatError => {\n  if (error instanceof Error) {\n    return new ChatError(target, error);\n  }\n  return new ChatError(target, new Error(`${error}`));\n};\"../../acs-ui-common/src\""]}