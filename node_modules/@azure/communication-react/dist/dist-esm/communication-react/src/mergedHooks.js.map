{"version":3,"file":"mergedHooks.js","sourceRoot":"","sources":["../../../../preprocess-dist/communication-react/src/mergedHooks.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,EAAmB,kBAAkB,EAAsB,kBAAkB,EAAE,kBAAkB,EAAE,6CAA6C;AACvJ,OAAO,EAAgB,eAAe,EAAmB,eAAe,EAAE,eAAe,EAAE,0CAA0C;AAoBrI;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAuC,QAAgB,EAAE,aAA2E,EAAE,IAAyB,EAA4D,EAAE;IACtP,oEAAoE;IACpE,8DAA8D;IAC9D,+DAA+D;IAC/D,MAAM,WAAW,GAAG,CAAC,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC;IAChD,MAAM,QAAQ,GAAG,CAAC,IAAI,IAAI,IAAI,KAAK,MAAM,CAAC;IAC1C,MAAM,SAAS,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAE,QAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IACjG,MAAM,SAAS,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAE,QAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAC3F,OAAO,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,SAAS,CAAC;AAChC,CAAC,CAAC;AAuBF;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAiD,SAAoB,EAAE,IAAyB,EAA6B,EAAE;IACxJ,MAAM,eAAe,GAAG,IAAI,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAChG,MAAM,YAAY,GAAG,IAAI,KAAK,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACvF,MAAM,SAAS,GAAG,kBAAkB,CAAC,eAAe,CAAC,CAAC;IACtD,MAAM,SAAS,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC;IAChD,MAAM,eAAe,GAAG,kBAAkB,CAA2B,SAAS,CAAC,CAAC;IAChF,MAAM,YAAY,GAAG,eAAe,CAA2B,SAAS,CAAC,CAAC;IAC1E,IAAI,SAAS,EAAE;QACb,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,0DAA0D,CAAC;SAClE;QACD,OAAQ,gCACH,SAAS,GACT,YAAY,CACR,CAAC;KACX;IACD,IAAI,SAAS,EAAE;QACb,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,qCAAqC,CAAC;SAC7C;QACD,OAAQ,gCACH,SAAS,GACT,eAAe,CACX,CAAC;KACX;IACD,IAAI,CAAC,YAAY,IAAI,CAAC,eAAe,EAAE;QACrC,MAAM,iJAAiJ,CAAC;KACzJ;SAAM;QACL,MAAM,oGAAoG,CAAC;KAC5G;AACH,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CallingHandlers, getCallingSelector, GetCallingSelector, useCallingHandlers, useCallingSelector } from '@internal/calling-component-bindings';\nimport { ChatHandlers, getChatSelector, GetChatSelector, useChatHandlers, useChatSelector } from '@internal/chat-component-bindings';\nimport { ChatClientState } from '@internal/chat-stateful-client';\nimport { CallClientState } from '@internal/calling-stateful-client';\nimport { Common } from '@internal/acs-ui-common';\n\n/**\n * Centralized state for {@link @azure/communication-calling#CallClient} or {@link @azure/communication-chat#ChatClient}.\n *\n * See also: {@link CallClientState}, {@link ChatClientState}.\n * @public\n */\nexport type ClientState = CallClientState & ChatClientState;\n\n/**\n * An optimized selector that refines {@link ClientState} updates into props for React Components in this library.\n *\n * @public\n */\nexport type Selector = (state: ClientState, props: any) => any;\n\n/**\n * Hook to obtain a selector for a specified component.\n *\n * Useful when implementing a custom component that utilizes the providers\n * exported from this library.\n *\n * @public\n */\nexport const useSelector = <ParamT extends Selector | undefined,>(selector: ParamT, selectorProps?: ParamT extends Selector ? Parameters<ParamT>[1] : undefined, type?: 'calling' | 'chat'): ParamT extends Selector ? ReturnType<ParamT> : undefined => {\n  // Because of react hooks rules, hooks can't be conditionally called\n  // We call both call and chat hooks and detect current context\n  // Return undefined and skip execution when not in that context\n  const callingMode = !type || type === 'calling';\n  const chatMode = !type || type === 'chat';\n  const callProps = useCallingSelector(callingMode ? (selector as any) : undefined, selectorProps);\n  const chatProps = useChatSelector(chatMode ? (selector as any) : undefined, selectorProps);\n  return callProps ?? chatProps;\n};\n\n/**\n * Helper type for {@link usePropsFor}.\n *\n * @public\n */\nexport type ChatReturnProps<Component extends (props: any) => JSX.Element> = GetChatSelector<Component> extends (state: ChatClientState, props: any) => any ? ReturnType<GetChatSelector<Component>> & Common<ChatHandlers, Parameters<Component>[0]> : never;\n\n/**\n * Helper type for {@link usePropsFor}.\n *\n * @public\n */\nexport type CallingReturnProps<Component extends (props: any) => JSX.Element> = GetCallingSelector<Component> extends (state: CallClientState, props: any) => any ? ReturnType<GetCallingSelector<Component>> & Common<CallingHandlers, Parameters<Component>[0]> : never;\n\n/**\n * Helper type for {@link usePropsFor}.\n *\n * @public\n */\nexport type ComponentProps<Component extends (props: any) => JSX.Element> = ChatReturnProps<Component> extends never ? CallingReturnProps<Component> extends never ? undefined : CallingReturnProps<Component> : ChatReturnProps<Component>;\n\n/**\n * Primary hook to get all hooks necessary for a React Component from this library.\n *\n * To call this hook, the component requires to be wrapped under these providers:\n *\n * 1. For chat components: {@link ChatClientProvider} and {@link ChatThreadClientProvider}.\n *\n * 2. For calling components: {@link CallClientProvider}, {@link CallAgentProvider} and {@link CallAgentProvider}.\n *\n * Most straightforward usage of a components looks like:\n *\n * @example\n * ```\n *     import { ParticipantList, usePropsFor } from '@azure/communication-react';\n *\n *     const App = (): JSX.Element => {\n *         // ... code to setup Providers ...\n *\n *         return <ParticipantList {...usePropsFor(ParticipantList)}/>\n *     }\n * ```\n *\n * @public\n */\nexport const usePropsFor = <Component extends (props: any) => JSX.Element,>(component: Component, type?: 'calling' | 'chat'): ComponentProps<Component> => {\n  const callingSelector = type === 'calling' || !type ? getCallingSelector(component) : undefined;\n  const chatSelector = type === 'chat' || !type ? getChatSelector(component) : undefined;\n  const callProps = useCallingSelector(callingSelector);\n  const chatProps = useChatSelector(chatSelector);\n  const callingHandlers = useCallingHandlers<Parameters<Component>[0]>(component);\n  const chatHandlers = useChatHandlers<Parameters<Component>[0]>(component);\n  if (chatProps) {\n    if (!chatHandlers) {\n      throw 'Please initialize chatClient and chatThreadClient first!';\n    }\n    return ({\n      ...chatProps,\n      ...chatHandlers\n    } as any);\n  }\n  if (callProps) {\n    if (!callingHandlers) {\n      throw 'Please initialize callClient first!';\n    }\n    return ({\n      ...callProps,\n      ...callingHandlers\n    } as any);\n  }\n  if (!chatSelector && !callingSelector) {\n    throw \"Can't find corresponding selector for this component. Please check the supported components from Azure Communication UI Feature Component List.\";\n  } else {\n    throw 'Could not find props for this component, ensure the component is wrapped by appropriate providers.';\n  }\n};\"../../calling-component-bindings/src\"\"../../chat-component-bindings/src\"\"../../chat-stateful-client/src\"\"../../calling-stateful-client/src\"\"../../acs-ui-common/src\""]}