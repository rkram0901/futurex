{"version":3,"file":"LocalizationProvider.js","sourceRoot":"","sources":["../../../../../preprocess-dist/react-components/src/localization/LocalizationProvider.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAEzD,OAAO,EAAE,sBAAsB,EAAE,MAAM,WAAW,CAAC;AA6CnD;;;;GAIG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,aAAa,CAAkB,sBAAsB,CAAC,CAAC;AAcpF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,KAAgC,EAAe,EAAE;IACpF,MAAM,EACJ,MAAM,EACN,QAAQ,EACT,GAAG,KAAK,CAAC;IACV,OAAO,oBAAC,aAAa,CAAC,QAAQ,IAAC,KAAK,EAAE,MAAM,IAAG,QAAQ,CAA0B,CAAC;AACpF,CAAC,CAAC;AAEF,kCAAkC;AAClC,MAAM,CAAC,MAAM,SAAS,GAAG,GAAoB,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { createContext, useContext } from 'react';\nimport { CameraButtonStrings, EndCallButtonStrings, ErrorBarStrings, MessageStatusIndicatorStrings, MessageThreadStrings, MicrophoneButtonStrings, DevicesButtonStrings, ParticipantsButtonStrings, ParticipantItemStrings, ScreenShareButtonStrings, SendBoxStrings, TypingIndicatorStrings, VideoGalleryStrings } from '../components';\nimport { COMPONENT_LOCALE_EN_US } from './locales';\n/**\n * Locale information for all components exported from this library.\n *\n * @public\n */\nexport interface ComponentLocale {\n  /** Strings for components */\n  strings: ComponentStrings;\n}\n\n/**\n * Strings used by all components exported from this library.\n *\n * @public\n */\nexport interface ComponentStrings {\n  /** Strings for MessageThread */\n  messageThread: MessageThreadStrings;\n  /** Strings for ParticipantItem */\n  participantItem: ParticipantItemStrings;\n  /** Strings for CameraButton */\n  cameraButton: CameraButtonStrings;\n  /** Strings for MicrophoneButton */\n  microphoneButton: MicrophoneButtonStrings;\n  /** Strings for EndCallButton */\n  endCallButton: EndCallButtonStrings;\n  /** Strings for DevicesButton */\n  devicesButton: DevicesButtonStrings;\n  /** Strings for ParticipantsButton */\n  participantsButton: ParticipantsButtonStrings;\n  /** Strings for ScreenShareButton */\n  screenShareButton: ScreenShareButtonStrings;\n  /** Strings for TypingIndicator */\n  typingIndicator: TypingIndicatorStrings;\n  /** Strings for SendBox */\n  sendBox: SendBoxStrings;\n  /** Strings for MessageStatusIndicator */\n  messageStatusIndicator: MessageStatusIndicatorStrings;\n  /** Strings for ErroBar */\n  errorBar: ErrorBarStrings;\n  /** Strings for VideoGallery */\n  videoGallery: VideoGalleryStrings;\n}\n\n/**\n * Context for providing localized strings to components exported from this library.\n *\n * @public\n */\nexport const LocaleContext = createContext<ComponentLocale>(COMPONENT_LOCALE_EN_US);\n\n/**\n * Props for {@link LocalizationProvider}.\n *\n * @public\n */\nexport type LocalizationProviderProps = {\n  /** Locale context to provide components */\n  locale: ComponentLocale;\n  /** Children to provide locale context. */\n  children: React.ReactNode;\n};\n\n/**\n * Provider to provide localized strings for this library's react components.\n *\n * @remarks Components will be provided localized strings in English (US) by default if this\n * provider is not used.\n *\n * @public\n */\nexport const LocalizationProvider = (props: LocalizationProviderProps): JSX.Element => {\n  const {\n    locale,\n    children\n  } = props;\n  return <LocaleContext.Provider value={locale}>{children}</LocaleContext.Provider>;\n};\n\n/** React hook to access locale */\nexport const useLocale = (): ComponentLocale => useContext(LocaleContext);"]}