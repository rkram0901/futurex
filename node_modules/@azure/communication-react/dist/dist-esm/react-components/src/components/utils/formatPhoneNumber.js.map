{"version":3,"file":"formatPhoneNumber.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-components/src/components/utils/formatPhoneNumber.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,WAAmB,EAAU,EAAE;IAC/D,6EAA6E;IAC7E,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,WAAW,CAAC;KACpB;IAED,8DAA8D;IAC9D,kEAAkE;IAClE,iFAAiF;IACjF,qEAAqE;IACrE,IAAI,aAAa,GAAG,EAAE,CAAC;IACvB,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC1B,aAAa,GAAG,IAAI,CAAC;QACrB,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;KACxD;SAAM,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACjC,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;QAC9C,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;KACxD;IAED,sFAAsF;IACtF,MAAM,iBAAiB,GAAG,WAAW,CAAC,MAAM,CAAC;IAE7C,8EAA8E;IAC9E,qFAAqF;IACrF,qEAAqE;IAErE,IAAI,iBAAiB,GAAG,CAAC,IAAI,iBAAiB,GAAG,EAAE,EAAE;QACnD,4DAA4D;QAC5D,OAAO,aAAa,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,WAAW,CAAC;KACrD;IAED,2EAA2E;IAC3E,uBAAuB;IACvB,IAAI,iBAAiB,GAAG,CAAC,EAAE;QACzB,OAAO,GAAG,aAAa,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;KAC/E;IAED,2EAA2E;IAC3E,mCAAmC;IACnC,OAAO,GAAG,aAAa,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC;AAC/H,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * @private\n */\nexport const formatPhoneNumber = (phoneNumber: string): string => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!phoneNumber) {\n    return phoneNumber;\n  }\n\n  // if phone number starts with 1, format like 1 (xxx)xxx-xxxx.\n  // if phone number starts with +, we format like +x (xxx)xxx-xxxx.\n  // For now we are only supporting NA phone number formatting with country code +x\n  // first we chop off the countrycode then we add it on when returning\n  let countryCodeNA = '';\n  if (phoneNumber[0] === '1') {\n    countryCodeNA = '1 ';\n    phoneNumber = phoneNumber.slice(1, phoneNumber.length);\n  } else if (phoneNumber[0] === '+') {\n    countryCodeNA = phoneNumber.slice(0, 2) + ' ';\n    phoneNumber = phoneNumber.slice(2, phoneNumber.length);\n  }\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code too early\n  // if phoneNumberLength is greater than 10 we don't do any formatting\n\n  if (phoneNumberLength < 4 || phoneNumberLength > 10) {\n    // no formatting in this case, remove ' ' behind countrycode\n    return countryCodeNA.replace(' ', '') + phoneNumber;\n  }\n\n  // if phoneNumberLength is greater than 4 and less the 7 we start to return\n  // the formatted number\n  if (phoneNumberLength < 7) {\n    return `${countryCodeNA}(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n  }\n\n  // finally, if the phoneNumberLength is greater then seven, we add the last\n  // bit of formatting and return it.\n  return `${countryCodeNA}(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, phoneNumber.length)}`;\n};"]}