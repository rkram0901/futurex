{"version":3,"file":"ControlBar.js","sourceRoot":"","sources":["../../../../../preprocess-dist/react-components/src/components/ControlBar.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAU,WAAW,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAC;AAC7D,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEvC,OAAO,EAAE,gBAAgB,EAAE,MAAM,4BAA4B,CAAC;AAC9D,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AACrD,MAAM,YAAY,GAAW;IAC3B,QAAQ,EAAE,UAAU;IACpB,MAAM,EAAE,MAAM;IACd,KAAK,EAAE,MAAM;CACd,CAAC;AAmCF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAAsB,EAAe,EAAE;IAChE,MAAM,EACJ,MAAM,EACN,MAAM,EACP,GAAG,KAAK,CAAC;IACV,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,MAAM,mBAAmB,GAAG,OAAO,CAAC,GAAG,EAAE;QACvC,MAAM,eAAe,GAAG,gBAAgB,CAAC,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,YAAY,CAAC,CAAC;QACjE,iIAAiI;QACjI,MAAM,eAAe,GAAG;YACtB,UAAU,EAAE,YAAY,CAAC,KAAK,CAAC,KAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,CAAC,UAAU,CAAC,CAAA,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK;SAC7H,CAAC;QACF,MAAM,uBAAuB,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,CAAC,UAAU,CAAC,EAAC,CAAC,CAAC;YAC/D,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,WAAW;YACpC,YAAY,EAAE,KAAK,CAAC,OAAO,CAAC,cAAc;SAC3C,CAAC,CAAC,CAAC,EAAE,CAAC;QACP,0HAA0H;QAC1H,gDAAgD;QAChD,MAAM,sBAAsB,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,KAAK,aAAa,IAAI,MAAM,KAAK,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACtG,SAAS,EAAE,iBAAiB;SAC7B,CAAC,CAAC,CAAC,EAAE,CAAC;QACP,OAAO,WAAW,CAAC,eAAe,EAAE,eAAe,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,CAAC,CAAC;IACtH,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IAClC,OAAO,6BAAK,SAAS,EAAE,WAAW,CAAC,YAAY,CAAC;QAC5C,oBAAC,KAAK,IAAC,SAAS,EAAE,mBAAmB,IAAG,KAAK,CAAC,QAAQ,CAAS,CAC3D,CAAC;AACX,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { IStyle, mergeStyles, Stack } from '@fluentui/react';\nimport React, { useMemo } from 'react';\nimport { BaseCustomStyles } from '../types';\nimport { controlBarStyles } from './styles/ControlBar.styles';\nimport { useTheme } from '../theming';\nimport { isDarkThemed } from '../theming/themeUtils';\nconst mainDivStyle: IStyle = {\n  position: 'relative',\n  height: '100%',\n  width: '100%'\n};\n\n/**\n * Present layouts for the {@link ControlBar}.\n *\n * @public\n */\nexport type ControlBarLayout = 'horizontal' | 'vertical' | 'dockedTop' | 'dockedBottom' | 'dockedLeft' | 'dockedRight' | 'floatingTop' | 'floatingBottom' | 'floatingLeft' | 'floatingRight';\n\n/**\n * Props for {@link ControlBar}.\n *\n * @public\n */\nexport interface ControlBarProps {\n  /** React Child components. */\n  children?: React.ReactNode;\n  /**\n   * Allows users to pass an object containing custom CSS styles.\n   * @Example\n   * ```\n   * <ControlBar styles={{ root: { background: 'blue' } }} />\n   * ```\n   */\n  styles?: BaseCustomStyles;\n  /**\n   * Changes the layout of the control bar.\n   * Available layouts are `horizontal`, `vertical`, `dockedTop`, `dockedBottom`,\n   * `dockedLeft`, `dockedRight`, `floatingTop`, `floatingBottom`, `floatingLeft`,\n   * `floatingRight`\n   * Defaults to a `horizontal` layout.\n   */\n  layout?: ControlBarLayout;\n}\n\n/**\n * A container for various buttons for call controls.\n *\n * Use with various call control buttons in this library, e.g., {@link CameraButton}, or your own instances of\n * {@link ControlBarButton} directly.\n *\n * @public\n */\nexport const ControlBar = (props: ControlBarProps): JSX.Element => {\n  const {\n    styles,\n    layout\n  } = props;\n  const theme = useTheme();\n  const controlBarClassName = useMemo(() => {\n    const controlBarStyle = controlBarStyles[layout ?? 'horizontal'];\n    // if theme is dark and layout is floating then use palette.neutralQuaternaryAlt as background, otherwise use theme.palette.white\n    const backgroundStyle = {\n      background: isDarkThemed(theme) && layout?.startsWith('floating') ? theme.palette.neutralQuaternaryAlt : theme.palette.white\n    };\n    const borderAndBoxShadowStyle = layout?.startsWith('floating') ? {\n      boxShadow: theme.effects.elevation16,\n      borderRadius: theme.effects.roundedCorner6\n    } : {};\n    // if rtl is true and layout is either floatingTop or floatingBottom then we need to override the transform-style property\n    // to translate 50% to right instead of the left\n    const transformOverrideStyle = theme.rtl && (layout === 'floatingTop' || layout === 'floatingBottom') ? {\n      transform: 'translateX(50%)'\n    } : {};\n    return mergeStyles(controlBarStyle, backgroundStyle, borderAndBoxShadowStyle, transformOverrideStyle, styles?.root);\n  }, [layout, styles?.root, theme]);\n  return <div className={mergeStyles(mainDivStyle)}>\n      <Stack className={controlBarClassName}>{props.children}</Stack>\n    </div>;\n};"]}