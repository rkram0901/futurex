// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { useMemo } from 'react';
/**
 * @private
 */
export const useVideoTileContextualMenuProps = (props) => {
    const { view, strings, isPinned, onPinParticipant, onUnpinParticipant } = props;
    const scalingMode = useMemo(() => {
        return undefined;
    }, []);
    const contextualMenuProps = useMemo(() => {
        const items = [];
        if (isPinned !== undefined) {
            if (isPinned && onUnpinParticipant && (strings === null || strings === void 0 ? void 0 : strings.unpinParticipantForMe)) {
                items.push({
                    key: 'unpin',
                    text: strings.unpinParticipantForMe,
                    iconProps: {
                        iconName: 'UnpinParticipant',
                        styles: {
                            root: {
                                lineHeight: '1rem'
                            }
                        }
                    },
                    onClick: () => onUnpinParticipant === null || onUnpinParticipant === void 0 ? void 0 : onUnpinParticipant(props.remoteParticipant.userId),
                    'data-ui-id': 'video-tile-unpin-participant-button'
                });
            }
            if (!isPinned && onPinParticipant && (strings === null || strings === void 0 ? void 0 : strings.pinParticipantForMe)) {
                items.push({
                    key: 'pin',
                    text: strings.pinParticipantForMe,
                    iconProps: {
                        iconName: 'PinParticipant',
                        styles: {
                            root: {
                                lineHeight: '1rem'
                            }
                        }
                    },
                    onClick: () => onPinParticipant === null || onPinParticipant === void 0 ? void 0 : onPinParticipant(props.remoteParticipant.userId),
                    'data-ui-id': 'video-tile-pin-participant-button'
                });
            }
        }
        if (scalingMode) {
            if (scalingMode === 'Crop' && (strings === null || strings === void 0 ? void 0 : strings.fitRemoteParticipantToFrame)) {
                items.push({
                    key: 'fitRemoteParticipantToFrame',
                    text: strings.fitRemoteParticipantToFrame,
                    iconProps: {
                        iconName: 'VideoTileScaleFit',
                        styles: {
                            root: {
                                lineHeight: '1rem'
                            }
                        }
                    },
                    onClick: () => {
                        view === null || view === void 0 ? void 0 : view.updateScalingMode('Fit');
                    }
                });
            }
            else if (scalingMode === 'Fit' && (strings === null || strings === void 0 ? void 0 : strings.fillRemoteParticipantFrame)) {
                {
                    items.push({
                        key: 'fillRemoteParticipantFrame',
                        text: strings.fillRemoteParticipantFrame,
                        iconProps: {
                            iconName: 'VideoTileScaleFill',
                            styles: {
                                root: {
                                    lineHeight: '1rem'
                                }
                            }
                        },
                        onClick: () => {
                            view === null || view === void 0 ? void 0 : view.updateScalingMode('Crop');
                        }
                    });
                }
            }
        }
        if (items.length === 0) {
            return undefined;
        }
        return {
            items
        };
    }, [scalingMode, strings, view, isPinned, onPinParticipant, onUnpinParticipant, props.remoteParticipant.userId]);
    return contextualMenuProps;
};
//# sourceMappingURL=useVideoTileContextualMenuProps.js.map