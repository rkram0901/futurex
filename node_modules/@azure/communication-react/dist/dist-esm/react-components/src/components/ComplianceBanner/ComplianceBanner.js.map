{"version":3,"file":"ComplianceBanner.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-components/src/components/ComplianceBanner/ComplianceBanner.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport React, { useRef } from 'react';\nimport { ComplianceState, computeVariant } from './Utils';\nimport { _ComplianceBannerProps } from './types';\nimport { DelayedUpdateBanner } from './DelayedUpdateBanner';\n\n// latestBooleanState so we can compare with props.callRecordState and props.callTranscribeState easily\n// latestStringState is on, off, stopped state generated by function determineStates using previous and current state values, this is used for computeVariants later\ntype CachedComplianceBannerProps = {\n  latestBooleanState: {\n    callTranscribeState?: boolean;\n    callRecordState?: boolean;\n  };\n  latestStringState: {\n    callTranscribeState: ComplianceState;\n    callRecordState: ComplianceState;\n  };\n  // Timestamp for the last time cached state was updated.\n  // Represented as milliseconds since epoch (i.e., the value returned by Date.now()).\n  lastUpdated: number;\n};\n\n/**\n * A component that displays banners to notify the user when call recording and\n * transcription is enabled or disabled in a call.\n *\n * This component implements a state machine that tracks the changes to call\n * recording and transcription state and shows the corresponding message.\n *\n * @internal\n */\nexport const _ComplianceBanner = (props: _ComplianceBannerProps): JSX.Element => {\n  const cachedProps = useRef<CachedComplianceBannerProps>({\n    latestBooleanState: {\n      callTranscribeState: false,\n      callRecordState: false\n    },\n    latestStringState: {\n      callTranscribeState: 'off',\n      callRecordState: 'off'\n    },\n    lastUpdated: Date.now()\n  });\n\n  // Only update cached props and variant if there is _some_ change in the latest props.\n  // This ensures that state machine is only updated if there is an actual change in the props.\n  const shouldUpdateCached = props.callRecordState !== cachedProps.current.latestBooleanState.callRecordState || props.callTranscribeState !== cachedProps.current.latestBooleanState.callTranscribeState;\n\n  // The following three operations must be performed in this exact order:\n\n  // [1]: Update cached state to transition the state machine.\n  if (shouldUpdateCached) {\n    cachedProps.current = {\n      latestBooleanState: props,\n      latestStringState: {\n        callRecordState: determineStates(cachedProps.current.latestStringState.callRecordState, props.callRecordState),\n        callTranscribeState: determineStates(cachedProps.current.latestStringState.callTranscribeState, props.callTranscribeState)\n      },\n      lastUpdated: Date.now()\n    };\n  }\n\n  // [2]: Compute the variant, using the transitioned state machine.\n  const variant = computeVariant(cachedProps.current.latestStringState.callRecordState, cachedProps.current.latestStringState.callTranscribeState);\n\n  // [3]: Transition the state machine again to deal with some end-states.\n  if (shouldUpdateCached && cachedProps.current.latestStringState.callRecordState === 'stopped' && cachedProps.current.latestStringState.callTranscribeState === 'stopped') {\n    // When both states are stopped, after displaying message \"RECORDING_AND_TRANSCRIPTION_STOPPED\", change both states to off (going back to the default state).\n    cachedProps.current.latestStringState.callRecordState = 'off';\n    cachedProps.current.latestStringState.callTranscribeState = 'off';\n  }\n  return <DelayedUpdateBanner variant={{\n    variant,\n    lastUpdated: cachedProps.current.lastUpdated\n  }} strings={props.strings} onDismiss={() => {\n    if (cachedProps.current.latestStringState.callRecordState === 'stopped') {\n      cachedProps.current.latestStringState.callRecordState = 'off';\n    }\n    if (cachedProps.current.latestStringState.callTranscribeState === 'stopped') {\n      cachedProps.current.latestStringState.callTranscribeState = 'off';\n    }\n  }} />;\n};\nfunction determineStates(previous: ComplianceState, current: boolean | undefined): ComplianceState {\n  // if current state is on, then return on\n  if (current) {\n    return 'on';\n  }\n  // if current state is off\n  else {\n    // if previous state is on and current state is off, return stopped (on -> off)\n    if (previous === 'on') {\n      return 'stopped';\n    }\n    // otherwise remain previous state unchanged\n    else {\n      return previous;\n    }\n  }\n}"]}