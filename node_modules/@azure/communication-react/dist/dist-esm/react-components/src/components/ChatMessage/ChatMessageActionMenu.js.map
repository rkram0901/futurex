{"version":3,"file":"ChatMessageActionMenu.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-components/src/components/ChatMessage/ChatMessageActionMenu.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,IAAI,EAAE,WAAW,EAAS,MAAM,iBAAiB,CAAC;AAC3D,OAAO,EAAa,GAAG,EAAE,MAAM,2BAA2B,CAAC;AAE3D,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,uCAAuC,CAAC;AAOzF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,SAU1C,EAA0C,EAAE;IAC3C,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;QACtB,OAAO,SAAS,CAAC;KAClB;IACD,MAAM,SAAS,GAAG,WAAW,CAAC,cAAc,EAAE;QAC5C,KAAK,EAAE;YACL,SAAS,EAAE,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU;YAC7C,eAAe,EAAE,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK;SAC/C;KACF,CAAC,CAAC;IACH,MAAM,eAAe,GAA+B;QAClD,cAAc,EAAE,SAAS,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;QAC/D,QAAQ,EAAE,IAAI;QACd,WAAW,EAAE,CAAC,CAAC;QACf,SAAS,EAAE,SAAS;QACpB,WAAW,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,mBAAmB,EAAE;QAClD,KAAK,EAAE,CAAC;gBACN,QAAQ,EAAE,oBAAC,GAAG,IAAC,QAAQ,EAAE,SAAS,CAAC,aAAa;oBAC1C,oBAAC,IAAI,IAAC,QAAQ,EAAC,oBAAoB,gBAAY,oCAAoC,gBAAa,SAAS,CAAC,SAAS,EAAE,MAAM,EAAE,gBAAgB,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,SAAS,CAAC,GAAI,CACnL;gBACV,GAAG,EAAE,YAAY;gBACjB,SAAS,EAAE,KAAK;aACjB,CAAC;KACH,CAAC;IACF,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Icon, mergeStyles, Theme } from '@fluentui/react';\nimport { MenuProps, Ref } from '@fluentui/react-northstar';\nimport { _formatString } from '@internal/acs-ui-common';\nimport React from 'react';\nimport { chatActionsCSS, iconWrapperStyle } from '../styles/ChatMessageComponent.styles';\n\n/** @private */\nexport type ChatMessageActionMenuProps = MenuProps & {\n  showActionMenu?: boolean | undefined;\n};\n\n/**\n * Props for the Chat.Message action menu.\n * This is the 3 dots that appear when hovering over one of your own chat messages.\n *\n * @private\n */\nexport const chatMessageActionMenuProps = (menuProps: {\n  /** String for aria label that is read by Screen readers */\n  ariaLabel?: string;\n  /** Whether the action menu button is enabled, if not this will always return undefined */\n  enabled: boolean;\n  /** Whether to force showing the action menu button - this has no effect if the action menu button is not enabled */\n  forceShow: boolean;\n  menuButtonRef: React.MutableRefObject<HTMLElement | null>;\n  onActionButtonClick: () => void;\n  theme: Theme;\n}): ChatMessageActionMenuProps | undefined => {\n  if (!menuProps.enabled) {\n    return undefined;\n  }\n  const menuClass = mergeStyles(chatActionsCSS, {\n    'ul&': {\n      boxShadow: menuProps.theme.effects.elevation4,\n      backgroundColor: menuProps.theme.palette.white\n    }\n  });\n  const actionMenuProps: ChatMessageActionMenuProps = {\n    showActionMenu: menuProps.forceShow === true ? true : undefined,\n    iconOnly: true,\n    activeIndex: -1,\n    className: menuClass,\n    onItemClick: () => menuProps.onActionButtonClick(),\n    items: [{\n      children: <Ref innerRef={menuProps.menuButtonRef}>\n            <Icon iconName=\"ChatMessageOptions\" data-ui-id=\"chat-composite-message-action-icon\" aria-label={menuProps.ariaLabel} styles={iconWrapperStyle(menuProps.theme, menuProps.forceShow)} />\n          </Ref>,\n      key: 'menuButton',\n      indicator: false\n    }]\n  };\n  return actionMenuProps;\n};\"../../../../acs-ui-common/src\""]}