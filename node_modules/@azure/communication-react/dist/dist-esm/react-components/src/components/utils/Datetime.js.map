{"version":3,"file":"Datetime.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-components/src/components/utils/Datetime.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { MessageThreadStrings } from '../MessageThread';\n\n/**\n * @private\n */\nexport const formatTimeForChatMessage = (messageDate: Date): string => {\n  let hours = messageDate.getHours();\n  let minutes = messageDate.getMinutes().toString();\n  const isAm = hours < 12;\n  if (hours > 12) {\n    hours = hours - 12;\n  }\n  if (hours === 0) {\n    hours = 12;\n  }\n  if (minutes.length < 2) {\n    minutes = '0' + minutes;\n  }\n  return hours.toString() + ':' + minutes + ' ' + (isAm ? 'a.m.' : 'p.m.');\n};\n\n/**\n * @private\n */\nexport const formatDateForChatMessage = (messageDate: Date): string => {\n  const year = messageDate.getFullYear().toString();\n  let month = (messageDate.getMonth() + 1).toString();\n  let day = messageDate.getDate().toString();\n  if (month.length === 1) {\n    month = '0' + month;\n  }\n  if (day.length === 1) {\n    day = '0' + day;\n  }\n  return year + '-' + month + '-' + day;\n};\n\n/**\n * Given a message date object in ISO8601 and a current date object, generates a user friendly timestamp text like the\n * following:\n *\n * 1:30 p.m.\n * Yesterday 1:30 p.m.\n * Monday 1:30 p.m.\n * 2021-01-10 1:30 p.m.\n *\n * If message is after yesterday, then only show the time.\n * If message is before yesteray and after day before yesterday, then show 'Yesterday' plus the time.\n * If message is before day before yesterday and within the current week, then show 'Monday/Tuesday/etc' plus the time.\n *   - We consider start of the week as Sunday. If current day is Sunday, then any time before that is in previous week.\n * If message is in previous or older weeks, then show date string plus the time.\n *\n * @param messageDate - date of message\n * @param currentDate - date used as offset to create the user friendly timestamp (e.g. to create 'Yesterday' instead of an absolute date)\n *\n * @private\n */\nexport const formatTimestampForChatMessage = (messageDate: Date, todayDate: Date, dateStrings: MessageThreadStrings): string => {\n  // If message was in the same day timestamp string is just the time like '1:30 p.m.'.\n  const startOfDay = new Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate());\n  if (messageDate > startOfDay) {\n    return formatTimeForChatMessage(messageDate);\n  }\n\n  // If message was yesterday then timestamp string is like this 'Yesterday 1:30 p.m.'.\n  const yesterdayDate = new Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate() - 1);\n  if (messageDate > yesterdayDate) {\n    return dateStrings.yesterday + ' ' + formatTimeForChatMessage(messageDate);\n  }\n\n  // If message was before Sunday and today is Sunday (start of week) then timestamp string is like\n  // '2021-01-10 1:30 p.m.'.\n  const weekDay = todayDate.getDay();\n  if (weekDay === 0) {\n    return formatDateForChatMessage(messageDate) + ' ' + formatTimeForChatMessage(messageDate);\n  }\n\n  // If message was before first day of the week then timestamp string is like Monday 1:30 p.m.\n  const firstDayOfTheWeekDate = new Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate() - weekDay);\n  if (messageDate > firstDayOfTheWeekDate) {\n    return dayToDayName(messageDate.getDay(), dateStrings) + ' ' + formatTimeForChatMessage(messageDate);\n  }\n\n  // If message date is in previous or older weeks then timestamp string is like 2021-01-10 1:30 p.m.\n  return formatDateForChatMessage(messageDate) + ' ' + formatTimeForChatMessage(messageDate);\n};\nconst dayToDayName = (day: number, dateStrings: MessageThreadStrings): string => {\n  switch (day) {\n    case 0:\n      return dateStrings.sunday;\n    case 1:\n      return dateStrings.monday;\n    case 2:\n      return dateStrings.tuesday;\n    case 3:\n      return dateStrings.wednesday;\n    case 4:\n      return dateStrings.thursday;\n    case 5:\n      return dateStrings.friday;\n    case 6:\n      return dateStrings.saturday;\n    default:\n      throw new Error(`Invalid day [${day}] passed`);\n  }\n};"]}