// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { 
// eslint-disable-next-line no-restricted-imports
Icon, mergeStyles, ProgressIndicator, Stack, Text, useTheme } from '@fluentui/react';
import { getFileTypeIconProps } from '@fluentui/react-file-type-icons';
import React from 'react';
import { _pxToRem } from "../../../acs-ui-common/src";
import { Announcer } from './Announcer';
import { useEffect, useState } from 'react';
import { useLocaleFileCardStringsTrampoline } from './utils/common';
/**
 * @internal
 * A component for displaying a file card with file icon and progress bar.
 */
export const _FileCard = (props) => {
    var _a, _b, _c, _d;
    const { fileName, fileExtension, progress, actionIcon } = props;
    const theme = useTheme();
    const [announcerString, setAnnouncerString] = useState(undefined);
    const localeStrings = useLocaleFileCardStringsTrampoline();
    const uploadStartedString = (_b = (_a = props.strings) === null || _a === void 0 ? void 0 : _a.uploading) !== null && _b !== void 0 ? _b : localeStrings.uploading;
    const uploadCompletedString = (_d = (_c = props.strings) === null || _c === void 0 ? void 0 : _c.uploadCompleted) !== null && _d !== void 0 ? _d : localeStrings.uploadCompleted;
    const showProgressIndicator = progress !== undefined && progress > 0 && progress < 1;
    useEffect(() => {
        if (showProgressIndicator) {
            setAnnouncerString(`${uploadStartedString} ${fileName}`);
        }
        else if (progress === 1) {
            setAnnouncerString(`${fileName} ${uploadCompletedString}`);
        }
        else {
            setAnnouncerString(undefined);
        }
    }, [progress, showProgressIndicator, fileName, uploadStartedString, uploadCompletedString]);
    const progressBarThicknessPx = 4;
    const containerClassName = mergeStyles({
        width: '12rem',
        background: theme.palette.neutralLighter,
        borderRadius: theme.effects.roundedCorner4,
        border: `${_pxToRem(1)} solid ${theme.palette.neutralQuaternary}`,
        cursor: 'pointer'
    });
    const fileInfoWrapperClassName = mergeStyles({
        padding: _pxToRem(12),
        // To make space for the progress indicator.
        paddingBottom: showProgressIndicator ? _pxToRem(12 - progressBarThicknessPx * 2) : _pxToRem(12)
    });
    const fileNameContainerClassName = mergeStyles({
        paddingLeft: _pxToRem(4),
        minWidth: '75%',
        maxWidth: '75%'
    });
    const fileNameTextClassName = mergeStyles({
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        lineHeight: 'normal',
        whiteSpace: 'nowrap',
        paddingRight: _pxToRem(4)
    });
    const actionIconClassName = mergeStyles({
        cursor: 'pointer'
    });
    const progressIndicatorStyles = {
        itemProgress: {
            padding: `${_pxToRem(progressBarThicknessPx - 1)} 0`,
            // item progress height won't apply without an explicit padding
            // To make the progress indicator border curve along the bottom of file card.
            borderRadius: `0 0 ${theme.effects.roundedCorner4} ${theme.effects.roundedCorner4}`
        },
        progressBar: {
            height: _pxToRem(progressBarThicknessPx)
        }
    };
    return React.createElement("div", { "data-is-focusable": true },
        React.createElement(Announcer, { announcementString: announcerString, ariaLive: 'polite' }),
        React.createElement(Stack, { className: containerClassName, onClick: () => {
                var _a;
                (_a = props.actionHandler) === null || _a === void 0 ? void 0 : _a.call(props);
            } },
            React.createElement(Stack, { horizontal: true, horizontalAlign: "space-between", verticalAlign: "center", className: fileInfoWrapperClassName },
                React.createElement(Stack, null,
                    React.createElement(Icon, Object.assign({ "data-ui-id": 'filetype-icon' }, getFileTypeIconProps({
                        extension: fileExtension,
                        size: 24,
                        imageFileType: 'svg'
                    })))),
                React.createElement(Stack, { className: fileNameContainerClassName },
                    React.createElement(Text, { className: fileNameTextClassName }, fileName)),
                React.createElement(Stack, { verticalAlign: "center", className: actionIconClassName }, actionIcon && actionIcon)),
            showProgressIndicator && React.createElement(ProgressIndicator, { percentComplete: progress, styles: progressIndicatorStyles })));
};
//# sourceMappingURL=FileCard.js.map