{"version":3,"file":"PictureInPictureInPicture.js","sourceRoot":"","sources":["../../../../../../preprocess-dist/react-components/src/components/PictureInPictureInPicture/PictureInPictureInPicture.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,KAAqB,MAAM,OAAO,CAAC;AAC1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AACjE,OAAO,EAAE,oCAAoC,EAAE,sCAAsC,EAAuC,MAAM,iCAAiC,CAAC;AA2BpK;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,KAAsC,EAAe,EAAE;IAChG,OAAO,oBAAC,kCAAkC,IAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,WAAW,EAAE,oBAAC,oCAAoC,oBAAK,KAAK,CAAC,WAAW,EAAI,EAAE,aAAa,EAAE,KAAK,CAAC,aAAa,IAAI,oBAAC,sCAAsC,oBAAK,KAAK,CAAC,aAAa,EAAI,EAAE,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,aAAa,GAAI,CAAC;AACzS,CAAC,CAAC;AACF;;;GAGG;AACH,MAAM,kCAAkC,GAAG,CAAC,KAK3C,EAAe,EAAE;IAChB,MAAM,UAAU,GAAG,CAAC,CAAmC,EAAQ,EAAE,CAAC,KAAK,CAAC,OAAO,IAAI,kBAAkB,CAAC,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IACxH,OAAO,+BAAO,KAAK,EAAE,mBAAmB,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,gBAAc,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,gBAC5I,oCAAoC;QAC1C,KAAK,CAAC,WAAW;QAClB,6BAAK,KAAK,EAAE,2BAA2B,IAAG,KAAK,CAAC,aAAa,CAAO,CAC9D,CAAC;AACb,CAAC,CAAC;AACF,MAAM,mBAAmB,GAAwB;IAC/C,OAAO,EAAE,MAAM;IACf,KAAK,EAAE,aAAa;IACpB,QAAQ,EAAE,UAAU;IACpB,MAAM,EAAE,SAAS;CAClB,CAAC;AACF,MAAM,2BAA2B,GAAwB;IACvD,uFAAuF;IACvF,QAAQ,EAAE,UAAU;IACpB,MAAM,EAAE,UAAU;IAClB,KAAK,EAAE,UAAU;CAClB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { ReactChild } from 'react';\nimport { submitWithKeyboard } from '../utils/keyboardNavigation';\nimport { PictureInPictureInPicturePrimaryTile, PictureInPictureInPictureSecondaryTile, _PictureInPictureInPictureTileProps } from './PictureInPictureInPictureTile';\n\n/**\n * Strings of {@link _PictureInPictureInPicture} that can be overridden.\n *\n * @internal\n */\nexport interface _PictureInPictureInPictureStrings {\n  /** Aria-label for the focusable root of the PictureInPictureInPicture component. */\n  rootAriaLabel: string;\n}\n\n/**\n * Props for {@link _PictureInPictureInPicture} component.\n *\n * @internal\n */\nexport interface _PictureInPictureInPictureProps {\n  /**\n   * Callback when the {@link _PictureInPictureInPicture} is clicked.\n   */\n  onClick?: () => void;\n  primaryTile: _PictureInPictureInPictureTileProps;\n  secondaryTile?: _PictureInPictureInPictureTileProps;\n  strings: _PictureInPictureInPictureStrings;\n}\n\n/**\n * Component that displays a video feed for use as a Picture-in-Picture style component.\n * It contains a secondary video feed resulting in an inner Picture-in-Picture style feed.\n *\n * @remarks\n * The double nature of the Picture-in-Picture styles is where this component gets its name; Picture-in-Picture-in-Picture.\n *\n * @internal\n */\nexport const _PictureInPictureInPicture = (props: _PictureInPictureInPictureProps): JSX.Element => {\n  return <PictureInPictureInPictureContainer onClick={props.onClick} primaryView={<PictureInPictureInPicturePrimaryTile {...props.primaryTile} />} secondaryView={props.secondaryTile && <PictureInPictureInPictureSecondaryTile {...props.secondaryTile} />} ariaLabel={props.strings.rootAriaLabel} />;\n};\n/**\n * Container for the picture in picture in picture component.\n * This governs positioning and floating of the secondary PiP.\n */\nconst PictureInPictureInPictureContainer = (props: {\n  primaryView: ReactChild;\n  secondaryView?: ReactChild;\n  onClick?: () => void;\n  ariaLabel: string;\n}): JSX.Element => {\n  const onKeyPress = (e: React.KeyboardEvent<HTMLElement>): void => props.onClick && submitWithKeyboard(e, props.onClick);\n  return <aside style={tileContainerStyles} onClick={props.onClick} onKeyPress={onKeyPress} aria-label={props.ariaLabel} tabIndex={props.onClick ? 0 : -1} // Only allow focus to be set if there is a click handler\n  data-ui-id=\"picture-in-picture-in-picture-root\">\n      {props.primaryView}\n      <div style={secondaryTileFloatingStyles}>{props.secondaryView}</div>\n    </aside>;\n};\nconst tileContainerStyles: React.CSSProperties = {\n  display: 'flex',\n  width: 'min-content',\n  position: 'relative',\n  cursor: 'pointer'\n};\nconst secondaryTileFloatingStyles: React.CSSProperties = {\n  // The secondary tile should float above the primary tile, aligned to the bottom right.\n  position: 'absolute',\n  bottom: '0.125rem',\n  right: '0.125rem'\n};"]}