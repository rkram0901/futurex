import { VideoGalleryParticipant, VideoGalleryRemoteParticipant } from '../../../types';
/**
 * Arguments for {@link useFloatingLocalVideoLayout } to determine grid participants and horizontal participants
 * @private
 */
export interface UseFloatingLocalVideoLayoutArgs {
    remoteParticipants: VideoGalleryRemoteParticipant[];
    dominantSpeakers?: string[];
    maxRemoteVideoStreams?: number;
    maxAudioDominantSpeakers?: number;
    isScreenShareActive?: boolean;
}
/**
 * Arguments for {@link usePinnedParticipantLayout } to determine grid participants and horizontal participants
 * @private
 */
export interface UsePinnedParticipantLayoutArgs extends UseFloatingLocalVideoLayoutArgs {
    pinnedParticipantUserIds: string[];
}
/**
 * A layout result that defines grid participants and horizontal participants
 * @private
 */
export interface LayoutResult {
    gridParticipants: VideoGalleryParticipant[];
    horizontalGalleryParticipants: VideoGalleryParticipant[];
}
/**
 * @private
 */
export declare const useFloatingLocalVideoLayout: (props: UseFloatingLocalVideoLayoutArgs) => LayoutResult;
/**
 * @private
 */
export declare const usePinnedParticipantLayout: (props: UsePinnedParticipantLayoutArgs) => LayoutResult;
//# sourceMappingURL=videoGalleryLayoutUtils.d.ts.map