{"version":3,"file":"dominantSpeaker.js","sourceRoot":"","sources":["../../../../../preprocess-dist/react-components/src/gallery/dominantSpeaker.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { VideoGalleryRemoteParticipant } from '../types';\ntype SmartDominantSpeakerParticipantsArgs = {\n  /**\n   * Array containing all participants of a call. {@link @azure/communication-react#VideoGalleryRemoteParticipant}\n   */\n  participants: VideoGalleryRemoteParticipant[];\n  /**\n   * An array containing the userId of dominant speakers\n   * in a call in the order of their dominance. 0th index is the most dominant, 1st is the second most etc\n   */\n  dominantSpeakers?: string[];\n  /**\n   * Array containing currently rendered (visible)\n   * participants in the call. {@link @azure/communication-react#VideoGalleryRemoteParticipant}\n   */\n  lastVisibleParticipants?: VideoGalleryRemoteParticipant[];\n  /**\n   * Maximum number of dominant speaker positions to move participants in.\n   */\n  maxDominantSpeakers: number;\n};\n\n/**\n * Calculates the participants that should be rendered based on the list of dominant\n * speakers and currently rendered participants in a call.\n * @param args - SmartDominantSpeakerParticipantsArgs\n * @returns VideoGalleryRemoteParticipant[] {@link @azure/communication-react#VideoGalleryRemoteParticipant}\n */\nexport const smartDominantSpeakerParticipants = (args: SmartDominantSpeakerParticipantsArgs): VideoGalleryRemoteParticipant[] => {\n  const {\n    participants,\n    dominantSpeakers = [],\n    lastVisibleParticipants = [],\n    maxDominantSpeakers\n  } = args;\n\n  // Don't apply any logic if total number of video streams is less than max dominant speakers.\n  if (participants.length <= maxDominantSpeakers) {\n    return participants;\n  }\n  const participantsMap = participantsById(participants);\n\n  // Only use the Max allowed dominant speakers that exist in participants\n  const dominantSpeakerIds = Array.from(new Set(dominantSpeakers).values()).filter(id => !!participantsMap[id]).slice(0, maxDominantSpeakers);\n  const lastVisibleParticipantIds = lastVisibleParticipants.map(p => p.userId);\n  const newVisibleParticipantIds = lastVisibleParticipants.map(p => p.userId).slice(0, maxDominantSpeakers);\n  const newDominantSpeakerIds = dominantSpeakerIds.filter(id => !newVisibleParticipantIds.includes(id));\n\n  // Remove participants that are no longer dominant and replace them with new dominant speakers.\n  for (let index = 0; index < maxDominantSpeakers; index++) {\n    const newVisibleParticipantId = newVisibleParticipantIds[index];\n    if (newVisibleParticipantId === undefined || !dominantSpeakerIds.includes(newVisibleParticipantId)) {\n      const replacement = newDominantSpeakerIds.shift();\n      if (!replacement) {\n        break;\n      }\n      newVisibleParticipantIds[index] = replacement;\n    }\n  }\n  const removedVisibleParticipantIds = lastVisibleParticipantIds.filter(p => !newVisibleParticipantIds.includes(p));\n  removedVisibleParticipantIds.forEach(p => newVisibleParticipantIds.push(p));\n  const newVisibleParticipantIdSet = new Set(newVisibleParticipantIds);\n  const leftoverParticipants = participants.filter(p => !newVisibleParticipantIdSet.has(p.userId));\n  leftoverParticipants.forEach(p => {\n    newVisibleParticipantIds.push(p.userId);\n  });\n\n  // newVisibleParticipantIds can contain identifiers for participants that are no longer in the call. So we ignore those IDs.\n  const newVisibleParticipants = newVisibleParticipantIds.map(participantId => participantsMap[participantId]).filter(p => !!p);\n  return newVisibleParticipants;\n};\nconst participantsById = (participants: VideoGalleryRemoteParticipant[]): {\n  [key: string]: VideoGalleryRemoteParticipant;\n} => {\n  const response: {\n    [key: string]: VideoGalleryRemoteParticipant;\n  } = {};\n  participants.forEach(p => response[p.userId] = p);\n  return response;\n};"]}