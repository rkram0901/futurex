// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import * as reselect from 'reselect';
import { getCallExists, getDeviceManager, getIsMuted, getIsScreenSharingOn, getLocalVideoStreams } from './baseSelectors';
import { _isPreviewOn } from './utils/callUtils';
/**
 * Selector for {@link MicrophoneButton} component.
 *
 * @public
 */
export const microphoneButtonSelector = reselect.createSelector([getCallExists, getIsMuted, getDeviceManager], (callExists, isMuted, deviceManager) => {
    const permission = deviceManager.deviceAccess ? deviceManager.deviceAccess.audio : true;
    return {
        disabled: !callExists || !permission,
        checked: callExists ? !isMuted : false,
        microphones: deviceManager.microphones,
        speakers: deviceManager.speakers,
        selectedMicrophone: deviceManager.selectedMicrophone,
        selectedSpeaker: deviceManager.selectedSpeaker
    };
});
/**
 * Selector for {@link CameraButton} component.
 *
 * @public
 */
export const cameraButtonSelector = reselect.createSelector([getLocalVideoStreams, getDeviceManager], (localVideoStreams, deviceManager) => {
    const previewOn = _isPreviewOn(deviceManager);
    const localVideoFromCall = localVideoStreams === null || localVideoStreams === void 0 ? void 0 : localVideoStreams.find(stream => stream.mediaStreamType === 'Video');
    const permission = deviceManager.deviceAccess ? deviceManager.deviceAccess.video : true;
    return {
        disabled: !deviceManager.selectedCamera || !permission || !deviceManager.cameras.length,
        checked: localVideoStreams !== undefined && localVideoStreams.length > 0 ? !!localVideoFromCall : previewOn,
        cameras: deviceManager.cameras,
        selectedCamera: deviceManager.selectedCamera
    };
});
/**
 * Selector for {@link ScreenShareButton} component.
 *
 * @public
 */
export const screenShareButtonSelector = reselect.createSelector([getIsScreenSharingOn], (isScreenSharingOn, /* @conditional-compile-remove(PSTN-calls) */ callState) => {
    return {
        checked: isScreenSharingOn
    };
});
/**
 * Selector for {@link DevicesButton} component.
 *
 * @public
 */
export const devicesButtonSelector = reselect.createSelector([getDeviceManager], deviceManager => {
    return {
        microphones: removeBlankNameDevices(deviceManager.microphones),
        speakers: removeBlankNameDevices(deviceManager.speakers),
        cameras: removeBlankNameDevices(deviceManager.cameras),
        selectedMicrophone: deviceManager.selectedMicrophone,
        selectedSpeaker: deviceManager.selectedSpeaker,
        selectedCamera: deviceManager.selectedCamera
    };
});
function removeBlankNameDevices(devices) {
    return devices.filter(device => device.name !== '');
}
//# sourceMappingURL=callControlSelectors.js.map