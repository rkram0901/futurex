{"version":3,"file":"callControlSelectors.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-component-bindings/src/callControlSelectors.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AudioDeviceInfo, VideoDeviceInfo } from '@azure/communication-calling';\nimport { CallClientState } from '@internal/calling-stateful-client';\nimport * as reselect from 'reselect';\nimport { CallingBaseSelectorProps, getCallExists, getDeviceManager, getIsMuted, getIsScreenSharingOn, getLocalVideoStreams } from './baseSelectors';\nimport { _isPreviewOn } from './utils/callUtils';\n\n/**\n * Selector type for {@link MicrophoneButton} component.\n *\n * @public\n */\nexport type MicrophoneButtonSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  disabled: boolean;\n  checked: boolean;\n  microphones: AudioDeviceInfo[];\n  speakers: AudioDeviceInfo[];\n  selectedMicrophone?: AudioDeviceInfo;\n  selectedSpeaker?: AudioDeviceInfo;\n};\n\n/**\n * Selector for {@link MicrophoneButton} component.\n *\n * @public\n */\nexport const microphoneButtonSelector: MicrophoneButtonSelector = reselect.createSelector([getCallExists, getIsMuted, getDeviceManager], (callExists, isMuted, deviceManager) => {\n  const permission = deviceManager.deviceAccess ? deviceManager.deviceAccess.audio : true;\n  return {\n    disabled: !callExists || !permission,\n    checked: callExists ? !isMuted : false,\n    microphones: deviceManager.microphones,\n    speakers: deviceManager.speakers,\n    selectedMicrophone: deviceManager.selectedMicrophone,\n    selectedSpeaker: deviceManager.selectedSpeaker\n  };\n});\n\n/**\n * Selector type for {@link CameraButton} component.\n *\n * @public\n */\nexport type CameraButtonSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  disabled: boolean;\n  checked: boolean;\n  cameras: VideoDeviceInfo[];\n  selectedCamera?: VideoDeviceInfo;\n};\n\n/**\n * Selector for {@link CameraButton} component.\n *\n * @public\n */\nexport const cameraButtonSelector: CameraButtonSelector = reselect.createSelector([getLocalVideoStreams, getDeviceManager], (localVideoStreams, deviceManager) => {\n  const previewOn = _isPreviewOn(deviceManager);\n  const localVideoFromCall = localVideoStreams?.find(stream => stream.mediaStreamType === 'Video');\n  const permission = deviceManager.deviceAccess ? deviceManager.deviceAccess.video : true;\n  return {\n    disabled: !deviceManager.selectedCamera || !permission || !deviceManager.cameras.length,\n    checked: localVideoStreams !== undefined && localVideoStreams.length > 0 ? !!localVideoFromCall : previewOn,\n    cameras: deviceManager.cameras,\n    selectedCamera: deviceManager.selectedCamera\n  };\n});\n\n/**\n * Selector type for {@link ScreenShareButton} component.\n *\n * @public\n */\nexport type ScreenShareButtonSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  checked?: boolean;\n};\n\n/**\n * Selector for {@link ScreenShareButton} component.\n *\n * @public\n */\nexport const screenShareButtonSelector: ScreenShareButtonSelector = reselect.createSelector([getIsScreenSharingOn], (isScreenSharingOn, /* @conditional-compile-remove(PSTN-calls) */callState) => {\n  return {\n    checked: isScreenSharingOn\n  };\n});\n\n/**\n * Selector type for {@link DevicesButton} component.\n *\n * @public\n */\nexport type DevicesButtonSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  microphones: AudioDeviceInfo[];\n  speakers: AudioDeviceInfo[];\n  cameras: VideoDeviceInfo[];\n  selectedMicrophone?: AudioDeviceInfo;\n  selectedSpeaker?: AudioDeviceInfo;\n  selectedCamera?: VideoDeviceInfo;\n};\n\n/**\n * Selector for {@link DevicesButton} component.\n *\n * @public\n */\nexport const devicesButtonSelector: DevicesButtonSelector = reselect.createSelector([getDeviceManager], deviceManager => {\n  return {\n    microphones: removeBlankNameDevices(deviceManager.microphones),\n    speakers: removeBlankNameDevices(deviceManager.speakers),\n    cameras: removeBlankNameDevices(deviceManager.cameras),\n    selectedMicrophone: deviceManager.selectedMicrophone,\n    selectedSpeaker: deviceManager.selectedSpeaker,\n    selectedCamera: deviceManager.selectedCamera\n  };\n});\nfunction removeBlankNameDevices<T extends {\n  name: string;\n}>(devices: T[]): T[] {\n  return devices.filter(device => device.name !== '');\n}\"../../calling-stateful-client/src\""]}