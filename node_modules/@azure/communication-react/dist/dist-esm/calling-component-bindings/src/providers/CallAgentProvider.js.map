{"version":3,"file":"CallAgentProvider.js","sourceRoot":"","sources":["../../../../../preprocess-dist/calling-component-bindings/src/providers/CallAgentProvider.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,eAAe,EAAE,6CAA0C;AACpE,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AASzD;;GAEG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,aAAa,CAAmC,SAAS,CAAC,CAAC;AAW3F,MAAM,qBAAqB,GAAG,CAAC,KAA6B,EAAe,EAAE;IAC3E,MAAM,EACJ,SAAS,EACV,GAAG,KAAK,CAAC;IACV,MAAM,YAAY,GAAyB;QACzC,SAAS;KACV,CAAC;IACF,OAAO,oBAAC,gBAAgB,CAAC,QAAQ,IAAC,KAAK,EAAE,YAAY,IAAG,KAAK,CAAC,QAAQ,CAA6B,CAAC;AACtG,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,KAA6B,EAAe,EAAE,CAAC,oBAAC,qBAAqB,oBAAK,KAAK,EAAI,CAAC;AAEtH;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,GAA0B,EAAE;;IACtD,MAAM,SAAS,GAAG,MAAA,UAAU,CAAC,gBAAgB,CAAC,0CAAE,SAAS,CAAC;IAC1D,IAAI,SAAS,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE;QAC5C,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;KACnF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAc,EAAE;;IAC/C,MAAM,SAAS,GAAG,MAAA,UAAU,CAAC,gBAAgB,CAAC,0CAAE,SAAS,CAAC;IAC1D,IAAI,SAAS,IAAI,eAAe,CAAC,SAAS,CAAC,EAAE;QAC3C,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;KACjF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CallAgent } from '@azure/communication-calling';\nimport { _isACSCallAgent } from '@internal/calling-stateful-client';\nimport React, { createContext, useContext } from 'react';\n\n/**\n * @private\n */\nexport type CallAgentContextType = {\n  callAgent: CallAgent | undefined;\n};\n\n/**\n * @private\n */\nexport const CallAgentContext = createContext<CallAgentContextType | undefined>(undefined);\n\n/**\n * Arguments to initialize a {@link CallAgentProvider}.\n *\n * @public\n */\nexport interface CallAgentProviderProps {\n  children: React.ReactNode;\n  callAgent?: CallAgent;\n}\nconst CallAgentProviderBase = (props: CallAgentProviderProps): JSX.Element => {\n  const {\n    callAgent\n  } = props;\n  const initialState: CallAgentContextType = {\n    callAgent\n  };\n  return <CallAgentContext.Provider value={initialState}>{props.children}</CallAgentContext.Provider>;\n};\n\n/**\n * A {@link React.Context} that stores a {@link @azure/communication-calling#CallAgent}.\n *\n * Calling components from this package must be wrapped with a {@link CallAgentProvider}.\n *\n * @public\n */\nexport const CallAgentProvider = (props: CallAgentProviderProps): JSX.Element => <CallAgentProviderBase {...props} />;\n\n/**\n * Hook to obtain {@link @azure/communication-calling#CallAgent} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers\n * exported from this library.\n *\n * @public\n */\nexport const useCallAgent = (): CallAgent | undefined => {\n  const callAgent = useContext(CallAgentContext)?.callAgent;\n  if (callAgent && !_isACSCallAgent(callAgent)) {\n    throw new Error('TeamsCallAgent object was provided, try useTeamsCall() instead');\n  }\n  return callAgent;\n};\n\n/**\n * Hook to obtain {@link @azure/communication-calling#TeamsCallAgent} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers\n * exported from this library.\n *\n * @beta\n */\nexport const useTeamsCallAgent = (): undefined => {\n  const callAgent = useContext(CallAgentContext)?.callAgent;\n  if (callAgent && _isACSCallAgent(callAgent)) {\n    throw new Error('Regular CallAgent object was provided, try useCall() instead');\n  }\n  return callAgent;\n};\"../../../calling-stateful-client/src\""]}