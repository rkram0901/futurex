{"version":3,"file":"CallClientProvider.js","sourceRoot":"","sources":["../../../../../preprocess-dist/calling-component-bindings/src/providers/CallClientProvider.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAU9E;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,aAAa,CAAoC,SAAS,CAAC,CAAC;AAY7F;;GAEG;AACH,MAAM,sBAAsB,GAAG,CAAC,KAA8B,EAAe,EAAE;IAC7E,MAAM,EACJ,UAAU,EACX,GAAG,KAAK,CAAC;IACV,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAAoC,SAAS,CAAC,CAAC;IAEjG;;OAEG;IACH,SAAS,CAAC,GAAG,EAAE;QACb,UAAU,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAC3C,OAAO,CAAC,UAAU,EAAE,CAAC;YACrB,OAAO,CAAC,cAAc,EAAE,CAAC;YACzB,OAAO,CAAC,WAAW,EAAE,CAAC;YACtB,gBAAgB,CAAE,OAAiC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IACjB,MAAM,YAAY,GAA0B;QAC1C,UAAU;QACV,aAAa;KACd,CAAC;IACF,OAAO,oBAAC,iBAAiB,CAAC,QAAQ,IAAC,KAAK,EAAE,YAAY,IAAG,KAAK,CAAC,QAAQ,CAA8B,CAAC;AACxG,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,KAA8B,EAAe,EAAE,CAAC,oBAAC,sBAAsB,oBAAK,KAAK,EAAI,CAAC;AAEzH;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,GAAuB,EAAE;IACpD,MAAM,OAAO,GAAG,UAAU,CAAC,iBAAiB,CAAC,CAAC;IAC9C,IAAI,OAAO,KAAK,SAAS,EAAE;QACzB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;KACpD;IACD,OAAO,OAAO,CAAC,UAAU,CAAC;AAC5B,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAsC,EAAE;;IACtE,OAAO,MAAA,UAAU,CAAC,iBAAiB,CAAC,0CAAE,aAAa,CAAC;AACtD,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { StatefulCallClient, StatefulDeviceManager } from '@internal/calling-stateful-client';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\n/**\n * @private\n */\nexport type CallClientContextType = {\n  callClient: StatefulCallClient;\n  deviceManager: StatefulDeviceManager | undefined;\n};\n\n/**\n * @private\n */\nexport const CallClientContext = createContext<CallClientContextType | undefined>(undefined);\n\n/**\n * Arguments to initialize a {@link CallClientProvider}.\n *\n * @public\n */\nexport interface CallClientProviderProps {\n  children: React.ReactNode;\n  callClient: StatefulCallClient;\n}\n\n/**\n * @private\n */\nconst CallClientProviderBase = (props: CallClientProviderProps): JSX.Element => {\n  const {\n    callClient\n  } = props;\n  const [deviceManager, setDeviceManager] = useState<StatefulDeviceManager | undefined>(undefined);\n\n  /**\n   * Initialize the DeviceManager inside CallClientState\n   */\n  useEffect(() => {\n    callClient.getDeviceManager().then(manager => {\n      manager.getCameras();\n      manager.getMicrophones();\n      manager.getSpeakers();\n      setDeviceManager((manager as StatefulDeviceManager));\n    }).catch(error => {\n      throw new Error(error);\n    });\n  }, [callClient]);\n  const initialState: CallClientContextType = {\n    callClient,\n    deviceManager\n  };\n  return <CallClientContext.Provider value={initialState}>{props.children}</CallClientContext.Provider>;\n};\n\n/**\n * A {@link React.Context} that stores a {@link StatefulCallClient}.\n *\n * Calling components from this package must be wrapped with a {@link CallClientProvider}.\n *\n * @public\n */\nexport const CallClientProvider = (props: CallClientProviderProps): JSX.Element => <CallClientProviderBase {...props} />;\n\n/**\n * Hook to obtain {@link StatefulCallClient} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers\n * exported from this library.\n *\n * @public\n */\nexport const useCallClient = (): StatefulCallClient => {\n  const context = useContext(CallClientContext);\n  if (context === undefined) {\n    throw new Error('CallClient Context is undefined');\n  }\n  return context.callClient;\n};\n\n/**\n * Hook to obtain {@link StatefulDeviceManager} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers\n * exported from this library.\n *\n * @public\n */\nexport const useDeviceManager = (): StatefulDeviceManager | undefined => {\n  return useContext(CallClientContext)?.deviceManager;\n};\"../../../calling-stateful-client/src\""]}