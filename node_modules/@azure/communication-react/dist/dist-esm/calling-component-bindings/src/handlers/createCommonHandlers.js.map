{"version":3,"file":"createCommonHandlers.js","sourceRoot":"","sources":["../../../../../preprocess-dist/calling-component-bindings/src/handlers/createCommonHandlers.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;;;;;;;;;AAElC,OAAO,EAAyB,gBAAgB,EAAqC,MAAM,8BAA8B,CAAC;AAC1H,OAAO,EAAE,6BAA6B,EAAE,mCAAgC;AAExE,OAAO,UAAU,MAAM,aAAa,CAAC;AAErC,OAAO,EAAE,2BAA2B,EAAE,SAAS,EAAE,sBAAsB,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AA6BlH;;GAEG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,UAA4B,EAAE,SAA2B,EAAW,EAAE;IACpG,OAAO,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,SAAS,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE,KAAK,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;AACrF,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,kCAAkC,GAAG,UAAU,CAAC,CAAC,UAA8B,EAAE,aAAgD,EAAE,IAAsB,EAAyB,EAAE;IAC/L,MAAM,iBAAiB,GAAG,GAAwB,EAAE;QAClD,iFAAiF;QACjF,mFAAmF;QACnF,0CAA0C;QAC1C,MAAM,2BAA2B,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,MAAM,GAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,CAAC;QACxB,IAAI,eAAe,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,cAAc,CAAC;QACzE,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,OAAO,GAAG,MAAM,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,UAAU,EAAE,CAAA,CAAC;YAClD,eAAe,GAAG,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACzE,eAAe,KAAI,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,YAAY,CAAC,eAAe,CAAC,CAAA,CAAC;SACjE;QACD,IAAI,CAAC,MAAM,IAAI,CAAC,eAAe,EAAE;YAC/B,OAAO;SACR;QACD,MAAM,MAAM,GAAG,IAAI,gBAAgB,CAAC,eAAe,CAAC,CAAC;QACrD,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE;YACzE,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;SAC/B;IACH,CAAC,CAAA,CAAC;IACF,MAAM,gBAAgB,GAAG,CAAO,MAAwB,EAAiB,EAAE;QACzE,MAAM,MAAM,GAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,CAAC;QACxB,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QACD,IAAI,IAAI,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE;YACxE,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC7B,MAAM,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE;gBAC9C,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,eAAe,EAAE,MAAM,CAAC,eAAe;aACxC,CAAC,CAAC;SACJ;IACH,CAAC,CAAA,CAAC;IACF,MAAM,cAAc,GAAG,CAAO,OAA4B,EAAiB,EAAE;QAC3E,MAAM,SAAS,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,CAAC;QACpE,IAAI,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,KAAK,YAAY,EAAE;YACpD,uFAAuF;YACvF,0FAA0F;YAC1F,0FAA0F;YAC1F,EAAE;YACF,2FAA2F;YAC3F,oFAAoF;YACpF,yFAAyF;YACzF,wFAAwF;YACxF,EAAE;YACF,sFAAsF;YACtF,4FAA4F;YAC5F,6FAA6F;YAC7F,wFAAwF;YACxF,EAAE;YACF,sFAAsF;YACtF,yFAAyF;YACzF,sFAAsF;YACtF,6EAA6E;YAC7E,MAAM,wBAAwB,EAAE,CAAC;YACjC,OAAO;SACR;QACD,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;YACzE,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,eAAe,KAAK,OAAO,CAAC,CAAC;YACzF,IAAI,MAAM,EAAE;gBACV,MAAM,gBAAgB,CAAC,MAAM,CAAC,CAAC;aAChC;iBAAM;gBACL,MAAM,iBAAiB,EAAE,CAAC;aAC3B;SACF;aAAM;YACL,MAAM,cAAc,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,cAAc,CAAC;YAC1E,IAAI,cAAc,EAAE;gBAClB,IAAI,SAAS,EAAE;oBACb,MAAM,wBAAwB,EAAE,CAAC;iBAClC;qBAAM;oBACL,MAAM,UAAU,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,EAAE;wBAChD,MAAM,EAAE,cAAc;wBACtB,eAAe,EAAE,OAAO;qBACzB,EAAE,OAAO,CAAC,CAAC;iBACb;aACF;SACF;IACH,CAAC,CAAA,CAAC;IACF,MAAM,kBAAkB,GAAG,CAAO,MAAuB,EAAiB,EAAE;QAC1E,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO;SACR;QACD,OAAO,aAAa,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC,CAAA,CAAC;IACF,MAAM,eAAe,GAAG,CAAO,MAAuB,EAAiB,EAAE;QACvE,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO;SACR;QACD,OAAO,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC,CAAA,CAAC;IACF,MAAM,cAAc,GAAG,CAAO,MAAuB,EAAE,OAA4B,EAAiB,EAAE;QACpG,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO;SACR;QACD,IAAI,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACjC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACnC,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,eAAe,KAAK,OAAO,CAAC,CAAC;YACzF,OAAO,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,YAAY,CAAC,MAAM,CAAC,CAAC;SACrC;aAAM;YACL,MAAM,SAAS,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,CAAC;YACpE,IAAI,CAAC,SAAS,EAAE;gBACd,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;gBACnC,OAAO;aACR;YACD,MAAM,wBAAwB,EAAE,CAAC;YACjC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACnC,MAAM,UAAU,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,EAAE;gBAChD,MAAM,EAAE,MAAM;gBACd,eAAe,EAAE,OAAO;aACzB,EAAE,OAAO,CAAC,CAAC;SACb;IACH,CAAC,CAAA,CAAC;IACF,MAAM,kBAAkB,GAAG,GAAwB,EAAE;QACnD,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;SAC3E;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;IAChE,CAAC,CAAA,CAAC;IACF,MAAM,kBAAkB,GAAG,GAAwB,EAAE,kDAAC,OAAA,MAAM,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,kBAAkB,EAAE,CAAA,CAAA,GAAA,CAAC;IACvF,MAAM,iBAAiB,GAAG,GAAwB,EAAE,kDAAC,OAAA,MAAM,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,iBAAiB,EAAE,CAAA,CAAA,GAAA,CAAC;IACrF,MAAM,mBAAmB,GAAG,GAAwB,EAAE,kDAAC,OAAA,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,iBAAiB,EAAC,CAAC,CAAC,MAAM,iBAAiB,EAAE,CAAC,CAAC,CAAC,MAAM,kBAAkB,EAAE,CAAA,GAAA,CAAC;IACxI,MAAM,QAAQ,GAAG,CAAO,WAAqB,EAAiB,EAAE;QAAC,OAAA,MAAM,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,CAAC;YAClF,WAAW,EAAE,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;SACjD,CAAC,CAAA,CAAA;MAAA,CAAC;IACH,MAAM,uBAAuB,GAAG,CAAO,UAAW;QAChD,WAAW,EAAE,MAAM;QACnB,UAAU,EAAE,IAAI;KACM,EAA+C,EAAE;;QACvE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;YAChD,OAAO;SACR;QACD,MAAM,SAAS,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,EAAE;YACd,OAAO;SACR;QACD,MAAM,WAAW,GAAG,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,KAAK,OAAO,CAAC,CAAC;QAC/F,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO;SACR;QACD,MAAM,EACJ,IAAI,EACL,GAAG,MAAA,CAAC,MAAM,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC,mCAAI,EAAE,CAAC;QAClF,OAAO,IAAI,CAAC,CAAC,CAAC;YACZ,IAAI;SACL,CAAC,CAAC,CAAC,SAAS,CAAC;IAChB,CAAC,CAAA,CAAC;IACF,MAAM,wBAAwB,GAAG,CAAO,MAAc,EAAE,UAAW;QACjE,WAAW,EAAE,MAAM;KACG,EAA+C,EAAE;QACvE,IAAI,CAAC,IAAI,EAAE;YACT,OAAO;SACR;QACD,MAAM,SAAS,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;SAC/C;QACD,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,6BAA6B,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,MAAM,CAAC,CAAC;QACtJ,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE;YAC7C,OAAO;SACR;QACD,MAAM,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,KAAK,OAAO,CAAC,CAAC;QAC3G,MAAM,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,KAAK,eAAe,CAAC,CAAC;QACnH,IAAI,gBAAgB,GAAiC,SAAS,CAAC;QAC/D,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,WAAW,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE;YACjF,gBAAgB,GAAG,MAAM,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,UAAU,EAAE,iBAAiB,EAAE,OAAO,CAAC,CAAC;SAC7G;QACD,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,WAAW,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE;YACjF,oIAAoI;YACpI,mFAAmF;YACnF,kFAAkF;YAClF,gBAAgB,GAAG,MAAM,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,UAAU,EAAE,iBAAiB,EAAE;gBACjG,WAAW,EAAE,KAAK;aACnB,CAAC,CAAC;SACJ;QACD,OAAO,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI,EAAC,CAAC,CAAC;YAC9B,IAAI,EAAE,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI;SAC7B,CAAC,CAAC,CAAC,SAAS,CAAC;IAChB,CAAC,CAAA,CAAC;IACF,MAAM,yBAAyB,GAAG,CAAO,MAAc,EAAiB,EAAE;QACxE,IAAI,CAAC,IAAI,EAAE;YACT,OAAO;SACR;QACD,MAAM,SAAS,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;SAC/C;QACD,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,6BAA6B,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,MAAM,CAAC,CAAC;QACtJ,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE;YAC7C,OAAO;SACR;QACD,MAAM,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,KAAK,OAAO,CAAC,CAAC;QAC3G,MAAM,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,KAAK,eAAe,CAAC,CAAC;QACnH,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,IAAI,EAAE;YAC/C,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;SAC5E;QACD,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,IAAI,EAAE;YAC/C,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;SAC5E;IACH,CAAC,CAAA,CAAC;IACF,MAAM,wBAAwB,GAAG,GAAwB,EAAE;QACzD,8FAA8F;QAC9F,MAAM,SAAS,GAAG,IAAI,IAAI,UAAU,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC/D,MAAM,WAAW,GAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,KAAK,OAAO,CAAC,CAAC;QAChG,IAAI,IAAI,IAAI,SAAS,IAAI,WAAW,EAAE;YACpC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;SACzD;QAED,sGAAsG;QACtG,wDAAwD;QACxD,mGAAmG;QACnG,MAAM,2BAA2B,CAAC,UAAU,CAAC,CAAC;IAChD,CAAC,CAAA,CAAC;IACF,MAAM,cAAc,GAAG,GAAQ,EAAE;QAC/B,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;IACnF,CAAC,CAAC;IACF,OAAO;QACL,QAAQ;QACR,cAAc;QACd,kBAAkB;QAClB,eAAe;QACf,kBAAkB;QAClB,iBAAiB;QACjB,cAAc;QACd,kBAAkB;QAClB,mBAAmB;QACnB,uBAAuB;QACvB,wBAAwB;QACxB,iBAAiB;QACjB,yBAAyB;QACzB,wBAAwB;QACxB,mBAAmB,EAAE,cAAc;QACnC,WAAW,EAAE,cAAc;KAC5B,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AudioDeviceInfo, Call, LocalVideoStream, StartCallOptions, VideoDeviceInfo } from '@azure/communication-calling';\nimport { toFlatCommunicationIdentifier } from '@internal/acs-ui-common';\nimport { CreateViewResult, StatefulCallClient, StatefulDeviceManager } from '@internal/calling-stateful-client';\nimport memoizeOne from 'memoize-one';\nimport { CreateVideoStreamViewResult, VideoStreamOptions } from '@internal/react-components';\nimport { disposeAllLocalPreviewViews, _isInCall, _isInLobbyOrConnecting, _isPreviewOn } from '../utils/callUtils';\nimport { CommunicationUserIdentifier, PhoneNumberIdentifier, UnknownIdentifier } from '@azure/communication-common';\n/**\n * Object containing all the handlers required for calling components.\n *\n * Calling related components from this package are able to pick out relevant handlers from this object.\n * See {@link useHandlers} and {@link usePropsFor}.\n *\n * @public\n */\nexport interface CommonCallingHandlers {\n  onStartLocalVideo: () => Promise<void>;\n  onToggleCamera: (options?: VideoStreamOptions) => Promise<void>;\n  onSelectMicrophone: (device: AudioDeviceInfo) => Promise<void>;\n  onSelectSpeaker: (device: AudioDeviceInfo) => Promise<void>;\n  onSelectCamera: (device: VideoDeviceInfo, options?: VideoStreamOptions) => Promise<void>;\n  onToggleMicrophone: () => Promise<void>;\n  onStartScreenShare: () => Promise<void>;\n  onStopScreenShare: () => Promise<void>;\n  onToggleScreenShare: () => Promise<void>;\n  onHangUp: (forEveryone?: boolean) => Promise<void>;\n  onCreateLocalStreamView: (options?: VideoStreamOptions) => Promise<void | CreateVideoStreamViewResult>;\n  onCreateRemoteStreamView: (userId: string, options?: VideoStreamOptions) => Promise<void | CreateVideoStreamViewResult>;\n  onDisposeRemoteStreamView: (userId: string) => Promise<void>;\n  onDisposeLocalStreamView: () => Promise<void>;\n  onRemoveParticipant(userId: string): Promise<void>;\n  onStartCall: (participants: (CommunicationUserIdentifier | PhoneNumberIdentifier | UnknownIdentifier)[], options?: StartCallOptions) => void;\n}\n\n/**\n * @private\n */\nexport const areStreamsEqual = (prevStream: LocalVideoStream, newStream: LocalVideoStream): boolean => {\n  return !!prevStream && !!newStream && prevStream.source.id === newStream.source.id;\n};\n\n/**\n * Create the common implementation of {@link CallingHandlers} for all types of Call\n *\n * @private\n */\nexport const createDefaultCommonCallingHandlers = memoizeOne((callClient: StatefulCallClient, deviceManager: StatefulDeviceManager | undefined, call: Call | undefined): CommonCallingHandlers => {\n  const onStartLocalVideo = async (): Promise<void> => {\n    // Before the call object creates a stream, dispose of any local preview streams.\n    // @TODO: is there any way to parent the unparented view to the call object instead\n    // of disposing and creating a new stream?\n    await disposeAllLocalPreviewViews(callClient);\n    const callId = call?.id;\n    let videoDeviceInfo = callClient.getState().deviceManager.selectedCamera;\n    if (!videoDeviceInfo) {\n      const cameras = await deviceManager?.getCameras();\n      videoDeviceInfo = cameras && cameras.length > 0 ? cameras[0] : undefined;\n      videoDeviceInfo && deviceManager?.selectCamera(videoDeviceInfo);\n    }\n    if (!callId || !videoDeviceInfo) {\n      return;\n    }\n    const stream = new LocalVideoStream(videoDeviceInfo);\n    if (call && !call.localVideoStreams.find(s => areStreamsEqual(s, stream))) {\n      await call.startVideo(stream);\n    }\n  };\n  const onStopLocalVideo = async (stream: LocalVideoStream): Promise<void> => {\n    const callId = call?.id;\n    if (!callId) {\n      return;\n    }\n    if (call && call.localVideoStreams.find(s => areStreamsEqual(s, stream))) {\n      await call.stopVideo(stream);\n      await callClient.disposeView(callId, undefined, {\n        source: stream.source,\n        mediaStreamType: stream.mediaStreamType\n      });\n    }\n  };\n  const onToggleCamera = async (options?: VideoStreamOptions): Promise<void> => {\n    const previewOn = _isPreviewOn(callClient.getState().deviceManager);\n    if (previewOn && call && call.state === 'Connecting') {\n      // This is to workaround: https://skype.visualstudio.com/SPOOL/_workitems/edit/3030558.\n      // The root cause of the issue is caused by never transitioning the unparented view to the\n      // call object when going from configuration page (disconnected call state) to connecting.\n      //\n      // Currently the only time the local video stream is moved from unparented view to the call\n      // object is when we transition from connecting -> call state. If the camera was on,\n      // inside the MediaGallery we trigger toggleCamera. This triggers onStartLocalVideo which\n      // destroys the unparentedView and creates a new stream in the call - so all looks well.\n      //\n      // However, if someone turns off their camera during the lobbyOrConnecting screen, the\n      // call.localVideoStreams will be empty (as the stream is currently stored in the unparented\n      // views and was never transitioned to the call object) and thus we incorrectly try to create\n      // a new video stream for the call object, instead of only stopping the unparented view.\n      //\n      // The correct fix for this is to ensure that callAgent.onStartCall is called with the\n      // localvideostream as a videoOption. That will mean call.onLocalVideoStreamsUpdated will\n      // be triggered when the call is in connecting state, which we can then transition the\n      // local video stream to the stateful call client and get into a clean state.\n      await onDisposeLocalStreamView();\n      return;\n    }\n    if (call && (_isInCall(call.state) || _isInLobbyOrConnecting(call.state))) {\n      const stream = call.localVideoStreams.find(stream => stream.mediaStreamType === 'Video');\n      if (stream) {\n        await onStopLocalVideo(stream);\n      } else {\n        await onStartLocalVideo();\n      }\n    } else {\n      const selectedCamera = callClient.getState().deviceManager.selectedCamera;\n      if (selectedCamera) {\n        if (previewOn) {\n          await onDisposeLocalStreamView();\n        } else {\n          await callClient.createView(undefined, undefined, {\n            source: selectedCamera,\n            mediaStreamType: 'Video'\n          }, options);\n        }\n      }\n    }\n  };\n  const onSelectMicrophone = async (device: AudioDeviceInfo): Promise<void> => {\n    if (!deviceManager) {\n      return;\n    }\n    return deviceManager.selectMicrophone(device);\n  };\n  const onSelectSpeaker = async (device: AudioDeviceInfo): Promise<void> => {\n    if (!deviceManager) {\n      return;\n    }\n    return deviceManager.selectSpeaker(device);\n  };\n  const onSelectCamera = async (device: VideoDeviceInfo, options?: VideoStreamOptions): Promise<void> => {\n    if (!deviceManager) {\n      return;\n    }\n    if (call && _isInCall(call.state)) {\n      deviceManager.selectCamera(device);\n      const stream = call.localVideoStreams.find(stream => stream.mediaStreamType === 'Video');\n      return stream?.switchSource(device);\n    } else {\n      const previewOn = _isPreviewOn(callClient.getState().deviceManager);\n      if (!previewOn) {\n        deviceManager.selectCamera(device);\n        return;\n      }\n      await onDisposeLocalStreamView();\n      deviceManager.selectCamera(device);\n      await callClient.createView(undefined, undefined, {\n        source: device,\n        mediaStreamType: 'Video'\n      }, options);\n    }\n  };\n  const onToggleMicrophone = async (): Promise<void> => {\n    if (!call || !_isInCall(call.state)) {\n      throw new Error(`Please invoke onToggleMicrophone after call is started`);\n    }\n    return call.isMuted ? await call.unmute() : await call.mute();\n  };\n  const onStartScreenShare = async (): Promise<void> => await call?.startScreenSharing();\n  const onStopScreenShare = async (): Promise<void> => await call?.stopScreenSharing();\n  const onToggleScreenShare = async (): Promise<void> => call?.isScreenSharingOn ? await onStopScreenShare() : await onStartScreenShare();\n  const onHangUp = async (forEveryone?: boolean): Promise<void> => await call?.hangUp({\n    forEveryone: forEveryone === true ? true : false\n  });\n  const onCreateLocalStreamView = async (options = ({\n    scalingMode: 'Crop',\n    isMirrored: true\n  } as VideoStreamOptions)): Promise<void | CreateVideoStreamViewResult> => {\n    if (!call || call.localVideoStreams.length === 0) {\n      return;\n    }\n    const callState = callClient.getState().calls[call.id];\n    if (!callState) {\n      return;\n    }\n    const localStream = callState.localVideoStreams.find(item => item.mediaStreamType === 'Video');\n    if (!localStream) {\n      return;\n    }\n    const {\n      view\n    } = (await callClient.createView(call.id, undefined, localStream, options)) ?? {};\n    return view ? {\n      view\n    } : undefined;\n  };\n  const onCreateRemoteStreamView = async (userId: string, options = ({\n    scalingMode: 'Crop'\n  } as VideoStreamOptions)): Promise<void | CreateVideoStreamViewResult> => {\n    if (!call) {\n      return;\n    }\n    const callState = callClient.getState().calls[call.id];\n    if (!callState) {\n      throw new Error(`Call Not Found: ${call.id}`);\n    }\n    const participant = Object.values(callState.remoteParticipants).find(participant => toFlatCommunicationIdentifier(participant.identifier) === userId);\n    if (!participant || !participant.videoStreams) {\n      return;\n    }\n    const remoteVideoStream = Object.values(participant.videoStreams).find(i => i.mediaStreamType === 'Video');\n    const screenShareStream = Object.values(participant.videoStreams).find(i => i.mediaStreamType === 'ScreenSharing');\n    let createViewResult: CreateViewResult | undefined = undefined;\n    if (remoteVideoStream && remoteVideoStream.isAvailable && !remoteVideoStream.view) {\n      createViewResult = await callClient.createView(call.id, participant.identifier, remoteVideoStream, options);\n    }\n    if (screenShareStream && screenShareStream.isAvailable && !screenShareStream.view) {\n      // Hardcoded `scalingMode` since it is highly unlikely that CONTOSO would ever want to use a different scaling mode for screenshare.\n      // Using `Crop` would crop the contents of screenshare and `Stretch` would warp it.\n      // `Fit` is the only mode that maintains the integrity of the screen being shared.\n      createViewResult = await callClient.createView(call.id, participant.identifier, screenShareStream, {\n        scalingMode: 'Fit'\n      });\n    }\n    return createViewResult?.view ? {\n      view: createViewResult?.view\n    } : undefined;\n  };\n  const onDisposeRemoteStreamView = async (userId: string): Promise<void> => {\n    if (!call) {\n      return;\n    }\n    const callState = callClient.getState().calls[call.id];\n    if (!callState) {\n      throw new Error(`Call Not Found: ${call.id}`);\n    }\n    const participant = Object.values(callState.remoteParticipants).find(participant => toFlatCommunicationIdentifier(participant.identifier) === userId);\n    if (!participant || !participant.videoStreams) {\n      return;\n    }\n    const remoteVideoStream = Object.values(participant.videoStreams).find(i => i.mediaStreamType === 'Video');\n    const screenShareStream = Object.values(participant.videoStreams).find(i => i.mediaStreamType === 'ScreenSharing');\n    if (remoteVideoStream && remoteVideoStream.view) {\n      callClient.disposeView(call.id, participant.identifier, remoteVideoStream);\n    }\n    if (screenShareStream && screenShareStream.view) {\n      callClient.disposeView(call.id, participant.identifier, screenShareStream);\n    }\n  };\n  const onDisposeLocalStreamView = async (): Promise<void> => {\n    // If the user is currently in a call, dispose of the local stream view attached to that call.\n    const callState = call && callClient.getState().calls[call.id];\n    const localStream = callState?.localVideoStreams.find(item => item.mediaStreamType === 'Video');\n    if (call && callState && localStream) {\n      callClient.disposeView(call.id, undefined, localStream);\n    }\n\n    // If the user is not in a call we currently assume any unparented view is a LocalPreview and stop all\n    // since those are only used for LocalPreview currently.\n    // TODO: we need to remember which LocalVideoStream was used for LocalPreview and dispose that one.\n    await disposeAllLocalPreviewViews(callClient);\n  };\n  const notImplemented = (): any => {\n    throw new Error('Not implemented, cannot call a method from an abstract object');\n  };\n  return {\n    onHangUp,\n    onSelectCamera,\n    onSelectMicrophone,\n    onSelectSpeaker,\n    onStartScreenShare,\n    onStopScreenShare,\n    onToggleCamera,\n    onToggleMicrophone,\n    onToggleScreenShare,\n    onCreateLocalStreamView,\n    onCreateRemoteStreamView,\n    onStartLocalVideo,\n    onDisposeRemoteStreamView,\n    onDisposeLocalStreamView,\n    onRemoveParticipant: notImplemented,\n    onStartCall: notImplemented\n  };\n});\"../../../acs-ui-common/src\"\"../../../calling-stateful-client/src\"\"../../../react-components/src\""]}