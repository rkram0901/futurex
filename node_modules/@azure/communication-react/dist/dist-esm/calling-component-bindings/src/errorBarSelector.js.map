{"version":3,"file":"errorBarSelector.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-component-bindings/src/errorBarSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CallingBaseSelectorProps, getDeviceManager, getDiagnostics, getLatestErrors, getEnvironmentInfo } from './baseSelectors';\nimport { ActiveErrorMessage, ErrorType } from '@internal/react-components';\nimport { createSelector } from 'reselect';\nimport { CallClientState, CallErrors, CallErrorTarget } from '@internal/calling-stateful-client';\nimport { DiagnosticQuality } from '@azure/communication-calling';\n/**\n * Selector type for {@link ErrorBar} component.\n *\n * @public\n */\nexport type ErrorBarSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  activeErrorMessages: ActiveErrorMessage[];\n};\n\n/**\n * Select the first 3 active errors from the state for the `ErrorBar` component.\n *\n * In case there are many errors, only the first three errors are returned to avoid\n * filling up the UI with too many errors.\n *\n * Invariants:\n *   - `ErrorType` is never repeated in the returned errors.\n *   - Errors are returned in a fixed order by `ErrorType`.\n *\n * @public\n */\nexport const errorBarSelector: ErrorBarSelector = createSelector([getLatestErrors, getDiagnostics, getDeviceManager, getEnvironmentInfo], (latestErrors: CallErrors, diagnostics, deviceManager, environmentInfo): {\n  activeErrorMessages: ActiveErrorMessage[];\n} => {\n  // The order in which the errors are returned is significant: The `ErrorBar` shows errors on the UI in that order.\n  // There are several options for the ordering:\n  //   - Sorted by when the errors happened (latest first / oldest first).\n  //   - Stable sort by error type.\n  //\n  // We chose to stable sort by error type: We intend to show only a small number of errors on the UI and we do not\n  // have timestamps for errors.\n  const activeErrorMessages: ActiveErrorMessage[] = [];\n  const isSafari = (): boolean => {\n    return /^((?!chrome|android|crios|fxios).)*safari/i.test(navigator.userAgent);\n  };\n\n  // Errors reported via diagnostics are more reliable than from API method failures, so process those first.\n  if (diagnostics?.network.latest.networkReceiveQuality?.value === DiagnosticQuality.Bad || diagnostics?.network.latest.networkReceiveQuality?.value === DiagnosticQuality.Poor) {\n    activeErrorMessages.push({\n      type: 'callNetworkQualityLow'\n    });\n  }\n  if (diagnostics?.media.latest.noSpeakerDevicesEnumerated?.value === true) {\n    activeErrorMessages.push({\n      type: 'callNoSpeakerFound'\n    });\n  }\n  if (diagnostics?.media.latest.noMicrophoneDevicesEnumerated?.value === true) {\n    activeErrorMessages.push({\n      type: 'callNoMicrophoneFound'\n    });\n  }\n  if (deviceManager.deviceAccess?.audio === false && isSafari()) {\n    activeErrorMessages.push({\n      type: 'callMicrophoneAccessDeniedSafari'\n    });\n  }\n  if (deviceManager.deviceAccess?.audio === false && !isSafari()) {\n    activeErrorMessages.push({\n      type: 'callMicrophoneAccessDenied'\n    });\n  }\n  if (diagnostics?.media.latest.microphonePermissionDenied?.value === true) {\n    activeErrorMessages.push({\n      type: 'callMacOsMicrophoneAccessDenied'\n    });\n  }\n  const microphoneMuteUnexpectedlyDiagnostic = diagnostics?.media.latest.microphoneMuteUnexpectedly || diagnostics?.media.latest.microphoneNotFunctioning;\n  if (microphoneMuteUnexpectedlyDiagnostic) {\n    if (microphoneMuteUnexpectedlyDiagnostic.value === DiagnosticQuality.Bad) {\n      // Inform the user that microphone stopped working and inform them to start microphone again\n      activeErrorMessages.push({\n        type: 'callMicrophoneMutedBySystem'\n      });\n    } else if (microphoneMuteUnexpectedlyDiagnostic.value === DiagnosticQuality.Good) {\n      // Inform the user that microphone recovered\n      activeErrorMessages.push({\n        type: 'callMicrophoneUnmutedBySystem'\n      });\n    }\n  }\n  const cameraStoppedUnexpectedlyDiagnostic = diagnostics?.media.latest.cameraStoppedUnexpectedly;\n  if (cameraStoppedUnexpectedlyDiagnostic) {\n    if (cameraStoppedUnexpectedlyDiagnostic.value === DiagnosticQuality.Bad) {\n      // Inform the user that camera stopped working and inform them to start video again\n      activeErrorMessages.push({\n        type: 'callVideoStoppedBySystem'\n      });\n    } else if (cameraStoppedUnexpectedlyDiagnostic.value === DiagnosticQuality.Good) {\n      // Inform the user that camera recovered\n      activeErrorMessages.push({\n        type: 'callVideoRecoveredBySystem'\n      });\n    }\n  }\n  if (deviceManager.deviceAccess?.video === false && isSafari()) {\n    activeErrorMessages.push({\n      type: 'callCameraAccessDeniedSafari'\n    });\n  } else if (deviceManager.deviceAccess?.video === false) {\n    activeErrorMessages.push({\n      type: 'callCameraAccessDenied'\n    });\n  } else {\n    if (diagnostics?.media.latest.cameraFreeze?.value === true) {\n      activeErrorMessages.push({\n        type: 'callCameraAlreadyInUse'\n      });\n    }\n  }\n  if (diagnostics?.media.latest.cameraPermissionDenied?.value === true) {\n    activeErrorMessages.push({\n      type: 'callMacOsCameraAccessDenied'\n    });\n  }\n  if (diagnostics?.media.latest.screenshareRecordingDisabled?.value === true) {\n    activeErrorMessages.push({\n      type: 'callMacOsScreenShareAccessDenied'\n    });\n  }\n\n  // Prefer to show errors with privacy implications.\n  appendActiveErrorIfDefined(activeErrorMessages, latestErrors, 'Call.stopVideo', 'stopVideoGeneric');\n  appendActiveErrorIfDefined(activeErrorMessages, latestErrors, 'Call.mute', 'muteGeneric');\n  appendActiveErrorIfDefined(activeErrorMessages, latestErrors, 'Call.stopScreenSharing', 'stopScreenShareGeneric');\n  appendActiveErrorIfDefined(activeErrorMessages, latestErrors, 'Call.startVideo', 'startVideoGeneric');\n  appendActiveErrorIfDefined(activeErrorMessages, latestErrors, 'Call.unmute', 'unmuteGeneric');\n  if (latestErrors['CallAgent.join']?.message === 'CallAgent.join: Invalid meeting link') {\n    appendActiveErrorIfDefined(activeErrorMessages, latestErrors, 'CallAgent.join', 'failedToJoinCallInvalidMeetingLink');\n  } else {\n    appendActiveErrorIfDefined(activeErrorMessages, latestErrors, 'CallAgent.join', 'failedToJoinCallGeneric');\n  }\n\n  // We only return the first few errors to avoid filling up the UI with too many `MessageBar`s.\n  activeErrorMessages.splice(maxErrorCount);\n  return {\n    activeErrorMessages: activeErrorMessages\n  };\n});\nconst appendActiveErrorIfDefined = (activeErrorMessages: ActiveErrorMessage[], latestErrors: CallErrors, target: CallErrorTarget, activeErrorType: ErrorType): void => {\n  if (latestErrors[target] === undefined) {\n    return;\n  }\n  activeErrorMessages.push({\n    type: activeErrorType,\n    timestamp: latestErrors[target].timestamp\n  });\n};\nconst maxErrorCount = 3;\"../../react-components/src\"\"../../calling-stateful-client/src\""]}