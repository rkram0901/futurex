import { DeviceManagerState, RemoteParticipantState, StatefulCallClient } from "../../../calling-stateful-client/src";
import { CallState as CallStatus } from '@azure/communication-calling';
import { CommunicationIdentifier, CommunicationUserIdentifier, MicrosoftTeamsUserIdentifier, PhoneNumberIdentifier, UnknownIdentifier } from '@azure/communication-common';
/**
 * Check if the call state represents being in the call
 *
 * @internal
 */
export declare const _isInCall: (callStatus?: CallStatus | undefined) => boolean;
/**
 * Check if the call state represents being in the lobby or waiting to be admitted.
 *
 * @internal
 */
export declare const _isInLobbyOrConnecting: (callStatus: CallStatus | undefined) => boolean;
/**
 * Check if the device manager local video is on when not part of a call
 * i.e. do unparented views exist.
 *
 * @internal
 */
export declare const _isPreviewOn: (deviceManager: DeviceManagerState) => boolean;
/**
 * Dispose of all preview views
 * We assume all unparented views are local preview views.
 *
 * @private
 */
export declare const disposeAllLocalPreviewViews: (callClient: StatefulCallClient) => Promise<void>;
/**
 * Update the users displayNames based on the type of user they are
 *
 * @internal
 */
export declare const _updateUserDisplayNames: (participants: RemoteParticipantState[]) => RemoteParticipantState[];
/**
 * @private
 * A type guard to ensure all participants are acceptable type for Teams call
 */
export declare const isTeamsCallParticipants: (participants: CommunicationIdentifier[]) => participants is (PhoneNumberIdentifier | MicrosoftTeamsUserIdentifier | UnknownIdentifier)[];
/**
 * @private
 * A type guard to ensure all participants are acceptable type for ACS call
 */
export declare const isACSCallParticipants: (participants: CommunicationIdentifier[]) => participants is (CommunicationUserIdentifier | PhoneNumberIdentifier | UnknownIdentifier)[];
//# sourceMappingURL=callUtils.d.ts.map