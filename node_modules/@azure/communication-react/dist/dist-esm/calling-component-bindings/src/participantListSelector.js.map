{"version":3,"file":"participantListSelector.js","sourceRoot":"","sources":["../../../../preprocess-dist/calling-component-bindings/src/participantListSelector.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,UAAU,EAA4B,MAAM,iBAAiB,CAAC;AAGnJ,OAAO,EAAE,oCAAoC,EAAE,MAAM,sCAAsC,CAAC;AAC5F,OAAO,EAAE,6BAA6B,EAAE,gCAAgC;AACxE,MAAM,sDAAsD,GAAG,CAAC,kBAA4C,EAAoC,EAAE;IAChJ,qEAAqE;IACrE,MAAM,kBAAkB,GAAG,SAAS,CAAC,EAAE;QACrC,OAAO,kBAAkB;YACzB,mGAAmG;aAClG,MAAM,CAAC,CAAC,WAAmC,EAAE,EAAE;YAC9C,OAAO,WAAW,CAAC,KAAK,KAAK,SAAS,CAAC;QACzC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,WAAmC,EAAE,EAAE;YAC7C,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,eAAe,KAAK,eAAe,IAAI,WAAW,CAAC,WAAW,CAAC,CAAC;YAChK,OAAO,SAAS,CAAC,6BAA6B,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,OAAO,EAAE,eAAe,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;QACpL,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;;YACf,MAAM,KAAK,GAAG,CAAA,MAAA,CAAC,CAAC,WAAW,0CAAE,WAAW,EAAE,KAAI,EAAE,CAAC;YACjD,MAAM,KAAK,GAAG,CAAA,MAAA,CAAC,CAAC,WAAW,0CAAE,WAAW,EAAE,KAAI,EAAE,CAAC;YACjD,IAAI,KAAK,GAAG,KAAK,EAAE;gBACjB,OAAO,CAAC,CAAC,CAAC;aACX;iBAAM,IAAI,KAAK,GAAG,KAAK,EAAE;gBACxB,OAAO,CAAC,CAAC;aACV;iBAAM;gBACL,OAAO,CAAC,CAAC;aACV;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IACF,OAAO,oCAAoC,CAAC,kBAAkB,CAAC,CAAC;AAClE,CAAC,CAAC;AAYF;;;;GAIG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAA4B,cAAc,CAAC,CAAC,aAAa,EAAE,cAAc,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE,WAAW,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,OAAO,EAG3O,EAAE;IACF,MAAM,YAAY,GAAG,kBAAkB,CAAC,CAAC,CAAC,sDAAsD,CAAC,gCAAgC,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3K,YAAY,CAAC,IAAI,CAAC;QAChB,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,WAAW;QACxB,eAAe,EAAE,iBAAiB;QAClC,OAAO,EAAE,OAAO;QAChB,KAAK,EAAE,WAAW;QAClB,iDAAiD;QACjD,WAAW,EAAE,KAAK;KACnB,CAAC,CAAC;IACH,OAAO;QACL,YAAY,EAAE,YAAY;QAC1B,QAAQ,EAAE,MAAM;KACjB,CAAC;AACJ,CAAC,CAAC,CAAC;AACH,MAAM,gCAAgC,GAAG,CAAC,kBAA4C,EAA4B,EAAE;IAClH,OAAO,kBAAkB,CAAC;AAC5B,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CallClientState, RemoteParticipantState } from '@internal/calling-stateful-client';\nimport { createSelector } from 'reselect';\nimport { getIdentifier, getDisplayName, getRemoteParticipants, getIsScreenSharingOn, getIsMuted, CallingBaseSelectorProps } from './baseSelectors';\nimport { CallParticipantListParticipant } from '@internal/react-components';\nimport { _updateUserDisplayNames } from './utils/callUtils';\nimport { memoizedConvertAllremoteParticipants } from './utils/participantListSelectorUtils';\nimport { toFlatCommunicationIdentifier } from '@internal/acs-ui-common';\nconst convertRemoteParticipantsToParticipantListParticipants = (remoteParticipants: RemoteParticipantState[]): CallParticipantListParticipant[] => {\n  /* eslint-disable @typescript-eslint/explicit-function-return-type */\n  const conversionCallback = memoizeFn => {\n    return remoteParticipants\n    // temporarily hiding lobby participants in ACS clients till we can admit users through ACS clients\n    .filter((participant: RemoteParticipantState) => {\n      return participant.state !== 'InLobby';\n    }).map((participant: RemoteParticipantState) => {\n      const isScreenSharing = Object.values(participant.videoStreams).some(videoStream => videoStream.mediaStreamType === 'ScreenSharing' && videoStream.isAvailable);\n      return memoizeFn(toFlatCommunicationIdentifier(participant.identifier), participant.displayName, participant.state, participant.isMuted, isScreenSharing, participant.isSpeaking);\n    }).sort((a, b) => {\n      const nameA = a.displayName?.toLowerCase() || '';\n      const nameB = b.displayName?.toLowerCase() || '';\n      if (nameA < nameB) {\n        return -1;\n      } else if (nameA > nameB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  };\n  return memoizedConvertAllremoteParticipants(conversionCallback);\n};\n\n/**\n * Selector type for {@link ParticipantList} component.\n *\n * @public\n */\nexport type ParticipantListSelector = (state: CallClientState, props: CallingBaseSelectorProps) => {\n  participants: CallParticipantListParticipant[];\n  myUserId: string;\n};\n\n/**\n * Selects data that drives {@link ParticipantList} component.\n *\n * @public\n */\nexport const participantListSelector: ParticipantListSelector = createSelector([getIdentifier, getDisplayName, getRemoteParticipants, getIsScreenSharingOn, getIsMuted], (userId, displayName, remoteParticipants, isScreenSharingOn, isMuted): {\n  participants: CallParticipantListParticipant[];\n  myUserId: string;\n} => {\n  const participants = remoteParticipants ? convertRemoteParticipantsToParticipantListParticipants(updateUserDisplayNamesTrampoline(Object.values(remoteParticipants))) : [];\n  participants.push({\n    userId: userId,\n    displayName: displayName,\n    isScreenSharing: isScreenSharingOn,\n    isMuted: isMuted,\n    state: 'Connected',\n    // Local participant can never remove themselves.\n    isRemovable: false\n  });\n  return {\n    participants: participants,\n    myUserId: userId\n  };\n});\nconst updateUserDisplayNamesTrampoline = (remoteParticipants: RemoteParticipantState[]): RemoteParticipantState[] => {\n  return remoteParticipants;\n};\"../../calling-stateful-client/src\"\"../../react-components/src\"\"../../acs-ui-common/src\""]}