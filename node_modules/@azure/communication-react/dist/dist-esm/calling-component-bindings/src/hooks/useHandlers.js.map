{"version":3,"file":"useHandlers.js","sourceRoot":"","sources":["../../../../../preprocess-dist/calling-component-bindings/src/hooks/useHandlers.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAgB,UAAU,EAAE,MAAM,OAAO,CAAC;AACjD,OAAO,EAAsB,UAAU,EAAE,eAAe,EAAE,YAAY,EAAE,iBAAiB,EAAE,6CAA0C;AACrI,OAAO,EAAE,wCAAwC,EAAE,MAAM,sDAAsD,CAAC;AAChH,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,WAAW,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAElG;;;;;;;GAOG;AACH,+HAA+H;AAC/H,MAAM,CAAC,MAAM,WAAW,GAAG,CAAU,SAAiD,EAAE,EAAE;;IACxF,MAAM,UAAU,GAAuB,MAAC,UAAU,CAAC,iBAAiB,CAAS,0CAAE,UAAU,CAAC;IAC1F,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;IACzC,MAAM,IAAI,GAAG,MAAA,UAAU,CAAC,WAAW,CAAC,0CAAE,IAAI,CAAC;IAC3C,MAAM,SAAS,GAAG,MAAA,UAAU,CAAC,gBAAgB,CAAC,0CAAE,SAAS,CAAC;IAC1D,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,SAAS,CAAC;KAClB;IAED,iFAAiF;IACjF,IAAI,SAAS,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE;QAC7C,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;SAClF;KACF;IACD,IAAI,SAAS,IAAI,eAAe,CAAC,SAAS,CAAC,EAAE;QAC3C,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;SAC5F;KACF;IACD,OAAO,wCAAwC,CAAC,UAAU,EAAE,SAAS,EAAE,aAAa,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;AACzG,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ReactElement, useContext } from 'react';\nimport { StatefulCallClient, _isACSCall, _isACSCallAgent, _isTeamsCall, _isTeamsCallAgent } from '@internal/calling-stateful-client';\nimport { createDefaultCallingHandlersForComponent } from '../handlers/createDefaultCallingHandlersForComponent';\nimport { CallAgentContext, CallClientContext, CallContext, useDeviceManager } from '../providers';\n\n/**\n * Hook to obtain a handler for a specified component.\n *\n * Useful when implementing a custom component that utilizes the providers\n * exported from this library.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type\nexport const useHandlers = <PropsT,>(component: (props: PropsT) => ReactElement | null) => {\n  const callClient: StatefulCallClient = (useContext(CallClientContext) as any)?.callClient;\n  const deviceManager = useDeviceManager();\n  const call = useContext(CallContext)?.call;\n  const callAgent = useContext(CallAgentContext)?.callAgent;\n  if (!callClient) {\n    return undefined;\n  }\n\n  // Handle edge case, validate if call and callAgent are the same type (ACS/Teams)\n  if (callAgent && _isTeamsCallAgent(callAgent)) {\n    if (call && !_isTeamsCall(call)) {\n      throw new Error('A TeamsCall must be provided when callAgent is TeamsCallAgent');\n    }\n  }\n  if (callAgent && _isACSCallAgent(callAgent)) {\n    if (call && !_isACSCall(call)) {\n      throw new Error('A regular ACS Call must be provided when callAgent is regular CallAgent');\n    }\n  }\n  return createDefaultCallingHandlersForComponent(callClient, callAgent, deviceManager, call, component);\n};\"../../../calling-stateful-client/src\""]}