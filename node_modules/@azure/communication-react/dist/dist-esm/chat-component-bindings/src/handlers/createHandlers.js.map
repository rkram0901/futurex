{"version":3,"file":"createHandlers.js","sourceRoot":"","sources":["../../../../../preprocess-dist/chat-component-bindings/src/handlers/createHandlers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PagedAsyncIterableIterator } from '@azure/core-paging';\nimport { ReactElement } from 'react';\nimport { Common, fromFlatCommunicationIdentifier } from '@internal/acs-ui-common';\nimport { StatefulChatClient } from '@internal/chat-stateful-client';\nimport { ChatMessage, ChatMessageReadReceipt, ChatThreadClient, SendMessageOptions } from '@azure/communication-chat';\nimport memoizeOne from 'memoize-one';\nimport { FileMetadata } from '@internal/react-components';\n\n/**\n * Object containing all the handlers required for chat components.\n *\n * Chat related components from this package are able to pick out relevant handlers from this object.\n * See {@link useHandlers} and {@link usePropsFor}.\n *\n * @public\n */\nexport type ChatHandlers = {\n  onSendMessage: (content: string, options?: SendMessageOptions) => Promise<void>;\n  onMessageSeen: (chatMessageId: string) => Promise<void>;\n  onTyping: () => Promise<void>;\n  onRemoveParticipant: (userId: string) => Promise<void>;\n  updateThreadTopicName: (topicName: string) => Promise<void>;\n  onLoadPreviousChatMessages: (messagesToLoad: number) => Promise<boolean>;\n  onUpdateMessage: (messageId: string, content: string) => Promise<void>;\n  onDeleteMessage: (messageId: string) => Promise<void>;\n};\n\n/**\n * Create the default implementation of {@link ChatHandlers}.\n *\n * Useful when implementing a custom component that utilizes the providers\n * exported from this library.\n *\n * Returned object is memoized to avoid rerenders when used as props for React Components.\n *\n * @public\n */\nexport const createDefaultChatHandlers = memoizeOne((chatClient: StatefulChatClient, chatThreadClient: ChatThreadClient): ChatHandlers => {\n  let messageIterator: PagedAsyncIterableIterator<ChatMessage> | undefined = undefined;\n  let readReceiptIterator: PagedAsyncIterableIterator<ChatMessageReadReceipt> | undefined = undefined;\n  return {\n    onSendMessage: async (content: string, options?: SendMessageOptions) => {\n      const sendMessageRequest = {\n        content,\n        senderDisplayName: chatClient.getState().displayName\n      };\n      await chatThreadClient.sendMessage(sendMessageRequest, options);\n    },\n    onUpdateMessage: async (messageId: string, content: string, metadata?: Record<string, string>, options?: {\n      attachedFilesMetadata?: FileMetadata[];\n    }) => {\n      const updatedMetadata = metadata ? {\n        ...metadata\n      } : {};\n      updatedMetadata['fileSharingMetadata'] = JSON.stringify(options?.attachedFilesMetadata || []);\n      await chatThreadClient.updateMessage(messageId, {\n        content,\n        metadata: updatedMetadata\n      });\n    },\n    onDeleteMessage: async (messageId: string) => {\n      await chatThreadClient.deleteMessage(messageId);\n    },\n    // This handler is designed for chatThread to consume\n    onMessageSeen: async (chatMessageId: string) => {\n      await chatThreadClient.sendReadReceipt({\n        chatMessageId\n      });\n    },\n    onTyping: async () => {\n      await chatThreadClient.sendTypingNotification();\n    },\n    onRemoveParticipant: async (userId: string) => {\n      await chatThreadClient.removeParticipant(fromFlatCommunicationIdentifier(userId));\n    },\n    updateThreadTopicName: async (topicName: string) => {\n      await chatThreadClient.updateTopic(topicName);\n    },\n    onLoadPreviousChatMessages: async (messagesToLoad: number) => {\n      if (messageIterator === undefined) {\n        // Lazy definition so that errors in the method call are reported correctly.\n        // Also allows recovery via retries in case of transient errors.\n        messageIterator = chatThreadClient.listMessages({\n          maxPageSize: 50\n        });\n      }\n      if (readReceiptIterator === undefined) {\n        readReceiptIterator = chatThreadClient.listReadReceipts();\n      }\n      // get the earliest message time\n      let remainingMessagesToGet = messagesToLoad;\n      let isAllChatMessagesLoaded = false;\n      let earliestTime = Number.MAX_SAFE_INTEGER;\n      while (remainingMessagesToGet >= 1) {\n        const message = await messageIterator.next();\n        if (message?.value?.id) {\n          if (parseInt(message.value.id) < earliestTime) {\n            earliestTime = parseInt(message.value.id);\n          }\n        }\n        if (message.value?.type && message.value.type === 'text') {\n          remainingMessagesToGet--;\n        }\n\n        // We have traversed all messages in this thread\n        if (message.done) {\n          isAllChatMessagesLoaded = true;\n          break;\n        }\n      }\n      // keep fetching read receipts until read receipt time < earlist message time\n      let readReceipt = await readReceiptIterator.next();\n      while (!readReceipt.done && parseInt(readReceipt?.value?.chatMessageId) >= earliestTime) {\n        readReceipt = await readReceiptIterator.next();\n      }\n      return isAllChatMessagesLoaded;\n    }\n  };\n});\n\n/**\n * Create a set of default handlers for given component.\n *\n * Returned object is memoized (with reference to the arguments) to avoid\n * renders when used as props for React Components.\n *\n * @public\n */\nexport const createDefaultChatHandlersForComponent = <Props,>(chatClient: StatefulChatClient, chatThreadClient: ChatThreadClient, _: (props: Props) => ReactElement | null): Common<ChatHandlers, Props> => {\n  return createDefaultChatHandlers(chatClient, chatThreadClient);\n};\"../../../acs-ui-common/src\"\"../../../chat-stateful-client/src\"\"../../../react-components/src\""]}