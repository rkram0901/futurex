{"version":3,"file":"errorBarSelector.js","sourceRoot":"","sources":["../../../../preprocess-dist/chat-component-bindings/src/errorBarSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ChatBaseSelectorProps, getLatestErrors } from './baseSelectors';\nimport { ActiveErrorMessage, ErrorType } from '@internal/react-components';\nimport { createSelector } from 'reselect';\nimport { ChatClientState, ChatError, ChatErrors, ChatErrorTarget } from '@internal/chat-stateful-client';\n\n/**\n * Selector type for {@link ErrorBar} component.\n *\n * @public\n */\nexport type ErrorBarSelector = (state: ChatClientState, props: ChatBaseSelectorProps) => {\n  activeErrorMessages: ActiveErrorMessage[];\n};\n\n/**\n * Select the first fiew active errors from the state for the {@link ErrorBar} component.\n *\n * In case there are many errors, only a few top errors are returned to avoid\n * filling up the UI with too many errors.\n *\n * Invariants:\n *   - {@link ErrorType} is never repeated in the returned errors.\n *   - Errors are returned in a fixed order by {@link ErrorType}.\n *\n * @public\n */\nexport const errorBarSelector: ErrorBarSelector = createSelector([getLatestErrors], (latestErrors): {\n  activeErrorMessages: ActiveErrorMessage[];\n} => {\n  // The order in which the errors are returned is significant: The `ErrorBar` shows errors on the UI in that order.\n  // There are several options for the ordering:\n  //   - Sorted by when the errors happened (latest first / oldest first).\n  //   - Stable sort by error type.\n  //\n  // We chose to stable sort by error type: We intend to show only a small number of errors on the UI and we do not\n  // have timestamps for errors.\n  const activeErrorMessages: ActiveErrorMessage[] = [];\n  let specificSendMessageErrorSeen = false;\n  {\n    const error = latestUnableToReachChatServiceError(latestErrors);\n    if (error !== undefined) {\n      activeErrorMessages.push(error);\n    }\n  }\n  {\n    const error = latestAccessDeniedError(latestErrors);\n    if (error !== undefined) {\n      activeErrorMessages.push(error);\n    }\n  }\n  const sendMessageError = latestErrors['ChatThreadClient.sendMessage'];\n  {\n    const error = latestNotInThisThreadError(latestErrors);\n    if (error !== undefined) {\n      if (sendMessageError !== undefined) {\n        activeErrorMessages.push({\n          type: 'sendMessageNotInChatThread',\n          // Set the latest timestamp of all the errors that translated to an active error.\n          timestamp: sendMessageError.timestamp > (error.timestamp ?? 0) ? sendMessageError.timestamp : error.timestamp\n        });\n        specificSendMessageErrorSeen = true;\n      } else {\n        activeErrorMessages.push(error);\n      }\n    }\n  }\n  if (!specificSendMessageErrorSeen && sendMessageError !== undefined) {\n    activeErrorMessages.push({\n      type: 'sendMessageGeneric',\n      timestamp: sendMessageError.timestamp\n    });\n  }\n\n  // We only return the first few errors to avoid filling up the UI with too many `MessageBar`s.\n  activeErrorMessages.splice(maxErrorCount);\n  return {\n    activeErrorMessages: activeErrorMessages\n  };\n});\nconst maxErrorCount = 3;\nconst accessErrorTargets: ChatErrorTarget[] = ['ChatThreadClient.getProperties', 'ChatThreadClient.listMessages', 'ChatThreadClient.listParticipants', 'ChatThreadClient.sendMessage', 'ChatThreadClient.sendTypingNotification'];\nconst latestUnableToReachChatServiceError = (latestErrors: ChatErrors): ActiveErrorMessage | undefined => {\n  return latestActiveErrorSatisfying(latestErrors, 'unableToReachChatService', (error: ChatError): boolean => {\n    return !!error && !!error.innerError && error.innerError['code'] === 'REQUEST_SEND_ERROR';\n  });\n};\nconst latestAccessDeniedError = (latestErrors: ChatErrors): ActiveErrorMessage | undefined => {\n  return latestActiveErrorSatisfying(latestErrors, 'accessDenied', (error: ChatError): boolean => {\n    return !!error && !!error.innerError && error.innerError['statusCode'] === 401;\n  });\n};\nconst latestNotInThisThreadError = (latestErrors: ChatErrors): ActiveErrorMessage | undefined => {\n  return latestActiveErrorSatisfying(latestErrors, 'userNotInChatThread', (error: ChatError): boolean => {\n    if (!error || !error.innerError) {\n      return false;\n    }\n\n    // Explicitly ignore 400 REST error when listParticipants() is called and a BotContact MRI is found in the participants.\n    // This check should be removed when the chat SDK has handled this issue. Note: The this does not stop the error being logged to the console.\n    // To the best of our ability we have confirmed this to have no impact on the participantList returned (all valid participants are still returned), nor\n    // does it have an impact on the participant list updating on other participants joining/leaving or on individual participant actions like removeParticipant.\n    if (isErrorDueToBotContact(error)) {\n      return false;\n    }\n\n    // Chat service returns 403 if a user has been removed from a thread.\n    // Chat service returns either 400 or 404 if the thread ID is malformed, depending on how the thread ID is malformed.\n    return [400, 403, 404].some(statusCode => error.innerError['statusCode'] === statusCode);\n  });\n};\nconst botContactMRIPrefix = '28:';\nconst isErrorDueToBotContact = (error: ChatError): boolean => error.innerError['statusCode'] === 400 && error.innerError.message.includes(`Identifier format is not supported (${botContactMRIPrefix}`);\nconst latestActiveErrorSatisfying = (errors: ChatErrors, activeErrorType: ErrorType, predicate: (error: ChatError) => boolean): ActiveErrorMessage | undefined => {\n  const activeErrorMessages: ActiveErrorMessage[] = [];\n  for (const target of accessErrorTargets) {\n    const error = errors[target];\n    if (predicate(error)) {\n      activeErrorMessages.push({\n        type: activeErrorType,\n        timestamp: error.timestamp\n      });\n    }\n  }\n  if (activeErrorMessages.length === 0) {\n    return undefined;\n  }\n  // We're actually sure that both timestamps will always exist, because we set them above.\n  activeErrorMessages.sort((a: ActiveErrorMessage, b: ActiveErrorMessage) => (a.timestamp?.getTime() ?? 0) - (b.timestamp?.getTime() ?? 0));\n  return activeErrorMessages[activeErrorMessages.length - 1];\n};\"../../react-components/src\"\"../../chat-stateful-client/src\""]}