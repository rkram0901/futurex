{"version":3,"file":"typingIndicatorSelector.js","sourceRoot":"","sources":["../../../../preprocess-dist/chat-component-bindings/src/typingIndicatorSelector.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,mBAAmB,EAAE,eAAe,EAAE,SAAS,EAAyB,MAAM,iBAAiB,CAAC;AACzG,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAG1C,OAAO,EAAE,6BAA6B,EAAE,gCAAgC;AAExE,OAAO,EAAE,uCAAuC,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAC;AAEpG,MAAM,sBAAsB,GAAG,CAAC,gBAAgD,EAAE,MAAc,EAAkC,EAAE;IAClI,MAAM,wBAAwB,GAAmC,EAAE,CAAC;IACpE,MAAM,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;IACvB,MAAM,eAAe,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,uCAAuC,CAAC,CAAC;IACvF,KAAK,IAAI,CAAC,GAAG,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QACrD,MAAM,eAAe,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,6BAA6B,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;YACpE,SAAS;SACV;QACD,IAAI,eAAe,CAAC,UAAU,GAAG,eAAe,EAAE;YAChD,SAAS;SACV;QACD,IAAI,IAAI,CAAC,GAAG,CAAC,6BAA6B,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE;YACnE,SAAS;SACV;QACD,IAAI,CAAC,GAAG,CAAC,6BAA6B,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;QAChE,wBAAwB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KAChD;IACD,OAAO,wBAAwB,CAAC;AAClC,CAAC,CAAC;AACF,MAAM,qDAAqD,GAAG,CAAC,gBAAgD,EAAE,YAEhH,EAA8B,EAAE;IAC/B,OAAO,gBAAgB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;;QAAC,OAAA,CAAC;YAC9C,MAAM,EAAE,6BAA6B,CAAC,eAAe,CAAC,MAAM,CAAC;YAC7D,WAAW,EAAE,MAAA,YAAY,CAAC,6BAA6B,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,0CAAE,WAAW;SAC9F,CAAC,CAAA;KAAA,CAAC,CAAC;AACN,CAAC,CAAC;AAWF;;;;GAIG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAA4B,cAAc,CAAC,CAAC,mBAAmB,EAAE,eAAe,EAAE,SAAS,CAAC,EAAE,CAAC,gBAAgD,EAAE,YAEpL,EAAE,MAAc,EAAE,EAAE;IACnB,4EAA4E;IAC5E,IAAI,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,IAAI,sBAAsB,EAAE;QAChE,OAAO;YACL,WAAW,EAAE,EAAE;SAChB,CAAC;KACH;IAED,qIAAqI;IACrI,MAAM,wBAAwB,GAAG,sBAAsB,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IAClF,MAAM,WAAW,GAA+B,qDAAqD,CAAC,wBAAwB,EAAE,YAAY,CAAC,CAAC;IAC9I,OAAO;QACL,WAAW;KACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getTypingIndicators, getParticipants, getUserId, ChatBaseSelectorProps } from './baseSelectors';\nimport { createSelector } from 'reselect';\nimport { ChatParticipant } from '@azure/communication-chat';\nimport { TypingIndicatorReceivedEvent } from '@azure/communication-chat';\nimport { toFlatCommunicationIdentifier } from '@internal/acs-ui-common';\nimport { CommunicationParticipant } from '@internal/react-components';\nimport { MINIMUM_TYPING_INTERVAL_IN_MILLISECONDS, PARTICIPANTS_THRESHOLD } from './utils/constants';\nimport { ChatClientState } from '@internal/chat-stateful-client';\nconst filterTypingIndicators = (typingIndicators: TypingIndicatorReceivedEvent[], userId: string): TypingIndicatorReceivedEvent[] => {\n  const filteredTypingIndicators: TypingIndicatorReceivedEvent[] = [];\n  const seen = new Set();\n  const date8SecondsAgo = new Date(Date.now() - MINIMUM_TYPING_INTERVAL_IN_MILLISECONDS);\n  for (let i = typingIndicators.length - 1; i >= 0; i--) {\n    const typingIndicator = typingIndicators[i];\n    if (toFlatCommunicationIdentifier(typingIndicator.sender) === userId) {\n      continue;\n    }\n    if (typingIndicator.receivedOn < date8SecondsAgo) {\n      continue;\n    }\n    if (seen.has(toFlatCommunicationIdentifier(typingIndicator.sender))) {\n      continue;\n    }\n    seen.add(toFlatCommunicationIdentifier(typingIndicator.sender));\n    filteredTypingIndicators.push(typingIndicator);\n  }\n  return filteredTypingIndicators;\n};\nconst convertSdkTypingIndicatorsToCommunicationParticipants = (typingIndicators: TypingIndicatorReceivedEvent[], participants: {\n  [key: string]: ChatParticipant;\n}): CommunicationParticipant[] => {\n  return typingIndicators.map(typingIndicator => ({\n    userId: toFlatCommunicationIdentifier(typingIndicator.sender),\n    displayName: participants[toFlatCommunicationIdentifier(typingIndicator.sender)]?.displayName\n  }));\n};\n\n/**\n * Selector type for {@link TypingIndicator} component.\n *\n * @public\n */\nexport type TypingIndicatorSelector = (state: ChatClientState, props: ChatBaseSelectorProps) => {\n  typingUsers: CommunicationParticipant[];\n};\n\n/**\n * Selector for {@link TypingIndicator} component.\n *\n * @public\n */\nexport const typingIndicatorSelector: TypingIndicatorSelector = createSelector([getTypingIndicators, getParticipants, getUserId], (typingIndicators: TypingIndicatorReceivedEvent[], participants: {\n  [key: string]: ChatParticipant;\n}, userId: string) => {\n  // if the participant size reaches the threshold then return no typing users\n  if (Object.values(participants).length >= PARTICIPANTS_THRESHOLD) {\n    return {\n      typingUsers: []\n    };\n  }\n\n  // filter typing indicators to remove those that are from the duplicate users or current user as well as those older than a threshold\n  const filteredTypingIndicators = filterTypingIndicators(typingIndicators, userId);\n  const typingUsers: CommunicationParticipant[] = convertSdkTypingIndicatorsToCommunicationParticipants(filteredTypingIndicators, participants);\n  return {\n    typingUsers\n  };\n});\"../../acs-ui-common/src\"\"../../react-components/src\"\"../../chat-stateful-client/src\""]}