{"version":3,"file":"ChatThreadClientProvider.js","sourceRoot":"","sources":["../../../../../preprocess-dist/chat-component-bindings/src/providers/ChatThreadClientProvider.tsx"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAGzD;;GAEG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,aAAa,CAA+B,SAAS,CAAC,CAAC;AAY9F;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,KAAoC,EAAe,EAAE;IAC5F,OAAO,oBAAC,uBAAuB,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,CAAC,gBAAgB,IAAG,KAAK,CAAC,QAAQ,CAAoC,CAAC;AAC9H,CAAC,CAAC;AACF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAqB,EAAE;IACxD,MAAM,gBAAgB,GAAG,UAAU,CAAC,uBAAuB,CAAC,CAAC;IAC7D,IAAI,CAAC,gBAAgB,EAAE;QACrB,MAAM,mHAAmH,CAAC;KAC3H;IACD,OAAO,gBAAgB,CAAC;AAC1B,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { createContext, useContext } from 'react';\nimport { ChatThreadClient } from '@azure/communication-chat';\n\n/**\n * @private\n */\nexport const ChatThreadClientContext = createContext<ChatThreadClient | undefined>(undefined);\n\n/**\n * Arguments to initialize a {@link ChatThreadClientProvider}.\n *\n * @public\n */\nexport type ChatThreadClientProviderProps = {\n  children: React.ReactNode;\n  chatThreadClient: ChatThreadClient;\n};\n\n/**\n * A {@link React.Context} that stores a {@link @azure/communication-chat#ChatThreadClient}.\n *\n * Chat components from this package must be wrapped with a {@link ChatThreadClientProvider}.\n *\n * @public\n */\nexport const ChatThreadClientProvider = (props: ChatThreadClientProviderProps): JSX.Element => {\n  return <ChatThreadClientContext.Provider value={props.chatThreadClient}>{props.children}</ChatThreadClientContext.Provider>;\n};\n/**\n * Hook to obtain {@link @azure/communication-chat#ChatThreadClient} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers\n * exported from this library.\n *\n * @public\n */\nexport const useChatThreadClient = (): ChatThreadClient => {\n  const chatThreadClient = useContext(ChatThreadClientContext);\n  if (!chatThreadClient) {\n    throw 'Please wrap components with ChatThreadClientProvider and initialize a chat thread client before calling the hook.';\n  }\n  return chatThreadClient;\n};"]}