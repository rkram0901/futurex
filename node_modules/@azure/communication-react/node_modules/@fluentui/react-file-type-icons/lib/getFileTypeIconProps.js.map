{"version":3,"file":"getFileTypeIconProps.js","sourceRoot":"../src/","sources":["getFileTypeIconProps.ts"],"names":[],"mappings":"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","sourcesContent":["import { FileTypeIconMap } from './FileTypeIconMap';\nimport { FileIconType } from './FileIconType';\nimport type { FileIconTypeInput } from './FileIconType';\n\nlet _extensionToIconName: { [key: string]: string };\n\nconst GENERIC_FILE = 'genericfile';\nconst FOLDER = 'folder';\nconst SHARED_FOLDER = 'sharedfolder';\nconst DOCSET_FOLDER = 'docset';\nconst LIST_ITEM = 'listitem';\nconst LIST = 'splist';\nconst MULTIPLE_ITEMS = 'multiple';\nconst NEWS = 'sponews';\nconst STREAM = 'stream';\nconst DESKTOP_FOLDER = 'desktopfolder';\nconst DOCUMENTS_FOLDER = 'documentfolder';\nconst PICTURES_FOLDER = 'picturesfolder';\nconst LINKED_FOLDER = 'linkedfolder';\nconst FORM = 'form';\nconst SWAY = 'sway';\n\nexport const DEFAULT_ICON_SIZE: FileTypeIconSize = 16;\nexport type FileTypeIconSize = 16 | 20 | 24 | 32 | 40 | 48 | 64 | 96;\nexport type ImageFileType = 'svg' | 'png';\n\nexport interface IFileTypeIconOptions {\n  /**\n   * The file extension, such as .pptx, for which you need an icon.\n   * For file type icons that are not associated with a file\n   * extension, such as folder, use the type property.\n   */\n  extension?: string;\n  /**\n   * The type of file type icon you need. Use this property for\n   * file type icons that are not associated with a file extension,\n   * such as folder.\n   */\n  type?: FileIconTypeInput;\n  /**\n   * The size of the icon in pixels.\n   * @default 16\n   */\n  size?: FileTypeIconSize;\n  /**\n   * The type of image file to use. Can be svg or png.\n   * @default 'svg'\n   */\n  imageFileType?: ImageFileType;\n}\n\n/**\n * This function returns properties for a file type icon given the IFileTypeIconOptions.\n * It accounts for different device pixel ratios. For example,\n * `getFileTypeIconProps({ extension: 'doc', size: 16, imageFileType: 'png' })`\n * will return `{ iconName: 'docx16_2x_png' }` if the `devicePixelRatio` is 2.\n * @param options\n */\nexport function getFileTypeIconProps(options: IFileTypeIconOptions): { iconName: string; 'aria-label'?: string } {\n  // First, obtain the base name of the icon using the extension or type.\n  let iconBaseName: string;\n  const { extension, type, size, imageFileType } = options;\n\n  iconBaseName = getFileTypeIconNameFromExtensionOrType(extension, type);\n  // Next, obtain the suffix using the icon size, user's device pixel ration, and\n  // preference for svg or png\n  let _size: FileTypeIconSize = size || DEFAULT_ICON_SIZE;\n  let suffix: string = getFileTypeIconSuffix(_size, imageFileType);\n\n  return { iconName: iconBaseName + suffix, 'aria-label': extension };\n}\n\nexport function getFileTypeIconNameFromExtensionOrType(\n  extension: string | undefined,\n  type: FileIconType | undefined,\n): string {\n  let iconBaseName: string | undefined;\n  if (extension) {\n    if (!_extensionToIconName) {\n      _extensionToIconName = {};\n\n      for (const iconName in FileTypeIconMap) {\n        if (FileTypeIconMap.hasOwnProperty(iconName)) {\n          const extensions = FileTypeIconMap[iconName].extensions;\n\n          if (extensions) {\n            for (let i = 0; i < extensions.length; i++) {\n              _extensionToIconName[extensions[i]] = iconName;\n            }\n          }\n        }\n      }\n    }\n\n    // Strip periods, force lowercase.\n    extension = extension.replace('.', '').toLowerCase();\n    return _extensionToIconName[extension] || GENERIC_FILE;\n  } else if (type) {\n    switch (type) {\n      case FileIconType.docset:\n        iconBaseName = DOCSET_FOLDER;\n        break;\n      case FileIconType.folder:\n        iconBaseName = FOLDER;\n        break;\n      case FileIconType.listItem:\n        iconBaseName = LIST_ITEM;\n        break;\n      case FileIconType.sharedFolder:\n        iconBaseName = SHARED_FOLDER;\n        break;\n      case FileIconType.stream:\n        iconBaseName = STREAM;\n        break;\n      case FileIconType.multiple:\n        iconBaseName = MULTIPLE_ITEMS;\n        break;\n      case FileIconType.news:\n        iconBaseName = NEWS;\n        break;\n      case FileIconType.desktopFolder:\n        iconBaseName = DESKTOP_FOLDER;\n        break;\n      case FileIconType.documentsFolder:\n        iconBaseName = DOCUMENTS_FOLDER;\n        break;\n      case FileIconType.picturesFolder:\n        iconBaseName = PICTURES_FOLDER;\n        break;\n      case FileIconType.linkedFolder:\n        iconBaseName = LINKED_FOLDER;\n        break;\n      case FileIconType.list:\n        iconBaseName = LIST;\n        break;\n      case FileIconType.form:\n        iconBaseName = FORM;\n        break;\n      case FileIconType.sway:\n        iconBaseName = SWAY;\n        break;\n    }\n  }\n  return iconBaseName || GENERIC_FILE;\n}\n\nexport function getFileTypeIconSuffix(size: FileTypeIconSize, imageFileType: ImageFileType = 'svg'): string {\n  let devicePixelRatio: number = window.devicePixelRatio;\n  let devicePixelRatioSuffix = ''; // Default is 1x\n\n  // SVGs scale well, so you can generally use the default image.\n  // 1.5x is a special case where SVGs need a different image.\n  if (imageFileType === 'svg' && devicePixelRatio > 1 && devicePixelRatio <= 1.5) {\n    // Currently missing 1.5x SVGs at size 20, snap to 1x for now\n    if (size !== 20) {\n      devicePixelRatioSuffix = '_1.5x';\n    }\n  } else if (imageFileType === 'png') {\n    // To look good, PNGs should use a different image for higher device pixel ratios\n    if (devicePixelRatio > 1 && devicePixelRatio <= 1.5) {\n      // Currently missing 1.5x icons for size 20, snap to 2x for now\n      devicePixelRatioSuffix = size === 20 ? '_2x' : '_1.5x';\n    } else if (devicePixelRatio > 1.5 && devicePixelRatio <= 2) {\n      devicePixelRatioSuffix = '_2x';\n    } else if (devicePixelRatio > 2 && devicePixelRatio <= 3) {\n      devicePixelRatioSuffix = '_3x';\n    } else if (devicePixelRatio > 3) {\n      devicePixelRatioSuffix = '_4x';\n    }\n  }\n\n  return size + devicePixelRatioSuffix + '_' + imageFileType;\n}\n"]}