"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeComposeOptions = void 0;
var consts_1 = require("./consts");
var computeDisplayNames_1 = require("./computeDisplayNames");
function mergeComposeOptions(input, inputOptions, parentOptions) {
    if (parentOptions === void 0) { parentOptions = consts_1.defaultComposeOptions; }
    var mapPropsToSlotPropsChain = inputOptions.slotProps
        ? __spreadArray(__spreadArray([], parentOptions.slotProps), [inputOptions.slotProps]) : parentOptions.slotProps;
    var resolveSlotProps = function (props) {
        return mapPropsToSlotPropsChain.reduce(function (acc, definition) {
            var nextProps = __assign({}, definition(props));
            var slots = __spreadArray(__spreadArray([], Object.keys(acc)), Object.keys(nextProps));
            var mergedSlotProps = {};
            slots.forEach(function (slot) {
                if (!mergedSlotProps[slot]) {
                    mergedSlotProps[slot] = __assign(__assign({}, acc[slot]), nextProps[slot]);
                }
            });
            return mergedSlotProps;
        }, {});
    };
    var inputClasses = Array.isArray(inputOptions.classes) ? inputOptions.classes : [inputOptions.classes];
    var state = function (props, ref, options) {
        if (inputOptions.state) {
            return inputOptions.state(parentOptions.state(props, ref, options), ref, options);
        }
        return parentOptions.state(props, ref, options);
    };
    return {
        className: inputOptions.className || parentOptions.className,
        classes: __spreadArray(__spreadArray([], parentOptions.classes), inputClasses),
        displayName: inputOptions.displayName || parentOptions.displayName,
        displayNames: computeDisplayNames_1.computeDisplayNames(inputOptions, parentOptions),
        mapPropsToStylesPropsChain: inputOptions.mapPropsToStylesProps
            ? __spreadArray(__spreadArray([], parentOptions.mapPropsToStylesPropsChain), [inputOptions.mapPropsToStylesProps]) : parentOptions.mapPropsToStylesPropsChain,
        render: typeof input === 'function' ? input : parentOptions.render,
        handledProps: __spreadArray(__spreadArray([], parentOptions.handledProps), (inputOptions.handledProps || [])),
        overrideStyles: inputOptions.overrideStyles || false,
        slots: __assign(__assign({}, parentOptions.slots), inputOptions.slots),
        slotProps: mapPropsToSlotPropsChain,
        state: state,
        resolveSlotProps: resolveSlotProps,
        shorthandConfig: __assign(__assign({}, parentOptions.shorthandConfig), inputOptions.shorthandConfig),
    };
}
exports.mergeComposeOptions = mergeComposeOptions;
