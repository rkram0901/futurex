"use strict";

exports.__esModule = true;
exports.useNestingRoot = void 0;

var React = _interopRequireWildcard(require("react"));

var _NestingContext = require("../NestingContext");

var _RefStack = require("../utils/RefStack");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var registrySet = new _RefStack.RefStack(); // These hooks are not used currently

/* eslint-disable */

var useNestingRoot = function useNestingRoot() {
  var _React$useState = React.useState(registrySet),
      registry = _React$useState[0];

  var parentRef = React.useRef(null);
  var nestedProps = React.useMemo(function () {
    return {
      value: {
        getContextRefs: registry.getContextRefs,
        register: registry.register,
        unregister: registry.unregister
      }
    };
  }, []);
  var getRefs = React.useCallback(function () {
    return registry.getContextRefs(parentRef);
  }, []);
  React.useEffect(function () {
    registry.register(parentRef);
    return function () {
      return registry.unregister(parentRef);
    };
  }, []);
  return {
    NestedComponent: _NestingContext.NestingContext.Provider,
    nestedProps: nestedProps,
    getRefs: getRefs,
    isRoot: true,
    ref: parentRef
  };
};

exports.useNestingRoot = useNestingRoot;
//# sourceMappingURL=useNestingRoot.js.map
