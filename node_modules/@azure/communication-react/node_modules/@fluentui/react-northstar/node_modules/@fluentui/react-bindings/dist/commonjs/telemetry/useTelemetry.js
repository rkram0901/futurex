"use strict";

exports.__esModule = true;
exports.useTelemetry = exports.getTelemetry = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var getTelemetry = function getTelemetry(displayName, telemetry, isFirstRenderRef) {
  var start = -1;
  var end = -1;

  var setStart = function setStart() {
    if (telemetry != null && telemetry.enabled) {
      start = performance.now();

      if (!telemetry.performance[displayName]) {
        telemetry.performance[displayName] = {
          instances: 0,
          renders: 0,
          msTotal: 0,
          msMin: Number.MAX_SAFE_INTEGER,
          msMax: 0,
          msResolveVariablesTotal: 0,
          msResolveStylesTotal: 0,
          msRenderStylesTotal: 0,
          stylesRootCacheHits: 0,
          stylesSlotsCacheHits: 0
        };
      }
    }
  };

  var setEnd = function setEnd() {
    if (telemetry != null && telemetry.enabled && start !== -1) {
      end = performance.now();
      var duration = end - start;
      telemetry.performance[displayName].instances += Number(isFirstRenderRef.current);
      telemetry.performance[displayName].renders++;
      telemetry.performance[displayName].msTotal += duration;
      telemetry.performance[displayName].msMin = Math.min(duration, telemetry.performance[displayName].msMin);
      telemetry.performance[displayName].msMax = Math.max(duration, telemetry.performance[displayName].msMax);
      isFirstRenderRef.current = false;
    }
  };

  return {
    setStart: setStart,
    setEnd: setEnd
  };
};

exports.getTelemetry = getTelemetry;

var useTelemetry = function useTelemetry(displayName, telemetry) {
  var isFirstRenderRef = React.useRef(true);
  return getTelemetry(displayName, telemetry, isFirstRenderRef);
};

exports.useTelemetry = useTelemetry;
//# sourceMappingURL=useTelemetry.js.map
