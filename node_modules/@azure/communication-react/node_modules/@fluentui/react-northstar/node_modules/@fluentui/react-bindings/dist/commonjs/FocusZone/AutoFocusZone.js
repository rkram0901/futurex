"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.AutoFocusZone = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _keys2 = _interopRequireDefault(require("lodash/keys"));

var _reactComponentRef = require("@fluentui/react-component-ref");

var _styles = require("@fluentui/styles");

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _getElementType = require("../utils/getElementType");

var _getUnhandledProps = require("../utils/getUnhandledProps");

var _focusUtilities = require("./focusUtilities");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** AutoFocusZone is used to focus inner element on mount. */
var AutoFocusZone = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(AutoFocusZone, _React$Component);

  function AutoFocusZone() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.root = /*#__PURE__*/React.createRef();

    _this.findElementAndFocusAsync = function () {
      if (!_this.root.current) return;
      var firstFocusableSelector = _this.props.firstFocusableSelector;
      var focusSelector = (0, _styles.callable)(firstFocusableSelector)();
      var firstFocusableChild = focusSelector ? _this.root.current.querySelector(focusSelector) : (0, _focusUtilities.getNextElement)(_this.root.current, _this.root.current.firstChild, true, false, false, true);
      firstFocusableChild && (0, _focusUtilities.focusAsync)(firstFocusableChild);
    };

    return _this;
  }

  var _proto = AutoFocusZone.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.findElementAndFocusAsync();
  };

  _proto.render = function render() {
    var _this2 = this;

    var unhandledProps = (0, _getUnhandledProps.getUnhandledProps)(AutoFocusZone.handledProps, this.props);
    var ElementType = (0, _getElementType.getElementType)(this.props);
    return /*#__PURE__*/React.createElement(ElementType, (0, _extends2.default)({
      ref: function ref(element) {
        (0, _reactComponentRef.handleRef)(_this2.root, element);
        (0, _reactComponentRef.handleRef)(_this2.props.innerRef, element);
      }
    }, unhandledProps), this.props.children);
  };

  return AutoFocusZone;
}(React.Component);

exports.AutoFocusZone = AutoFocusZone;
AutoFocusZone.propTypes = {
  as: PropTypes.elementType,
  firstFocusableSelector: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  innerRef: PropTypes.any
};
AutoFocusZone.handledProps = (0, _keys2.default)(AutoFocusZone.propTypes);
//# sourceMappingURL=AutoFocusZone.js.map
