"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_bindings_1 = require("@fluentui/react-bindings");
var consts_1 = require("../../src/compose/consts");
describe('mergeProps', function () {
    var selfSlot = { __self: consts_1.defaultComposeOptions.slots.__self };
    it('can pass through default options', function () {
        expect(react_bindings_1.mergeProps({}, consts_1.defaultComposeOptions)).toEqual({
            state: {},
            slots: __assign(__assign({}, selfSlot), { root: 'div' }),
            slotProps: {
                root: {},
            },
        });
    });
    it('can pass through default slot props', function () {
        expect(react_bindings_1.mergeProps({ id: 'abc' }, __assign(__assign({}, consts_1.defaultComposeOptions), { handledProps: ['id'], slotProps: [
                function (_state) {
                    return {
                        slot1: { id: 'not this one' },
                    };
                },
                function (state) {
                    return {
                        slot1: { id: state.id },
                    };
                },
            ] }))).toEqual({
            state: { id: 'abc' },
            slots: __assign(__assign({}, selfSlot), { root: 'div' }),
            slotProps: {
                root: {},
                slot1: { id: 'abc' },
            },
        });
    });
    it('can resolve "as" prop', function () {
        var state = { as: 'button' };
        expect(react_bindings_1.mergeProps(state, consts_1.defaultComposeOptions)).toEqual({
            state: state,
            slots: __assign(__assign({}, selfSlot), { root: 'button' }),
            slotProps: {
                root: {},
            },
        });
    });
    it('can mix unrecognized props onto the root', function () {
        expect(react_bindings_1.mergeProps({ 'data-foo': 'foo' }, consts_1.defaultComposeOptions)).toEqual({
            slots: __assign(__assign({}, selfSlot), { root: 'div' }),
            state: {
                'data-foo': 'foo',
            },
            slotProps: {
                root: {
                    'data-foo': 'foo',
                },
            },
        });
    });
});
