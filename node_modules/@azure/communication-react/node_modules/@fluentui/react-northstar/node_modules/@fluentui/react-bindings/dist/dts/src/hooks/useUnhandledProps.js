"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUnhandledProps = void 0;
var getUnhandledProps_1 = require("../utils/getUnhandledProps");
/**
 * Returns an object consisting of props beyond the scope of the Component.
 * Useful for getting and spreading unknown props from the user.
 *
 * @param handledProps - An array with names of props
 * @param props - A ReactElement props object
 * @returns A shallow copy of the prop object
 */
function useUnhandledProps(handledProps, props) {
    if (process.env.NODE_ENV === 'test') {
        return getUnhandledProps_1.getUnhandledProps(handledProps, __assign(__assign({}, props), { 'data-uses-unhanded-props': true }));
    }
    return getUnhandledProps_1.getUnhandledProps(handledProps, props);
}
exports.useUnhandledProps = useUnhandledProps;
