"use strict";

exports.__esModule = true;
exports.createContext = void 0;

var React = _interopRequireWildcard(require("react"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var createProvider = function createProvider(Original) {
  var Provider = function Provider(props) {
    // Holds an actual "props.value"
    var valueRef = React.useRef(props.value); // Used to sync context updates and avoid stale values, can be considered as render/effect counter of Provider.

    var versionRef = React.useRef(0); // A stable object, is used to avoid context updates via mutation of its values.

    var contextValue = React.useRef();

    if (!contextValue.current) {
      contextValue.current = {
        value: valueRef,
        version: versionRef,
        listeners: []
      };
    }

    (0, _utils.useIsomorphicLayoutEffect)(function () {
      valueRef.current = props.value;
      versionRef.current += 1;
      (0, _utils.runWithNormalPriority)(function () {
        contextValue.current.listeners.forEach(function (listener) {
          listener([versionRef.current, props.value]);
        });
      });
    }, [props.value]);
    return /*#__PURE__*/React.createElement(Original, {
      value: contextValue.current
    }, props.children);
  };
  /* istanbul ignore else */


  if (process.env.NODE_ENV !== 'production') {
    Provider.displayName = 'ContextSelector.Provider';
  }

  return Provider;
};

var createContext = function createContext(defaultValue) {
  var context = /*#__PURE__*/React.createContext({
    value: {
      current: defaultValue
    },
    version: {
      current: -1
    },
    listeners: []
  });
  context.Provider = createProvider(context.Provider); // We don't support Consumer API

  delete context.Consumer;
  return context;
};

exports.createContext = createContext;
//# sourceMappingURL=createContext.js.map
