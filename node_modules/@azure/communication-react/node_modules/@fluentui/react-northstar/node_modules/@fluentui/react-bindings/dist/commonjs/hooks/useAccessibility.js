"use strict";

exports.__esModule = true;
exports.useAccessibility = void 0;

var React = _interopRequireWildcard(require("react"));

var _getAccessibility = require("../accessibility/getAccessibility");

var _FocusZone = require("../FocusZone/FocusZone");

var _useIsomorphicLayoutEffect = require("./useIsomorphicLayoutEffect");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useAccessibility = function useAccessibility(behavior, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      actionHandlers = _options.actionHandlers,
      _options$debugName = _options.debugName,
      debugName = _options$debugName === void 0 ? 'Undefined' : _options$debugName,
      _options$mapPropsToBe = _options.mapPropsToBehavior,
      mapPropsToBehavior = _options$mapPropsToBe === void 0 ? function () {
    return {};
  } : _options$mapPropsToBe,
      _options$rtl = _options.rtl,
      rtl = _options$rtl === void 0 ? false : _options$rtl;
  var definition = (0, _getAccessibility.getAccessibility)(debugName, behavior, mapPropsToBehavior(), rtl, actionHandlers);
  var latestDefinition = React.useRef();
  var slotHandlers = React.useRef({});
  var slotProps = React.useRef({});
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    latestDefinition.current = definition;
  });

  var getA11yProps = function getA11yProps(slotName, userProps) {
    var hasKeyDownHandlers = Boolean(definition.keyHandlers[slotName] || userProps.onKeyDown);
    var childBehavior = definition.childBehaviors ? definition.childBehaviors[slotName] : undefined;
    slotProps.current[slotName] = userProps; // We want to avoid adding event handlers until it's really needed

    if (hasKeyDownHandlers) {
      if (!slotHandlers.current[slotName]) {
        slotHandlers.current[slotName] = function (e) {
          var _latestDefinition$cur, _latestDefinition$cur2;

          var accessibilityHandler = (_latestDefinition$cur = latestDefinition.current) == null ? void 0 : (_latestDefinition$cur2 = _latestDefinition$cur.keyHandlers[slotName]) == null ? void 0 : _latestDefinition$cur2.onKeyDown;
          var userHandler = slotProps.current[slotName].onKeyDown;
          if (accessibilityHandler) accessibilityHandler(e);

          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (userHandler) userHandler.apply(void 0, [e].concat(args));
        };
      }
    } else {
      delete slotHandlers.current[slotName];
    }

    var finalProps = Object.assign({}, childBehavior && {
      accessibility: childBehavior
    }, definition.attributes[slotName], userProps, {
      onKeyDown: slotHandlers.current[slotName]
    });
    return finalProps;
  }; // Provides an experimental handling for FocusZone definition in behaviors


  getA11yProps.unstable_wrapWithFocusZone = function (element) {
    if (definition.focusZone) {
      var child = element;

      if (process.env.NODE_ENV !== 'production') {
        child = React.Children.only(element);
      }

      return /*#__PURE__*/React.createElement(_FocusZone.FocusZone, Object.assign({}, definition.focusZone.props, child.props, {
        innerRef: child.ref,
        as: child.type,
        isRtl: rtl
      }));
    }

    return element;
  };

  getA11yProps.unstable_behaviorDefinition = function () {
    return definition;
  };

  return getA11yProps;
};

exports.useAccessibility = useAccessibility;
//# sourceMappingURL=useAccessibility.js.map
