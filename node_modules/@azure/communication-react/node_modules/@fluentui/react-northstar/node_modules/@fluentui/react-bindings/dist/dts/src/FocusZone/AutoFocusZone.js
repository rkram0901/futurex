"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoFocusZone = void 0;
var react_component_ref_1 = require("@fluentui/react-component-ref");
var styles_1 = require("@fluentui/styles");
var React = require("react");
var PropTypes = require("prop-types");
var _ = require("lodash");
var getElementType_1 = require("../utils/getElementType");
var getUnhandledProps_1 = require("../utils/getUnhandledProps");
var focusUtilities_1 = require("./focusUtilities");
/** AutoFocusZone is used to focus inner element on mount. */
var AutoFocusZone = /** @class */ (function (_super) {
    __extends(AutoFocusZone, _super);
    function AutoFocusZone() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.root = React.createRef();
        _this.findElementAndFocusAsync = function () {
            if (!_this.root.current)
                return;
            var firstFocusableSelector = _this.props.firstFocusableSelector;
            var focusSelector = styles_1.callable(firstFocusableSelector)();
            var firstFocusableChild = focusSelector
                ? _this.root.current.querySelector(focusSelector)
                : focusUtilities_1.getNextElement(_this.root.current, _this.root.current.firstChild, true, false, false, true);
            firstFocusableChild && focusUtilities_1.focusAsync(firstFocusableChild);
        };
        return _this;
    }
    AutoFocusZone.prototype.componentDidMount = function () {
        this.findElementAndFocusAsync();
    };
    AutoFocusZone.prototype.render = function () {
        var _this = this;
        var unhandledProps = getUnhandledProps_1.getUnhandledProps(AutoFocusZone.handledProps, this.props);
        var ElementType = getElementType_1.getElementType(this.props);
        return (React.createElement(ElementType, __assign({ ref: function (element) {
                react_component_ref_1.handleRef(_this.root, element);
                react_component_ref_1.handleRef(_this.props.innerRef, element);
            } }, unhandledProps), this.props.children));
    };
    AutoFocusZone.propTypes = {
        as: PropTypes.elementType,
        firstFocusableSelector: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
        innerRef: PropTypes.any,
    };
    AutoFocusZone.handledProps = _.keys(AutoFocusZone.propTypes);
    return AutoFocusZone;
}(React.Component));
exports.AutoFocusZone = AutoFocusZone;
