"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_bindings_1 = require("@fluentui/react-bindings");
var React = require("react");
var ReactTestUtils = require("react-dom/test-utils");
// rAF does not exist in node - let's mock it
window.requestAnimationFrame = function (callback) {
    var r = window.setTimeout(callback, 0);
    jest.runAllTimers();
    return r;
};
var animationFrame = function () { return new Promise(function (resolve) { return window.requestAnimationFrame(resolve); }); };
jest.useFakeTimers();
describe('AutoFocusZone', function () {
    var lastFocusedElement;
    var _onFocus = function (ev) { return (lastFocusedElement = ev.target); };
    var setupElement = function (element, _a) {
        var clientRect = _a.clientRect, _b = _a.isVisible, isVisible = _b === void 0 ? true : _b;
        // @ts-ignore
        element.getBoundingClientRect = function () { return ({
            top: clientRect.top,
            left: clientRect.left,
            bottom: clientRect.bottom,
            right: clientRect.right,
            width: clientRect.right - clientRect.left,
            height: clientRect.bottom - clientRect.top,
        }); };
        element.setAttribute('data-is-visible', String(isVisible));
        element.focus = function () { return ReactTestUtils.Simulate.focus(element); };
    };
    beforeEach(function () {
        lastFocusedElement = undefined;
    });
    describe('Focusing the ATZ', function () {
        function setupTest(firstFocusableSelector) {
            var autoFocusZoneRef = null;
            var topLevelDiv = ReactTestUtils.renderIntoDocument(React.createElement("div", { onFocusCapture: _onFocus },
                React.createElement(react_bindings_1.AutoFocusZone, { "data-is-focusable": true, firstFocusableSelector: firstFocusableSelector, ref: function (ftz) {
                        autoFocusZoneRef = ftz;
                    } },
                    React.createElement("button", { className: 'f' }, "f"),
                    React.createElement(react_bindings_1.FocusZone, null,
                        React.createElement("button", { className: 'a' }, "a"),
                        React.createElement("button", { className: 'b' }, "b"))),
                React.createElement("button", { className: 'z' }, "z")));
            var buttonF = topLevelDiv.querySelector('.f');
            var buttonA = topLevelDiv.querySelector('.a');
            var buttonB = topLevelDiv.querySelector('.b');
            var buttonZ = topLevelDiv.querySelector('.z');
            // Assign bounding locations to buttons.
            setupElement(buttonF, { clientRect: { top: 0, bottom: 10, left: 0, right: 10 } });
            setupElement(buttonA, { clientRect: { top: 10, bottom: 20, left: 0, right: 10 } });
            setupElement(buttonB, { clientRect: { top: 20, bottom: 30, left: 0, right: 10 } });
            setupElement(buttonZ, { clientRect: { top: 30, bottom: 40, left: 0, right: 10 } });
            return { autoFocusZone: autoFocusZoneRef, buttonF: buttonF, buttonA: buttonA, buttonB: buttonB, buttonZ: buttonZ };
        }
        it('goes to first focusable element when focusing the ATZ', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, autoFocusZone, buttonF;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        expect.assertions(1);
                        _a = setupTest(), autoFocusZone = _a.autoFocusZone, buttonF = _a.buttonF;
                        // By calling `componentDidMount`, AFZ will behave as just initialized and focus needed element
                        // Focus within should go to 1st focusable inner element.
                        // @ts-ignore
                        autoFocusZone.componentDidMount();
                        return [4 /*yield*/, animationFrame()];
                    case 1:
                        _b.sent();
                        expect(lastFocusedElement).toBe(buttonF);
                        return [2 /*return*/];
                }
            });
        }); });
        it('goes to the element with containing the firstFocusableSelector if provided when focusing the ATZ', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, autoFocusZone, buttonB;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        expect.assertions(1);
                        _a = setupTest('.b'), autoFocusZone = _a.autoFocusZone, buttonB = _a.buttonB;
                        // By calling `componentDidMount`, AFZ will behave as just initialized and focus needed element
                        // Focus within should go to the element containing the selector.
                        // @ts-ignore
                        autoFocusZone.componentDidMount();
                        return [4 /*yield*/, animationFrame()];
                    case 1:
                        _b.sent();
                        expect(lastFocusedElement).toBe(buttonB);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
