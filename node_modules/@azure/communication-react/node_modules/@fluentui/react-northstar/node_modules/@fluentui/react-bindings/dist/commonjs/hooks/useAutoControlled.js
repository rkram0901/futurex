"use strict";

exports.__esModule = true;
exports.useAutoControlled = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var isUndefined = function isUndefined(value) {
  return typeof value === 'undefined';
};
/**
 * Returns a stateful value, and a function to update it. Mimics the `useState()` React Hook
 * signature.
 */


var useAutoControlled = function useAutoControlled(options) {
  var _React$useState = React.useState(isUndefined(options.defaultValue) ? options.initialValue : options.defaultValue),
      stateValue = _React$useState[0],
      setStateValue = _React$useState[1];

  var value = isUndefined(options.value) ? stateValue : options.value; // Used to avoid dependencies in "setValue"

  var valueRef = React.useRef(value);
  React.useEffect(function () {
    valueRef.current = value;
  }, [value]);
  var setValue = React.useCallback(function (newState) {
    if (typeof newState === 'function') {
      // Handles functional updates
      // https://reactjs.org/docs/hooks-reference.html#functional-updates
      valueRef.current = newState(valueRef.current);
    } else {
      valueRef.current = newState;
    }

    setStateValue(valueRef.current);
  }, []);
  return [value, setValue];
};

exports.useAutoControlled = useAutoControlled;
//# sourceMappingURL=useAutoControlled.js.map
