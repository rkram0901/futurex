{"version":3,"sources":["components/Avatar/AvatarLabel.tsx"],"names":["getElementType","useUnhandledProps","useAccessibility","useFluentContext","useStyles","useTelemetry","customPropTypes","PropTypes","React","childrenExist","commonPropTypes","rtlTextContainer","labelClassName","avatarlabelClassName","AvatarLabel","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","styles","variables","square","size","circular","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","getAttributes","forElements","propTypes","createCommon","bool","Object","keys","defaultProps","as","shorthandConfig","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  SizeValue,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\nimport { labelClassName } from '../Label/Label';\n\nexport interface AvatarLabelProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** The AvatarLabel can have a square shape. */\n  square?: boolean;\n\n  /** The AvatarLabel can be circular. */\n  circular?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n}\n\nexport type AvatarLabelStylesProps = Pick<AvatarLabelProps, 'size' | 'square' | 'circular'>;\nexport const avatarlabelClassName = labelClassName;\n\n/**\n * A AvatarLabel allows user to classify content.\n */\nexport const AvatarLabel = (React.forwardRef<HTMLSpanElement, AvatarLabelProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarLabel.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, content, design, styles, variables, square, size, circular } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: AvatarLabel.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<AvatarLabelStylesProps>(AvatarLabel.displayName, {\n    className: avatarlabelClassName,\n    mapPropsToStyles: () => ({\n      square,\n      size,\n      circular,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarLabel.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, AvatarLabelProps> &\n  FluentComponentStaticProps<AvatarLabelProps>;\n\nAvatarLabel.displayName = 'AvatarLabel';\n\nAvatarLabel.propTypes = {\n  ...commonPropTypes.createCommon(),\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n  circular: PropTypes.bool,\n};\nAvatarLabel.handledProps = Object.keys(AvatarLabel.propTypes) as any;\n\nAvatarLabel.defaultProps = {\n  as: 'span',\n};\n\nAvatarLabel.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"AvatarLabel.js"}