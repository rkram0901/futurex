{"version":3,"sources":["components/Menu/MenuItemContent.tsx"],"names":["React","useFluentContext","useTelemetry","useStyles","useAccessibility","useUnhandledProps","getElementType","childrenExist","useContextSelectors","PropTypes","commonPropTypes","rtlTextContainer","MenuContext","menuItemContentClassName","MenuItemContent","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","parentProps","vertical","v","className","children","design","styles","variables","content","hasMenu","hasIcon","inSubmenu","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","getAttributes","forElements","defaultProps","as","propTypes","createCommon","bool","shorthandConfig","mappedProp","Object","keys"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ForwardRefWithAs,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  useUnhandledProps,\n  getElementType,\n  childrenExist,\n  useContextSelectors,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport {\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\nimport { MenuContext, MenuItemSubscribedValue } from './menuContext';\n\nexport interface MenuItemContentProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Indicates whether the parent menu item has menu. */\n  hasMenu?: boolean;\n\n  /** Indicates whether the parent menu item has icon. */\n  hasIcon?: boolean;\n\n  /** Indicates whether the parent menu item is inside vertical menu. */\n  vertical?: boolean;\n\n  /** Indicates whether the parent menu item is part of submenu. */\n  inSubmenu?: boolean;\n}\n\nexport type MenuItemContentStylesProps = Pick<MenuItemContentProps, 'hasMenu' | 'hasIcon' | 'vertical' | 'inSubmenu'>;\n\nexport const menuItemContentClassName = 'ui-menu__itemcontent';\n\n/**\n * A MenuItemContent allows a user to have a dedicated component that can be targeted from the theme.\n */\nexport const MenuItemContent = (React.forwardRef<HTMLSpanElement, MenuItemContentProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(MenuItemContent.displayName, context.telemetry);\n  setStart();\n\n  const parentProps = (useContextSelectors(MenuContext, {\n    vertical: v => v.vertical,\n  }) as unknown) as MenuItemSubscribedValue; // TODO: we should improve typings for the useContextSelectors\n\n  const { className, children, design, styles, variables, content, hasMenu, hasIcon, vertical, inSubmenu } = props;\n\n  const { classes } = useStyles<MenuItemContentStylesProps>(MenuItemContent.displayName, {\n    className: menuItemContentClassName,\n    mapPropsToStyles: () => ({\n      hasMenu,\n      hasIcon,\n      vertical: vertical || parentProps.vertical,\n      inSubmenu,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: MenuItemContent.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(MenuItemContent.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, MenuItemContentProps> &\n  FluentComponentStaticProps<MenuItemContentProps>;\n\nMenuItemContent.displayName = 'MenuItemContent';\n\nMenuItemContent.defaultProps = {\n  as: 'span',\n};\n\nMenuItemContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  hasIcon: PropTypes.bool,\n  hasMenu: PropTypes.bool,\n  vertical: PropTypes.bool,\n  inSubmenu: PropTypes.bool,\n};\n\nMenuItemContent.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nMenuItemContent.handledProps = Object.keys(MenuItemContent.propTypes) as any;\n"],"file":"MenuItemContent.js"}