{"version":3,"sources":["components/Menu/MenuItemIcon.tsx"],"names":["React","useFluentContext","useTelemetry","useStyles","useAccessibility","getElementType","useUnhandledProps","childrenExist","PropTypes","commonPropTypes","menuItemIconClassName","MenuItemIcon","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","children","design","styles","variables","content","hasContent","iconOnly","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","defaultProps","as","propTypes","createCommon","bool","Object","keys","shorthandConfig","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ForwardRefWithAs,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  childrenExist,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport { ChildrenComponentProps, commonPropTypes, ContentComponentProps, UIComponentProps } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\n\nexport interface MenuItemIconProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Indicates if the parent menu item may have just icons. */\n  iconOnly?: boolean;\n\n  /** Indicates if the parent menu item has content. */\n  hasContent?: boolean;\n}\n\nexport type MenuItemIconStylesProps = Pick<MenuItemIconProps, 'hasContent' | 'iconOnly'>;\n\nexport const menuItemIconClassName = 'ui-menu__itemicon';\n\n/**\n * A MenuItemIcon allows a user to have a dedicated component that can be targeted from the theme.\n */\nexport const MenuItemIcon = (React.forwardRef<HTMLSpanElement, MenuItemIconProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(MenuItemIcon.displayName, context.telemetry);\n  setStart();\n\n  const { className, children, design, styles, variables, content, hasContent, iconOnly } = props;\n\n  const { classes } = useStyles<MenuItemIconStylesProps>(MenuItemIcon.displayName, {\n    className: menuItemIconClassName,\n    mapPropsToStyles: () => ({\n      hasContent,\n      iconOnly,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: MenuItemIcon.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(MenuItemIcon.handledProps, props);\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })}>\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, MenuItemIconProps> &\n  FluentComponentStaticProps<MenuItemIconProps>;\n\nMenuItemIcon.displayName = 'MenuItemIcon';\n\nMenuItemIcon.defaultProps = {\n  as: 'span',\n};\n\nMenuItemIcon.propTypes = {\n  ...commonPropTypes.createCommon(),\n  hasContent: PropTypes.bool,\n  iconOnly: PropTypes.bool,\n};\n\nMenuItemIcon.handledProps = Object.keys(MenuItemIcon.propTypes) as any;\n\nMenuItemIcon.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"MenuItemIcon.js"}