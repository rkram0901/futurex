{"version":3,"sources":["components/SplitButton/SplitButtonToggle.tsx"],"names":["buttonBehavior","customPropTypes","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","getElementType","useAccessibility","useFluentContext","useStyles","useTelemetry","useUnhandledProps","splitButtonToggleClassName","SplitButtonToggle","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","as","children","content","disabled","primary","className","size","flat","styles","variables","design","hasChildren","getA11Props","debugName","mapPropsToBehavior","String","actionHandlers","performClick","event","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","unhandledProps","handledProps","ElementType","e","result","getAttributes","forElements","onClick","root","defaultProps","propTypes","createCommon","bool","func","every","disallow","secondary","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, buttonBehavior, ButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n  SizeValue,\n} from '../../utils';\n\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport {\n  ForwardRefWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\n\nexport interface SplitButtonToggleProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ButtonBehaviorProps>;\n\n  /** A split button toggle can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /**\n   * Called after a user clicks the button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<SplitButtonToggleProps>;\n\n  /** A split button toggle can emphasize that it represents the primary action. */\n  primary?: boolean;\n\n  /** A split button toggle can emphasize that it represents an alternative action. */\n  secondary?: boolean;\n\n  /** A split button toggle can be sized */\n  size?: SizeValue;\n\n  /** A split button toggle can be elevated or flat. */\n  flat?: boolean;\n}\n\nexport type SplitButtonToggleStylesProps = Pick<SplitButtonToggleProps, 'primary' | 'disabled' | 'size' | 'flat'>;\nexport const splitButtonToggleClassName = 'ui-splitbutton__toggle';\n\n/**\n * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\n\nexport const SplitButtonToggle = (React.forwardRef<HTMLButtonElement, SplitButtonToggleProps & { as: React.ReactNode }>(\n  (props, ref) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(SplitButtonToggle.displayName, context.telemetry);\n    setStart();\n\n    const {\n      accessibility,\n      as,\n      children,\n      content,\n      disabled,\n      primary,\n      className,\n      size,\n      flat,\n      styles,\n      variables,\n      design,\n    } = props;\n\n    const hasChildren = childrenExist(children);\n\n    const getA11Props = useAccessibility(accessibility, {\n      debugName: SplitButtonToggle.displayName,\n      mapPropsToBehavior: () => ({\n        as: String(as),\n        disabled,\n      }),\n      actionHandlers: {\n        performClick: event => {\n          event.preventDefault();\n          handleClick(event);\n        },\n      },\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<SplitButtonToggleStylesProps>(SplitButtonToggle.displayName, {\n      className: splitButtonToggleClassName,\n      mapPropsToStyles: () => ({\n        primary,\n        disabled,\n        size,\n        flat,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n    });\n\n    const unhandledProps = useUnhandledProps(SplitButtonToggle.handledProps, props);\n    const ElementType = getElementType(props);\n\n    const handleClick = (e: React.SyntheticEvent) => {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _.invoke(props, 'onClick', e, props);\n    };\n\n    const result = (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...getA11Props('root', {\n          onClick: handleClick,\n          disabled,\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {hasChildren ? children : content}\n      </ElementType>\n    );\n\n    setEnd();\n\n    return result;\n  },\n) as unknown) as ForwardRefWithAs<'button', HTMLButtonElement, SplitButtonToggleProps> &\n  FluentComponentStaticProps<SplitButtonToggleProps>;\n\nSplitButtonToggle.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n};\n\nSplitButtonToggle.displayName = 'SplitButtonToggle';\n\nSplitButtonToggle.propTypes = {\n  ...commonPropTypes.createCommon({}),\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  size: customPropTypes.size,\n  flat: PropTypes.bool,\n};\n\nSplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes) as any;\n\nSplitButtonToggle.create = createShorthandFactory({ Component: SplitButtonToggle, mappedProp: 'content' });\n"],"file":"SplitButtonToggle.js"}