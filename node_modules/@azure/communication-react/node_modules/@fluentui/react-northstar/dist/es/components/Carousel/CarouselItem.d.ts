import * as React from 'react';
import * as PropTypes from 'prop-types';
import { CarouselItemBehaviorProps, Accessibility } from '@fluentui/accessibility';
import { UIComponentProps, ContentComponentProps, ChildrenComponentProps } from '../../utils';
import { FluentComponentStaticProps } from '../../types';
export interface CarouselItemSlotClassNames {
    itemPositionText: string;
}
export interface CarouselItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     */
    accessibility?: Accessibility<CarouselItemBehaviorProps>;
    /** Whether or not the item is in view or not. */
    active?: boolean;
    /**
     * Text to be added in the DOM that will specify item position. To be picked
     * up by screen readers.
     */
    itemPositionText?: string;
    /** Whether or not navigation exists in carousel. */
    navigation?: boolean;
}
export declare type CarouselItemStylesProps = never;
export declare const carouselItemClassName = "ui-carousel__item";
export declare const carouselItemSlotClassNames: CarouselItemSlotClassNames;
/**
 * A Carousel displays data organised as a gallery.
 *
 * @accessibility
 * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.
 */
export declare const CarouselItem: (<TExtendedElementType extends React.ElementType<any> = "div">(props: React.RefAttributes<HTMLDivElement> & Omit<import("@fluentui/react-bindings").PropsOfElement<TExtendedElementType>, "as" | keyof CarouselItemProps> & {
    as?: TExtendedElementType;
} & CarouselItemProps) => JSX.Element) & {
    propTypes?: React.WeakValidationMap<CarouselItemProps> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
    contextTypes?: PropTypes.ValidationMap<any>;
    defaultProps?: Partial<CarouselItemProps & {
        as: "div";
    }>;
    displayName?: string;
    readonly __PRIVATE_PROPS?: React.RefAttributes<HTMLDivElement> & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>> & {
        ref?: React.Ref<HTMLDivElement>;
    }, "as" | keyof CarouselItemProps> & {
        as?: "div";
    } & CarouselItemProps;
} & FluentComponentStaticProps<CarouselItemProps>;
