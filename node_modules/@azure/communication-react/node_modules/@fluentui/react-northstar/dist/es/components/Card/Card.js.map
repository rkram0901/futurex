{"version":3,"sources":["components/Card/Card.tsx"],"names":["cardBehavior","getElementType","useAccessibility","useStyles","useFluentContext","useTelemetry","useUnhandledProps","Ref","CustomPropTypes","PropTypes","React","commonPropTypes","createShorthandFactory","CardBody","CardColumn","CardFooter","CardHeader","CardPreview","CardTopControls","CardExpandableBox","cardClassName","Card","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","cardRef","useRef","className","design","styles","variables","children","compact","horizontal","centered","size","fluid","onClick","disabled","expandable","elevated","inverted","ghost","selected","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","actionHandlers","performClick","e","preventDefault","handleClick","focusCard","current","focus","mapPropsToBehavior","rtl","mapPropsToStyles","actionable","mapPropsToInlineStyles","classes","element","unstable_wrapWithFocusZone","root","propTypes","createCommon","func","bool","defaultProps","Object","keys","Header","Body","Footer","Preview","TopControls","Column","ExpandableBox","create","Component"],"mappings":"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","sourcesContent":["import { Accessibility, cardBehavior, CardBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as CustomPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport { commonPropTypes, createShorthandFactory, SizeValue, UIComponentProps } from '../../utils';\nimport { CardBody } from './CardBody';\nimport { CardColumn } from './CardColumn';\nimport { CardFooter } from './CardFooter';\nimport { CardHeader } from './CardHeader';\nimport { CardPreview } from './CardPreview';\nimport { CardTopControls } from './CardTopControls';\nimport { CardExpandableBox } from './CardExpandableBox';\n\nexport interface CardProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CardBehaviorProps>;\n\n  /** A primary content. */\n  children?: React.ReactNode;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CardProps>;\n\n  /** A card can be compact, without any padding inside. */\n  compact?: boolean;\n\n  /** A card will used horizontal layout. */\n  horizontal?: boolean;\n\n  /** Centers content in a card. */\n  centered?: boolean;\n\n  /** A card can be sized. */\n  size?: SizeValue;\n\n  /** A card can take up the width and height of its container. */\n  fluid?: boolean;\n\n  /** A card can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A card can be hiding part of the content and expand on hover/focus. */\n  expandable?: boolean;\n\n  /** A card can have elevation styles. */\n  elevated?: boolean;\n\n  /** A card can have inverted background styles. */\n  inverted?: boolean;\n\n  /** A card can have ghost styles. */\n  ghost?: boolean;\n\n  /** A card can show that it is currently selected or not. */\n  selected?: boolean;\n}\n\nexport type CardStylesProps = Pick<\n  CardProps,\n  | 'compact'\n  | 'horizontal'\n  | 'centered'\n  | 'size'\n  | 'fluid'\n  | 'disabled'\n  | 'expandable'\n  | 'elevated'\n  | 'inverted'\n  | 'ghost'\n  | 'selected'\n> & {\n  actionable: boolean;\n};\n\nexport const cardClassName = 'ui-card';\n\n/**\n * A Card is used to display data in sematically grouped way.\n * * @accessibility\n * By default adds `group` role ([more information available in aria documentation](https://www.w3.org/TR/wai-aria-1.1/#group)), thus it's necessary to provide `aria-roledescription` for correct widget description. [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription-property)\n * When card is actionable (i.e. has `onClick` property), use [cardFocusableBehavior](/components/card/accessibility#card-focusable). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * When card contains actionable elements, use [cardChildrenFocusableBehavior](/components/card/accessibility#card-children-focusable).\n *\n */\nexport const Card = (React.forwardRef<HTMLDivElement, CardProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Card.displayName, context.telemetry);\n  setStart();\n  const cardRef = React.useRef<HTMLElement>();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    children,\n    compact,\n    horizontal,\n    centered,\n    size,\n    fluid,\n    onClick,\n    disabled,\n    expandable,\n    elevated,\n    inverted,\n    ghost,\n    selected,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Card.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Card.displayName,\n    actionHandlers: {\n      performClick: e => {\n        // prevent Spacebar from scrolling\n        e.preventDefault();\n        handleClick(e);\n      },\n      focusCard: e => {\n        cardRef.current.focus();\n      },\n    },\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardStylesProps>(Card.displayName, {\n    className: cardClassName,\n    mapPropsToStyles: () => ({\n      centered,\n      horizontal,\n      compact,\n      size,\n      fluid,\n      actionable: !!onClick,\n      disabled,\n      expandable,\n      elevated,\n      inverted,\n      ghost,\n      selected,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <Ref innerRef={cardRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ref,\n            ...unhandledProps,\n          })}\n        >\n          {children}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, CardProps> &\n  FluentComponentStaticProps<CardProps> & {\n    Header: typeof CardHeader;\n    Body: typeof CardBody;\n    Footer: typeof CardFooter;\n    Preview: typeof CardPreview;\n    TopControls: typeof CardPreview;\n    Column: typeof CardColumn;\n    ExpandableBox: typeof CardExpandableBox;\n  };\n\nCard.displayName = 'Card';\n\nCard.propTypes = {\n  ...commonPropTypes.createCommon(),\n  onClick: PropTypes.func,\n  compact: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  centered: PropTypes.bool,\n  size: CustomPropTypes.size,\n  fluid: PropTypes.bool,\n  expandable: PropTypes.bool,\n  disabled: PropTypes.bool,\n  elevated: PropTypes.bool,\n  ghost: PropTypes.bool,\n  inverted: PropTypes.bool,\n  selected: PropTypes.bool,\n};\n\nCard.defaultProps = {\n  accessibility: cardBehavior,\n  size: 'medium',\n};\n\nCard.handledProps = Object.keys(Card.propTypes) as any;\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\nCard.Preview = CardPreview;\nCard.TopControls = CardTopControls;\nCard.Column = CardColumn;\nCard.ExpandableBox = CardExpandableBox;\n\nCard.create = createShorthandFactory({ Component: Card });\n"],"file":"Card.js"}