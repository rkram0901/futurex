{"version":3,"sources":["components/Status/Status.tsx"],"names":["statusBehavior","getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","useFluentContext","customPropTypes","PropTypes","React","createShorthandFactory","commonPropTypes","Box","statusClassName","Status","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","color","icon","size","state","design","styles","variables","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","resolvedStyles","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","iconElement","create","defaultProps","as","element","root","propTypes","createCommon","children","content","string","shorthandAllowingChildren","oneOf","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, statusBehavior, StatusBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useFluentContext,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes, SizeValue } from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\n\nexport interface StatusProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<StatusBehaviorProps>;\n\n  /** A custom color. */\n  color?: string;\n\n  /** Shorthand for the icon, to provide customizing status */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Size multiplier */\n  size?: SizeValue;\n\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type StatusStylesProps = Pick<StatusProps, 'color' | 'size' | 'state'>;\nexport const statusClassName = 'ui-status';\n\n/**\n * A Status represents someone's or something's state.\n *\n * @accessibility\n * Implements [ARIA img](https://www.w3.org/TR/wai-aria-1.1/#img) role.\n */\nexport const Status = (React.forwardRef<HTMLSpanElement, StatusProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Status.displayName, context.telemetry);\n  setStart();\n\n  const { className, color, icon, size, state, design, styles, variables } = props;\n  const { classes, styles: resolvedStyles } = useStyles<StatusStylesProps>(Status.displayName, {\n    className: statusClassName,\n    mapPropsToStyles: () => ({\n      color,\n      size,\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Status.displayName,\n    rtl: context.rtl,\n  });\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Status.handledProps, props);\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11Props('icon', {\n        styles: resolvedStyles.icon,\n        as: 'span',\n      }),\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })}>\n      {iconElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, StatusProps> & FluentComponentStaticProps;\n\nStatus.displayName = 'Status';\nStatus.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf<'success' | 'info' | 'warning' | 'error' | 'unknown'>([\n    'success',\n    'info',\n    'warning',\n    'error',\n    'unknown',\n  ]),\n};\nStatus.handledProps = Object.keys(Status.propTypes) as any;\nStatus.defaultProps = {\n  accessibility: statusBehavior,\n  as: 'span' as const,\n  size: 'medium',\n  state: 'unknown',\n};\n\nStatus.create = createShorthandFactory({ Component: Status, mappedProp: 'state' });\n"],"file":"Status.js"}