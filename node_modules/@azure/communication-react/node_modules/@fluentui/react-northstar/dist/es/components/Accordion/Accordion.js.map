{"version":3,"sources":["components/Accordion/Accordion.tsx"],"names":["accordionBehavior","customPropTypes","PropTypes","React","childrenExist","commonPropTypes","rtlTextContainer","createShorthand","createShorthandFactory","AccordionTitle","AccordionContent","ContainerFocusHandler","useAutoControlled","useAccessibility","useTelemetry","useFluentContext","useUnhandledProps","getElementType","useStyles","accordionClassName","accordionSlotClassNames","content","title","Accordion","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","expanded","exclusive","accessibility","children","className","design","styles","variables","panels","renderPanelContent","renderPanelTitle","alwaysActiveIndex","defaultValue","defaultActiveIndex","value","activeIndex","initialValue","setActiveIndex","actionHandlers","moveNext","e","preventDefault","focusHandler","movePrevious","moveFirst","moveLast","getA11yProps","debugName","rtl","mapPropsToInlineStyles","classes","useState","focusedIndex","setfocusedIndex","handleNavigationFocus","index","getNavigationItemsSize","length","unhandledProps","handledProps","ElementType","itemRefs","useMemo","Array","from","createRef","useEffect","targetComponent","current","focus","defaultAccordionTitleId","defaultAccordionContentId","computeNewIndex","isIndexActionable","handleTitleOverrides","predefinedProps","onClick","titleProps","onFocus","isIndexActive","renderPanels","syncFocusedIndex","panel","active","canBeCollapsed","titleId","contentId","contentRef","push","defaultProps","id","accordionContentId","overrideProps","render","accordionTitleId","element","root","getAttributes","forElements","propTypes","createCommon","every","disallow","oneOfType","arrayOf","number","bool","onTitleClick","func","onActiveIndexChange","shape","itemShorthand","as","Object","keys","Title","Content","create","Component"],"mappings":"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","sourcesContent":["import { Accessibility, accordionBehavior, AccordionBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthand,\n  createShorthandFactory,\n} from '../../utils';\nimport { AccordionTitle, AccordionTitleProps } from './AccordionTitle';\nimport { AccordionContent, AccordionContentProps } from './AccordionContent';\n\nimport {\n  ComponentEventHandler,\n  ShorthandValue,\n  ShorthandRenderFunction,\n  FluentComponentStaticProps,\n} from '../../types';\nimport { ContainerFocusHandler } from '../../utils/accessibility/FocusHandling/FocusContainer';\nimport {\n  useAutoControlled,\n  useAccessibility,\n  useTelemetry,\n  useFluentContext,\n  useUnhandledProps,\n  getElementType,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionSlotClassNames {\n  content: string;\n  title: string;\n}\n\nexport interface AccordionProps extends UIComponentProps, ChildrenComponentProps {\n  /** Index of the currently active panel. */\n  activeIndex?: number[] | number;\n\n  /** Initial activeIndex value. */\n  defaultActiveIndex?: number[] | number;\n\n  /** Only allow one panel to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** At least one panel should be expanded at any time. */\n  expanded?: boolean;\n\n  /**\n   * Called when the active index of the Accordion changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeIndex` reflecting the new state.\n   */\n  onActiveIndexChange?: ComponentEventHandler<AccordionProps>;\n\n  /**\n   * Called when a panel title is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onTitleClick?: ComponentEventHandler<AccordionProps>;\n\n  /** Shorthand array of props for Accordion. */\n  panels?: {\n    content: ShorthandValue<AccordionContentProps>;\n    title: ShorthandValue<AccordionTitleProps>;\n  }[];\n\n  /**\n   * A custom renderer for each Accordion's panel title.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelTitle?: ShorthandRenderFunction<AccordionTitleProps>;\n\n  /**\n   * A custom renderer for each Accordion's panel content.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelContent?: ShorthandRenderFunction<AccordionContentProps>;\n\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionBehaviorProps>;\n}\n\nexport type AccordionStylesProps = never;\nexport const accordionClassName = 'ui-accordion';\nexport const accordionSlotClassNames: AccordionSlotClassNames = {\n  content: `${accordionClassName}__content`,\n  title: `${accordionClassName}__title`,\n};\n\n/**\n * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.\n *\n * @accessibility\n * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).\n */\nexport const Accordion = (React.forwardRef<HTMLDListElement, AccordionProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Accordion.displayName, context.telemetry);\n  setStart();\n  const {\n    expanded,\n    exclusive,\n    accessibility,\n    children,\n    className,\n    design,\n    styles,\n    variables,\n    panels,\n    renderPanelContent,\n    renderPanelTitle,\n  } = props;\n  const alwaysActiveIndex = expanded ? 0 : -1;\n\n  const [activeIndex, setActiveIndex] = useAutoControlled({\n    defaultValue: props.defaultActiveIndex,\n    value: props.activeIndex,\n    initialValue: exclusive ? alwaysActiveIndex : [alwaysActiveIndex],\n  });\n\n  const actionHandlers = {\n    moveNext: e => {\n      e.preventDefault();\n      focusHandler.moveNext();\n    },\n    movePrevious: e => {\n      e.preventDefault();\n      focusHandler.movePrevious();\n    },\n    moveFirst: e => {\n      e.preventDefault();\n      focusHandler.moveFirst();\n    },\n    moveLast: e => {\n      e.preventDefault();\n      focusHandler.moveLast();\n    },\n  };\n\n  const getA11yProps = useAccessibility<AccordionBehaviorProps>(accessibility, {\n    debugName: Accordion.displayName,\n    actionHandlers,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<AccordionStylesProps>(Accordion.displayName, {\n    className: accordionClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const [focusedIndex, setfocusedIndex] = React.useState<number>();\n\n  const handleNavigationFocus = (index: number) => {\n    setfocusedIndex(index);\n  };\n\n  const getNavigationItemsSize = () => props.panels.length;\n  const unhandledProps = useUnhandledProps(Accordion.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const focusHandler: ContainerFocusHandler = new ContainerFocusHandler(\n    getNavigationItemsSize,\n    handleNavigationFocus,\n    true,\n  );\n\n  const itemRefs = React.useMemo<React.RefObject<HTMLElement>[]>(\n    () => Array.from({ length: panels?.length }, () => React.createRef()),\n    // As we are using \"panels.length\" it's fine to have dependency on them\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [panels?.length],\n  );\n\n  React.useEffect(() => {\n    const targetComponent = itemRefs[focusedIndex] && itemRefs[focusedIndex].current;\n    targetComponent && targetComponent.focus();\n  }, [itemRefs, focusedIndex]);\n\n  const defaultAccordionTitleId = React.useMemo(() => _.uniqueId('accordion-title-'), []);\n  const defaultAccordionContentId = React.useMemo(() => _.uniqueId('accordion-content-'), []);\n\n  const computeNewIndex = (index: number): number | number[] => {\n    if (!isIndexActionable(index)) {\n      return activeIndex;\n    }\n\n    if (exclusive) return index === activeIndex ? -1 : index;\n    // check to see if index is in array, and remove it, if not then add it\n    return _.includes(activeIndex as number[], index)\n      ? _.without(activeIndex as number[], index)\n      : [...(activeIndex as number[]), index];\n  };\n\n  const handleTitleOverrides = (predefinedProps: AccordionTitleProps) => ({\n    onClick: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      const { index } = titleProps;\n      const activeIndex = computeNewIndex(index);\n      setActiveIndex(activeIndex);\n      setfocusedIndex(index);\n\n      _.invoke(props, 'onActiveIndexChange', e, { ...props, activeIndex });\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n      _.invoke(props, 'onTitleClick', e, titleProps);\n    },\n    onFocus: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, titleProps);\n      setfocusedIndex(predefinedProps.index);\n    },\n  });\n\n  const isIndexActive = (index: number): boolean => {\n    return exclusive ? activeIndex === index : _.includes(activeIndex as number[], index);\n  };\n\n  /**\n   * Checks if panel at index can be actioned upon. Used in the case of expanded accordion,\n   * when at least a panel needs to stay active. Will return false if expanded prop is true,\n   * index is active and either it's an exclusive accordion or if there are no other active\n   * panels open besides this one.\n   *\n   * @param index - The index of the panel.\n   * @returns If the panel can be set active/inactive.\n   */\n  const isIndexActionable = (index: number): boolean => {\n    if (!isIndexActive(index)) {\n      return true;\n    }\n\n    return !expanded || (!exclusive && (activeIndex as number[]).length > 1);\n  };\n\n  const renderPanels = () => {\n    const children: any[] = [];\n    focusHandler.syncFocusedIndex(focusedIndex);\n    _.each(panels, (panel, index) => {\n      const { content, title } = panel;\n      const active = isIndexActive(+index);\n      const canBeCollapsed = isIndexActionable(+index);\n      const titleId = title['id'] || `${defaultAccordionTitleId}${index}`;\n      const contentId = content['id'] || `${defaultAccordionContentId}${index}`;\n      const contentRef = itemRefs[index];\n\n      children.push(\n        createShorthand(AccordionTitle, title, {\n          defaultProps: () => ({\n            className: accordionSlotClassNames.title,\n            active,\n            index: +index,\n            contentRef,\n            canBeCollapsed,\n            id: titleId,\n            accordionContentId: contentId,\n          }),\n          overrideProps: handleTitleOverrides,\n          render: renderPanelTitle,\n        }),\n      );\n      if (active) {\n        children.push(\n          createShorthand(AccordionContent, content, {\n            defaultProps: () => ({\n              className: accordionSlotClassNames.content,\n              active,\n              id: contentId,\n              accordionTitleId: titleId,\n            }),\n            render: renderPanelContent,\n          }),\n        );\n      }\n    });\n    return children;\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n        ref,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n    >\n      {childrenExist(children) ? children : renderPanels()}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'dl', HTMLDListElement, AccordionProps> &\n  FluentComponentStaticProps<AccordionProps> & {\n    Title: typeof AccordionTitle;\n    Content: typeof AccordionContent;\n  };\n\nAccordion.displayName = 'Accordion';\n\nAccordion.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  activeIndex: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  ]),\n  defaultActiveIndex: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  ]),\n  exclusive: PropTypes.bool,\n  expanded: PropTypes.bool,\n  onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),\n  onActiveIndexChange: PropTypes.func,\n  panels: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        content: customPropTypes.itemShorthand,\n        title: customPropTypes.itemShorthand,\n      }),\n    ),\n  ]),\n\n  renderPanelTitle: PropTypes.func,\n  renderPanelContent: PropTypes.func,\n};\n\nAccordion.defaultProps = {\n  accessibility: accordionBehavior,\n  as: 'dl',\n};\n\nAccordion.handledProps = Object.keys(Accordion.propTypes) as any;\nAccordion.Title = AccordionTitle;\nAccordion.Content = AccordionContent;\nAccordion.create = createShorthandFactory({\n  Component: Accordion,\n});\n"],"file":"Accordion.js"}