{"version":3,"sources":["components/Divider/Divider.tsx"],"names":["useTelemetry","useAccessibility","getElementType","useFluentContext","useUnhandledProps","useStyles","React","PropTypes","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","createShorthand","DividerContent","dividerClassName","Divider","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","children","color","fitted","size","important","vertical","className","design","styles","variables","accessibility","ElementType","unhandledProps","handledProps","getA11yProps","debugName","rtl","mapPropsToStyles","hasContent","content","mapPropsToInlineStyles","classes","element","root","getAttributes","forElements","propTypes","createCommon","bool","number","defaultProps","Content","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  useTelemetry,\n  useAccessibility,\n  getElementType,\n  useFluentContext,\n  useUnhandledProps,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthand,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\nimport { DividerContent } from './DividerContent';\n\nexport interface DividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A divider can be fitted, without any space above or below it. */\n  fitted?: boolean;\n\n  /** A divider can be resized using this multiplier. (default: 0) */\n  size?: number;\n\n  /** A divider can be emphasized to draw a user's attention. */\n  important?: boolean;\n\n  /** A divider can be positioned vertically. */\n  vertical?: boolean;\n}\n\nexport type DividerStylesProps = Required<\n  Pick<DividerProps, 'color' | 'fitted' | 'size' | 'important' | 'vertical'> & {\n    hasContent: boolean;\n  }\n>;\n\nexport const dividerClassName = 'ui-divider';\n\n/**\n * A Divider visually segments content.\n */\nexport const Divider = (React.forwardRef<HTMLDivElement, DividerProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Divider.displayName, context.telemetry);\n  setStart();\n  const {\n    children,\n    color,\n    fitted,\n    size,\n    important,\n    vertical,\n    className,\n    design,\n    styles,\n    variables,\n    accessibility,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Divider.handledProps, props);\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: Divider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<DividerStylesProps>(Divider.displayName, {\n    className: dividerClassName,\n    mapPropsToStyles: () => ({\n      hasContent: childrenExist(children) || !!props.content,\n      color,\n      fitted,\n      size,\n      important,\n      vertical,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const content = createShorthand(DividerContent, props.content, {});\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, DividerProps> &\n  FluentComponentStaticProps<DividerProps> & {\n    Content: typeof DividerContent;\n  };\n\nDivider.displayName = 'Divider';\n\nDivider.propTypes = {\n  ...commonPropTypes.createCommon({ color: true }),\n  fitted: PropTypes.bool,\n  size: PropTypes.number,\n  important: PropTypes.bool,\n  vertical: PropTypes.bool,\n};\n\nDivider.defaultProps = {\n  size: 0,\n};\n\nDivider.Content = DividerContent;\n\nDivider.handledProps = Object.keys(Divider.propTypes) as any;\n\nDivider.create = createShorthandFactory({ Component: Divider, mappedProp: 'content' });\n"],"file":"Divider.js"}