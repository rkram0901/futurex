{"version":3,"sources":["components/Form/FormFieldCustom.tsx"],"names":["formFieldBehavior","PropTypes","React","commonPropTypes","getElementType","useUnhandledProps","useTelemetry","useFluentContext","useStyles","useAccessibility","formFieldCustomClassName","FormFieldCustom","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","children","required","type","className","design","styles","variables","inline","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","element","root","propTypes","createCommon","content","id","string","bool","name","Object","keys","defaultProps"],"mappings":"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","sourcesContent":["import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useFluentContext,\n  useStyles,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nexport interface FormFieldCustomProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n}\n\nexport const formFieldCustomClassName = 'ui-form__fieldcustom';\n\nexport type FormFieldCustomStylesProps = Required<Pick<FormFieldCustomProps, 'type' | 'inline' | 'required'>>;\n\n/**\n * A FormFieldCustom represents a Form element containing a label and an input.\n */\nexport const FormFieldCustom = (React.forwardRef<HTMLDivElement, FormFieldCustomProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(FormFieldCustom.displayName, context.telemetry);\n  setStart();\n\n  const { children, required, type, className, design, styles, variables, inline } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(FormFieldCustom.handledProps, props);\n\n  const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n    debugName: FormFieldCustom.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<FormFieldCustomStylesProps>(FormFieldCustom.displayName, {\n    className: formFieldCustomClassName,\n    mapPropsToStyles: () => ({\n      type,\n      inline,\n      required,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n}) as unknown) as React.FC<FormFieldCustomProps> & FluentComponentStaticProps<FormFieldCustomProps>;\n\nFormFieldCustom.displayName = 'FormFieldCustom';\n\nFormFieldCustom.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n    children: false,\n  }),\n  id: PropTypes.string,\n  inline: PropTypes.bool,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n};\n\nFormFieldCustom.handledProps = Object.keys(FormFieldCustom.propTypes) as any;\n\nFormFieldCustom.defaultProps = {\n  accessibility: formFieldBehavior,\n};\n"],"file":"FormFieldCustom.js"}