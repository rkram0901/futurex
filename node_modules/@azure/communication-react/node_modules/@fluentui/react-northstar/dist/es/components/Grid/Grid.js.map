{"version":3,"sources":["components/Grid/Grid.tsx"],"names":["getElementType","useAccessibility","useStyles","useFluentContext","useTelemetry","useUnhandledProps","customPropTypes","PropTypes","React","childrenExist","commonPropTypes","rtlTextContainer","gridClassName","Grid","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","columns","content","design","rows","styles","variables","getA11yProps","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","getAttributes","forElements","propTypes","createCommon","oneOfType","string","number","every","disallow","arrayOf","nodeContent","Object","keys"],"mappings":"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","sourcesContent":["import { Accessibility, GridBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface GridProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available gridBehavior, gridHorizontalBehavior\n   * */\n  accessibility?: Accessibility<GridBehaviorProps>;\n\n  /** The columns of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */\n  columns?: string | number;\n\n  /** The rows of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */\n  rows?: string | number;\n}\n\nexport const gridClassName = 'ui-grid';\n\nexport type GridStylesProps = Pick<GridProps, 'columns' | 'rows'>;\n\n/**\n * A Grid is a layout component that harmonizes negative space, by controlling both the row and column alignment.\n */\nexport const Grid = (React.forwardRef<HTMLDivElement, GridProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Grid.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, columns, content, design, rows, styles, variables } = props;\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: Grid.displayName,\n\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<GridStylesProps>(Grid.displayName, {\n    className: gridClassName,\n    mapPropsToStyles: () => ({ columns, rows }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Grid.handledProps, props);\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, GridProps> & FluentComponentStaticProps<GridProps>;\n\nGrid.displayName = 'Grid';\n\nGrid.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nGrid.handledProps = Object.keys(Grid.propTypes) as any;\n"],"file":"Grid.js"}