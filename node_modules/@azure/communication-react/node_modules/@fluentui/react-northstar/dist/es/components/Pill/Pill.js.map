{"version":3,"sources":["components/Pill/Pill.tsx"],"names":["PropTypes","React","customPropTypes","pillBehavior","commonPropTypes","createShorthand","useAccessibility","getElementType","useStyles","useTelemetry","useFluentContext","useUnhandledProps","useAutoControlled","PillContent","PillAction","usePillContext","PillImage","PillIcon","CheckmarkCircleIcon","AcceptIcon","pillClassName","Pill","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","parentProps","className","design","styles","variables","appearance","size","rectangular","children","content","disabled","action","actionable","image","icon","selectable","selectedIndicator","defaultValue","defaultSelected","value","selected","initialValue","setSelected","ElementType","unhandledProps","handledProps","handleDismiss","e","handleClick","prevSelected","getA11yProps","accessibility","debugName","actionHandlers","performDismiss","performClick","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","getSelectedIndicator","element","unstable_wrapWithFocusZone","root","onClick","defaultProps","overrideProps","prevProps","as","propTypes","createCommon","shorthandAllowingChildren","oneOf","bool","onDismiss","func","Object","keys"],"mappings":"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","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport { Accessibility, pillBehavior, PillBehaviorProps } from '@fluentui/accessibility';\nimport { UIComponentProps, ContentComponentProps, commonPropTypes, SizeValue, createShorthand } from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps, ComponentEventHandler } from '../../types';\nimport { BoxProps } from '../Box/Box';\n\nimport {\n  useAccessibility,\n  getElementType,\n  useStyles,\n  useTelemetry,\n  useFluentContext,\n  useUnhandledProps,\n  useAutoControlled,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport { PillContent, PillContentProps } from './PillContent';\nimport { PillActionProps, PillAction } from './PillAction';\nimport { usePillContext } from './pillContext';\nimport { PillImageProps, PillImage } from './PillImage';\nimport { PillIcon, PillIconProps } from './PillIcon';\nimport { CheckmarkCircleIcon, AcceptIcon } from '@fluentui/react-icons-northstar';\n\nexport interface PillProps extends UIComponentProps, ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<PillBehaviorProps>;\n\n  /**\n   * A Pill can be sized.\n   */\n  size?: Extract<SizeValue, 'smaller' | 'small' | 'medium'>;\n\n  /**\n   * A Pill can be rectangular\n   */\n  rectangular?: boolean;\n\n  /**\n   * A Pill can be filled, inverted or outline\n   */\n  appearance?: 'filled' | 'inverted' | 'outline';\n\n  /**\n   * A Pill can be disbled\n   */\n  disabled?: boolean;\n\n  /**\n   * A Pill can be actionable\n   */\n  actionable?: boolean;\n\n  /**\n   * A PillAction shorthand for the action slot.\n   */\n  action?: ShorthandValue<PillActionProps>;\n\n  /**\n   * A PillAction shorthand for the action slot.\n   */\n  icon?: ShorthandValue<PillIconProps>;\n\n  /**\n   * A PillImage shorthand for the image slot.\n   */\n  image?: ShorthandValue<PillImageProps>;\n\n  /**\n   * Called after user will dismiss the Pill.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onDismiss?: ComponentEventHandler<PillProps>;\n\n  /**\n   * A Pill can be selectable\n   */\n  selectable?: boolean;\n\n  /**\n   * A Pill state for selection\n   */\n  selected?: boolean;\n\n  /**\n   * A Pill can be selected by default\n   */\n  defaultSelected?: boolean;\n\n  /**\n   * A Pill can have custom selected indicator\n   */\n  selectedIndicator?: ShorthandValue<PillIconProps>;\n\n  /**\n   * Called after user change selected state\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onSelectionChange?: ComponentEventHandler<PillProps>;\n}\n\nexport type PillStylesProps = Required<\n  Pick<PillProps, 'appearance' | 'size' | 'rectangular' | 'disabled' | 'selectable' | 'selected'>\n>;\n\nexport const pillClassName = 'ui-pill';\n\n/**\n * THIS COMPONENT IS UNSTABLE\n * Pills should be used when representing an input, as a way to filter content, or to represent an attribute.\n */\nexport const Pill = (React.forwardRef<HTMLSpanElement, PillProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Pill.displayName, context.telemetry);\n  setStart();\n\n  const parentProps = usePillContext();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    appearance,\n    size,\n    rectangular,\n    children,\n    content,\n    disabled,\n    action,\n    actionable,\n    image,\n    icon,\n    selectable,\n    selectedIndicator,\n  } = props;\n\n  const [selected, setSelected] = useAutoControlled({\n    defaultValue: props.defaultSelected,\n    value: props.selected,\n    initialValue: false,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Pill.handledProps, props);\n\n  const handleDismiss = e => {\n    _.invoke(props, 'onDismiss', e, props);\n  };\n\n  const handleClick = e => {\n    if (selectable) {\n      setSelected(prevSelected => !prevSelected);\n      _.invoke(props, 'onSelectionChange', e, { ...props, selected: !selected });\n    }\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const getA11yProps = useAccessibility(props.accessibility || parentProps.pillBehavior || pillBehavior, {\n    debugName: Pill.displayName,\n    actionHandlers: {\n      performDismiss: handleDismiss,\n      performClick: handleClick,\n    },\n    mapPropsToBehavior: () => ({\n      actionable,\n      selectable,\n      selected,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<PillStylesProps>(Pill.displayName, {\n    className: pillClassName,\n    mapPropsToStyles: () => ({\n      appearance,\n      size,\n      rectangular,\n      disabled,\n      selectable,\n      selected,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getSelectedIndicator: () => ShorthandValue<PillIconProps> = () => {\n    if (!!selectedIndicator) {\n      return selectedIndicator;\n    }\n\n    if (!!image) {\n      return <CheckmarkCircleIcon />;\n    }\n\n    return <AcceptIcon />;\n  };\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...(actionable && { onClick: handleClick }),\n        ...unhandledProps,\n      })}\n    >\n      {selectable &&\n        selected &&\n        createShorthand(PillIcon, getSelectedIndicator(), {\n          defaultProps: () => ({ size, selectable, image }),\n        })}\n      {!selected &&\n        createShorthand(PillImage, image, {\n          defaultProps: () => ({ size }),\n        })}\n      {!selected &&\n        createShorthand(PillIcon, icon, {\n          defaultProps: () => ({ size }),\n        })}\n      {createShorthand(PillContent, (content as ShorthandValue<PillContentProps>) || {}, {\n        defaultProps: () => ({\n          children,\n          size,\n          actionable,\n        }),\n      })}\n      {actionable &&\n        createShorthand(PillAction, action || {}, {\n          overrideProps: (prevProps: PillActionProps & { onClick: (e: React.MouseEvent) => void }) => ({\n            onClick: e => {\n              _.invoke(prevProps, 'onClick', e);\n              handleDismiss(e);\n            },\n          }),\n        })}\n    </ElementType>,\n  );\n\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, PillProps> & FluentComponentStaticProps<PillProps>;\n\nPill.defaultProps = {\n  as: 'span' as const,\n};\n\nPill.propTypes = {\n  ...commonPropTypes.createCommon(),\n  content: customPropTypes.shorthandAllowingChildren,\n  size: PropTypes.oneOf<'small' | 'smaller' | 'medium'>(['small', 'smaller', 'medium']),\n  rectangular: PropTypes.bool,\n  disabled: PropTypes.bool,\n  appearance: PropTypes.oneOf<'filled' | 'inverted' | 'outline'>(['filled', 'inverted', 'outline']),\n  actionable: PropTypes.bool,\n  action: customPropTypes.shorthandAllowingChildren,\n  onDismiss: PropTypes.func,\n  selectedIndicator: customPropTypes.shorthandAllowingChildren,\n  selectable: PropTypes.bool,\n  selected: PropTypes.bool,\n  defaultSelected: PropTypes.bool,\n  image: customPropTypes.shorthandAllowingChildren,\n};\n\nPill.displayName = 'Pill';\n\nPill.handledProps = Object.keys(Pill.propTypes) as any;\n"],"file":"Pill.js"}