{"version":3,"sources":["components/Slider/Slider.tsx"],"names":["sliderBehavior","getElementType","useUnhandledProps","useAccessibility","useStateManager","useFluentContext","useStyles","useTelemetry","handleRef","Ref","customPropTypes","createSliderManager","cx","PropTypes","React","commonPropTypes","partitionHTMLProps","setWhatInputSource","createShorthandFactory","Box","processInputValues","p","min","max","value","isNaN","Number","Slider","defaultProps","Math","valueAsPercentage","sliderClassName","sliderSlotClassNames","input","inputWrapper","rail","thumb","track","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","getA11yValueMessageOnChange","defaultValue","userInputRef","inputRef","step","className","styles","variables","design","fluid","vertical","disabled","useRef","mapPropsToInitialState","mapPropsToState","state","actions","numericMin","numericMax","numericValue","getA11Props","debugName","rtl","mapPropsToBehavior","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","handleInputOverrides","onChange","e","change","onMouseDown","target","ElementType","unhandledProps","handledProps","htmlInputProps","restProps","type","inputElement","create","as","overrideProps","element","root","width","String","propTypes","createCommon","content","oneOfType","string","number","bool","func","itemShorthand","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, sliderBehavior, SliderBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createSliderManager } from '@fluentui/state';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  ChildrenComponentProps,\n  commonPropTypes,\n  partitionHTMLProps,\n  UIComponentProps,\n  setWhatInputSource,\n  createShorthandFactory,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport { Box, BoxProps } from '../Box/Box';\n\nconst processInputValues = (\n  p: Pick<SliderProps, 'min' | 'max'> & { value: string },\n): { min: number; max: number; value: number; valueAsPercentage: string } => {\n  let min = _.toNumber(p.min);\n  let max = _.toNumber(p.max);\n  let value = _.toNumber(p.value);\n\n  if (isNaN(min)) min = Number(Slider.defaultProps.min);\n  if (isNaN(max)) max = Number(Slider.defaultProps.max);\n  value = isNaN(value) ? min + (max - min) / 2 : Math.min(max, Math.max(min, value));\n  const valueAsPercentage = `${(100 * (value - min)) / (max - min)}%`;\n\n  return { min, max, value, valueAsPercentage };\n};\n\nexport interface SliderSlotClassNames {\n  input: string;\n  inputWrapper: string;\n  rail: string;\n  thumb: string;\n  track: string;\n}\n\nexport interface SliderProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    Omit<SupportedIntrinsicInputProps, 'defaultValue'> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<SliderBehaviorProps>;\n\n  /** The default value of the slider. */\n  defaultValue?: string | number;\n\n  /** A slider can be read-only and unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A slider can take the width of its container. */\n  fluid?: boolean;\n\n  /**\n   * Callback that creates custom accessibility message a screen reader narrates when the value changes.\n   * @param props - Slider props.\n   */\n  getA11yValueMessageOnChange?: (props: SliderProps) => string;\n\n  /** Shorthand for the input component. */\n  input?: ShorthandValue<BoxProps>;\n\n  /** Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLElement>;\n\n  /** The maximum value of the slider. */\n  max?: SupportedIntrinsicInputProps['max'];\n\n  /** The minimum value of the slider. */\n  min?: SupportedIntrinsicInputProps['min'];\n\n  /**\n   * Called after item checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<SliderProps & { value: string }>;\n\n  /**\n   * A number that specifies the granularity that the value must adhere to, or the special value 'any'.\n   * A string value of any means that no stepping is implied, and any value is allowed\n   * (barring other constraints, such as min and max).\n   */\n  step?: SupportedIntrinsicInputProps['step'];\n\n  /** The value of the slider. */\n  value?: string | number;\n\n  /** A slider can be displayed vertically. */\n  vertical?: boolean;\n}\n\nexport type SliderStylesProps = Pick<SliderProps, 'fluid' | 'disabled' | 'vertical'>;\nexport const sliderClassName = 'ui-slider';\nexport const sliderSlotClassNames: SliderSlotClassNames = {\n  input: `${sliderClassName}__input`,\n  inputWrapper: `${sliderClassName}__input-wrapper`,\n  rail: `${sliderClassName}__rail`,\n  thumb: `${sliderClassName}__thumb`,\n  track: `${sliderClassName}__track`,\n};\n\n/**\n * A Slider represents an input that allows user to choose a value from within a specific range.\n *\n * @accessibility\n * Implements [ARIA Slider](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) design pattern.\n * @accessibilityIssues\n * [Slider - JAWS narrates slider value twice when using PageUp / PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/220)\n * [Slider - JAWS narrates current and new value in vertical slider](https://github.com/FreedomScientific/VFO-standards-support/issues/219)\n */\nexport const Slider = (React.forwardRef<HTMLInputElement, SliderProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Slider.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    min,\n    max,\n    value,\n    getA11yValueMessageOnChange,\n    defaultValue,\n    input,\n    inputRef: userInputRef,\n    step,\n    className,\n    styles,\n    variables,\n    design,\n    fluid,\n    vertical,\n    disabled,\n  } = props;\n  const inputRef = React.useRef<HTMLElement>();\n\n  const { state, actions } = useStateManager(createSliderManager, {\n    mapPropsToInitialState: () => ({\n      value: defaultValue as string,\n    }),\n    mapPropsToState: () => ({\n      value: value as string,\n    }),\n  });\n  const { min: numericMin, max: numericMax, value: numericValue, valueAsPercentage } = processInputValues({\n    min,\n    max,\n    value: state.value || '',\n  });\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Slider.displayName,\n    rtl: context.rtl,\n    mapPropsToBehavior: () => ({\n      disabled,\n      getA11yValueMessageOnChange,\n      max: numericMax,\n      min: numericMax,\n      value: numericValue,\n      vertical,\n    }),\n  });\n  const { classes, styles: resolvedStyles } = useStyles<SliderStylesProps>(Slider.displayName, {\n    className: sliderClassName,\n    mapPropsToStyles: () => ({\n      fluid,\n      vertical,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      styles,\n      variables,\n      design,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleInputOverrides = () => ({\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n      const value = _.get(e, 'target.value');\n      _.invoke(props, 'onChange', e, { ...props, value });\n      actions.change(value);\n    },\n    onMouseDown: (e: React.MouseEvent<HTMLInputElement>) => {\n      setWhatInputSource(context.target, 'mouse');\n      _.invoke(props, 'onMouseDown', e, props);\n    },\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Slider.handledProps, props);\n  const [htmlInputProps, restProps] = partitionHTMLProps(unhandledProps);\n  const type = 'range';\n\n  // we need 2 wrappers around the slider rail, track, input and thumb slots to achieve correct component sizes\n\n  const inputElement = Box.create(input || type, {\n    defaultProps: () =>\n      getA11Props('input', {\n        ...htmlInputProps,\n        as: 'input',\n        className: sliderSlotClassNames.input,\n        min: numericMin,\n        max: numericMax,\n        step,\n        styles: resolvedStyles.input,\n        type,\n        value: numericValue,\n      }),\n    overrideProps: handleInputOverrides,\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...restProps })}>\n      <div\n        {...getA11Props('inputWrapper', {\n          className: cx(sliderSlotClassNames.inputWrapper, classes.inputWrapper),\n        })}\n      >\n        <span {...getA11Props('rail', { className: cx(sliderSlotClassNames.rail, classes.rail) })} />\n        <span\n          {...getA11Props('track', { className: cx(sliderSlotClassNames.track, classes.track) })}\n          style={{ width: valueAsPercentage }}\n        />\n        <Ref\n          innerRef={(inputElement: HTMLElement) => {\n            handleRef(inputRef, inputElement);\n            handleRef(userInputRef, inputElement);\n          }}\n        >\n          {inputElement}\n        </Ref>\n        {/* the thumb slot needs to appear after the input slot */}\n        <span\n          {...getA11Props('thumb', { className: cx(sliderSlotClassNames.thumb, classes.thumb) })}\n          style={{ [context.rtl ? 'right' : 'left']: valueAsPercentage }}\n        />\n      </div>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'input', HTMLInputElement, SliderProps> & FluentComponentStaticProps;\n\nSlider.displayName = 'Slider';\n\nSlider.defaultProps = {\n  accessibility: sliderBehavior,\n  getA11yValueMessageOnChange: ({ value }) => String(value),\n  max: 100,\n  min: 0,\n  step: 1,\n};\nSlider.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fluid: PropTypes.bool,\n  getA11yValueMessageOnChange: PropTypes.func,\n  input: customPropTypes.itemShorthand,\n  inputRef: customPropTypes.ref,\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  vertical: PropTypes.bool,\n};\nSlider.handledProps = Object.keys(Slider.propTypes) as any;\n\nSlider.create = createShorthandFactory({ Component: Slider, mappedProp: 'value' });\n"],"file":"Slider.js"}