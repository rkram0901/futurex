import * as React from 'react';
import { ShorthandCollection, FluentComponentStaticProps } from '../../types';
import { UIComponentProps, ChildrenComponentProps, ContentComponentProps } from '../../utils';
import { Accessibility } from '@fluentui/accessibility';
import { ReactionProps } from './Reaction';
export interface ReactionGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     */
    accessibility?: Accessibility<never>;
    /** The reactions contained inside the reaction group. */
    items?: ShorthandCollection<ReactionProps>;
}
export declare const reactionGroupClassName = "ui-reactions";
export declare type ReactionGroupStylesProps = never;
/**
 * A ReactionGroup groups multiple Reaction elements.
 */
export declare const ReactionGroup: (<TExtendedElementType extends React.ElementType<any> = "div">(props: React.RefAttributes<HTMLDivElement> & Omit<import("@fluentui/react-bindings").PropsOfElement<TExtendedElementType>, "as" | keyof ReactionGroupProps> & {
    as?: TExtendedElementType;
} & ReactionGroupProps) => JSX.Element) & {
    propTypes?: React.WeakValidationMap<ReactionGroupProps> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
    contextTypes?: import("prop-types").ValidationMap<any>;
    defaultProps?: Partial<ReactionGroupProps & {
        as: "div";
    }>;
    displayName?: string;
    readonly __PRIVATE_PROPS?: React.RefAttributes<HTMLDivElement> & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>> & {
        ref?: React.Ref<HTMLDivElement>;
    }, "as" | keyof ReactionGroupProps> & {
        as?: "div";
    } & ReactionGroupProps;
} & FluentComponentStaticProps<ReactionGroupProps>;
