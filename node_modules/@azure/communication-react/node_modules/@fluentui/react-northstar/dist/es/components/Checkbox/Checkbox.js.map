{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":["checkboxBehavior","getElementType","useUnhandledProps","useAccessibility","useStateManager","useFluentContext","useStyles","useTelemetry","customPropTypes","createCheckboxManager","PropTypes","React","createShorthandFactory","commonPropTypes","Box","Text","checkboxClassName","checkboxSlotClassNames","label","indicator","Checkbox","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","checked","className","defaultChecked","design","disabled","labelPosition","styles","toggle","variables","mapPropsToInitialState","mapPropsToState","state","actions","getA11Props","accessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","e","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleChange","labelElement","create","defaultProps","element","root","onClick","onChange","checkbox","propTypes","createCommon","content","oneOf","bool","shorthandAllowingChildren","itemShorthand","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, checkboxBehavior, CheckboxBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createCheckboxManager } from '@fluentui/state';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, ChildrenComponentProps, commonPropTypes, UIComponentProps } from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Text, TextProps } from '../Text/Text';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\n\nexport interface CheckboxSlotClassNames {\n  label: string;\n  indicator: string;\n}\n\nexport interface CheckboxProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<CheckboxBehaviorProps>;\n\n  /** A checkbox can be checked by default. */\n  defaultChecked?: SupportedIntrinsicInputProps['defaultChecked'];\n\n  /** A checkbox's checked state can be controlled. */\n  checked?: SupportedIntrinsicInputProps['checked'] | 'mixed';\n\n  /** A checkbox can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A checkbox's indicator icon can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A checkbox can render a label next to its indicator. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A checkbox's label can be rendered in different positions. */\n  labelPosition?: 'start' | 'end';\n\n  /**\n   * Called after a checkbox's checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<Omit<CheckboxProps, 'checked'> & { checked: boolean }>;\n\n  /**\n   * Called after a checkbox is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<Omit<CheckboxProps, 'checked'> & { checked: boolean }>;\n\n  /** A checkbox can be formatted to show an \"on or off\" choice. */\n  toggle?: boolean;\n}\n\nexport type CheckboxStylesProps = Pick<CheckboxProps, 'checked' | 'disabled' | 'labelPosition' | 'toggle'>;\nexport const checkboxClassName = 'ui-checkbox';\nexport const checkboxSlotClassNames: CheckboxSlotClassNames = {\n  label: `${checkboxClassName}__label`,\n  indicator: `${checkboxClassName}__indicator`,\n};\n\n/**\n * A Checkbox allows a user to make a choice between two mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.\n */\nexport const Checkbox = (React.forwardRef<HTMLDivElement, CheckboxProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Checkbox.displayName, context.telemetry);\n  setStart();\n\n  const {\n    checked,\n    className,\n    defaultChecked,\n    design,\n    disabled,\n    label,\n    labelPosition,\n    indicator,\n    styles,\n    toggle,\n    variables,\n  } = props;\n\n  const { state, actions } = useStateManager(createCheckboxManager, {\n    mapPropsToInitialState: () => ({ checked: defaultChecked }),\n    mapPropsToState: () => ({ checked: checked === 'mixed' ? false : checked }),\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Checkbox.displayName,\n    mapPropsToBehavior: () => ({\n      checked: state.checked,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: (e: React.KeyboardEvent) => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<CheckboxStylesProps>(Checkbox.displayName, {\n    className: checkboxClassName,\n    mapPropsToStyles: () => ({\n      checked: checked === 'mixed' ? 'mixed' : state.checked,\n      disabled,\n      labelPosition,\n      toggle,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Checkbox.handledProps, props);\n\n  const handleChange = (e: React.ChangeEvent) => {\n    if (!disabled) {\n      // Checkbox component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      const checked = !state.checked;\n\n      actions.toggle(checked);\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (!disabled) {\n      const checked = !state.checked;\n      actions.toggle(checked);\n\n      _.invoke(props, 'onClick', e, { ...props, checked });\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11Props('label', {\n        styles: resolvedStyles.label,\n        className: checkboxSlotClassNames.label,\n      }),\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        onChange: handleChange,\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {labelPosition === 'start' && labelElement}\n      {Box.create(indicator, {\n        defaultProps: () =>\n          getA11Props('indicator', {\n            className: checkboxSlotClassNames.indicator,\n            styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox,\n          }),\n      })}\n      {labelPosition === 'end' && labelElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, CheckboxProps> & FluentComponentStaticProps<CheckboxProps>;\n\nCheckbox.displayName = 'Checkbox';\n\nCheckbox.defaultProps = {\n  accessibility: checkboxBehavior,\n  indicator: {},\n  labelPosition: 'end',\n};\nCheckbox.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checked: PropTypes.oneOf<true | false | 'mixed'>([true, false, 'mixed']),\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf<'start' | 'end'>(['start', 'end']),\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  toggle: PropTypes.bool,\n};\nCheckbox.handledProps = Object.keys(Checkbox.propTypes) as any;\n\nCheckbox.create = createShorthandFactory({\n  Component: Checkbox,\n  mappedProp: 'label',\n});\n"],"file":"Checkbox.js"}