{"version":3,"sources":["components/SplitButton/SplitButtonDivider.tsx"],"names":["React","PropTypes","useTelemetry","useAccessibility","getElementType","useFluentContext","useUnhandledProps","useStyles","commonPropTypes","SplitButtonDividerClassName","SplitButtonDivider","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","design","styles","variables","accessibility","ElementType","primary","unhandledProps","handledProps","getA11yProps","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","element","root","propTypes","createCommon","bool","Object","keys"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AAEA,SACEC,YADF,EAEEC,gBAFF,EAGEC,cAHF,EAIEC,gBAJF,EAKEC,iBALF,EAMEC,SANF,QAQO,0BARP;AAUA,SAKEC,eALF,QAMO,aANP;AA0BA,OAAO,IAAMC,2BAA2B,GAAG,uBAApC;AAEP;AACA;AACA;;AACA,OAAO,IAAMC,kBAAN;AAAA,MAAMA,kBAAkB,gBAAIV,KAAK,CAACW,UAAN,CAA0D,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC3G,QAAMC,OAAO,GAAGT,gBAAgB,EAAhC;;AACA,wBAA6BH,YAAY,CAACQ,kBAAkB,CAACK,WAApB,EAAiCD,OAAO,CAACE,SAAzC,CAAzC;AAAA,QAAQC,QAAR,iBAAQA,QAAR;AAAA,QAAkBC,MAAlB,iBAAkBA,MAAlB;;AACAD,IAAAA,QAAQ;AACR,QAAQE,SAAR,GAAgEP,KAAhE,CAAQO,SAAR;AAAA,QAAmBC,MAAnB,GAAgER,KAAhE,CAAmBQ,MAAnB;AAAA,QAA2BC,MAA3B,GAAgET,KAAhE,CAA2BS,MAA3B;AAAA,QAAmCC,SAAnC,GAAgEV,KAAhE,CAAmCU,SAAnC;AAAA,QAA8CC,aAA9C,GAAgEX,KAAhE,CAA8CW,aAA9C;AACA,QAAMC,WAAW,GAAGpB,cAAc,CAACQ,KAAD,CAAlC;AACA,QAAQa,OAAR,GAAoBb,KAApB,CAAQa,OAAR;AACA,QAAMC,cAAc,GAAGpB,iBAAiB,CAACI,kBAAkB,CAACiB,YAApB,EAAkCf,KAAlC,CAAxC;AACA,QAAMgB,YAAY,GAAGzB,gBAAgB,CAAQoB,aAAR,EAAuB;AAC1DM,MAAAA,SAAS,EAAEnB,kBAAkB,CAACK,WAD4B;AAE1De,MAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAF6C,KAAvB,CAArC;;AAIA,qBAAoBvB,SAAS,CAAgCG,kBAAkB,CAACK,WAAnD,EAAgE;AAC3FI,MAAAA,SAAS,EAAEV,2BADgF;AAE3FsB,MAAAA,gBAAgB,EAAE;AAAA,eAAO;AACvBN,UAAAA,OAAO,EAAPA;AADuB,SAAP;AAAA,OAFyE;AAK3FO,MAAAA,sBAAsB,EAAE;AAAA,eAAO;AAC7Bb,UAAAA,SAAS,EAATA,SAD6B;AAE7BC,UAAAA,MAAM,EAANA,MAF6B;AAG7BC,UAAAA,MAAM,EAANA,MAH6B;AAI7BC,UAAAA,SAAS,EAATA;AAJ6B,SAAP;AAAA,OALmE;AAW3FQ,MAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAX8E,KAAhE,CAA7B;AAAA,QAAQG,OAAR,cAAQA,OAAR;;AAcA,QAAMC,OAAO,gBACX,oBAAC,WAAD,EACMN,YAAY,CAAC,MAAD;AACdT,MAAAA,SAAS,EAAEc,OAAO,CAACE,IADL;AAEdtB,MAAAA,GAAG,EAAHA;AAFc,OAGXa,cAHW,EADlB,CADF;AASAR,IAAAA,MAAM;AACN,WAAOgB,OAAP;AACD,GArCkC,CAA5B;AAwCPxB,EAAAA,kBAAkB,CAACK,WAAnB,GAAiC,oBAAjC;AAEAL,EAAAA,kBAAkB,CAAC0B,SAAnB,qBACK5B,eAAe,CAAC6B,YAAhB,EADL;AAEEZ,IAAAA,OAAO,EAAExB,SAAS,CAACqC;AAFrB;AAKA5B,EAAAA,kBAAkB,CAACiB,YAAnB,GAAkCY,MAAM,CAACC,IAAP,CAAY9B,kBAAkB,CAAC0B,SAA/B,CAAlC;AA/CO,SAAM1B,kBAAN;AAAA","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Accessibility } from '@fluentui/accessibility';\nimport {\n  useTelemetry,\n  useAccessibility,\n  getElementType,\n  useFluentContext,\n  useUnhandledProps,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface SplitButtonDividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A split button divider can be formatted to show different levels of emphasis. */\n  primary?: boolean;\n}\n\nexport type SplitButtonDividerStylesProps = Required<Pick<SplitButtonDividerProps, 'primary'>>;\n\nexport const SplitButtonDividerClassName = 'ui-splitButtonDivider';\n\n/**\n * A SplitButtonDivider visually segments content.\n */\nexport const SplitButtonDivider = (React.forwardRef<HTMLDivElement, SplitButtonDividerProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(SplitButtonDivider.displayName, context.telemetry);\n  setStart();\n  const { className, design, styles, variables, accessibility } = props;\n  const ElementType = getElementType(props);\n  const { primary } = props;\n  const unhandledProps = useUnhandledProps(SplitButtonDivider.handledProps, props);\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: SplitButtonDivider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<SplitButtonDividerStylesProps>(SplitButtonDivider.displayName, {\n    className: SplitButtonDividerClassName,\n    mapPropsToStyles: () => ({\n      primary,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n    />\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, SplitButtonDividerProps> &\n  FluentComponentStaticProps<SplitButtonDividerProps>;\n\nSplitButtonDivider.displayName = 'SplitButtonDivider';\n\nSplitButtonDivider.propTypes = {\n  ...commonPropTypes.createCommon(),\n  primary: PropTypes.bool,\n};\n\nSplitButtonDivider.handledProps = Object.keys(SplitButtonDivider.propTypes) as any;\n"],"file":"SplitButtonDivider.js"}