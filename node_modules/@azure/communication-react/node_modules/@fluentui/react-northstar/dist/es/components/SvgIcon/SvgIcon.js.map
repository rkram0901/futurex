{"version":3,"sources":["components/SvgIcon/SvgIcon.tsx"],"names":["getElementType","getUnhandledProps","useStyles","useFluentContext","useTelemetry","svgIconClassName","svgIconDisplayName","svgIconHandledProps","callable","React","SvgIcon","props","context","displayName","telemetry","setStart","setEnd","alt","ariaLabel","bordered","circular","className","design","disabled","children","outline","rotate","size","styles","variables","xSpacing","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","ElementType","unhandledProps","handledProps","element","undefined","root","defaultProps","as"],"mappings":"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","sourcesContent":["import {\n  ComponentWithAs,\n  getElementType,\n  getUnhandledProps,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport {\n  SvgIconProps,\n  svgIconClassName,\n  svgIconDisplayName,\n  svgIconHandledProps,\n  SvgIconChildrenFn,\n} from '@fluentui/react-icons-northstar';\nimport { callable } from '@fluentui/styles';\nimport * as React from 'react';\n\nexport type SvgIconStylesProps = Required<\n  Pick<SvgIconProps, 'bordered' | 'circular' | 'disabled' | 'outline' | 'rotate' | 'size' | 'xSpacing'>\n>;\n\n/**\n * An SvgIcon displays a pictogram with semantic meaning.\n */\nexport const SvgIcon: ComponentWithAs<'span', SvgIconProps & { children: SvgIconChildrenFn<SvgIconProps> }> & {\n  handledProps: (keyof (SvgIconProps & { children: SvgIconChildrenFn<SvgIconProps> }))[];\n} = props => {\n  const context = useFluentContext();\n\n  const { setStart, setEnd } = useTelemetry(SvgIcon.displayName, context.telemetry);\n  setStart();\n\n  const {\n    alt,\n    'aria-label': ariaLabel,\n    bordered,\n    circular,\n    className,\n    design,\n    disabled,\n    children,\n    outline,\n    rotate,\n    size,\n    styles,\n    variables,\n    xSpacing,\n  } = props;\n\n  const { classes } = useStyles<SvgIconStylesProps>(SvgIcon.displayName, {\n    className: svgIconClassName,\n    mapPropsToStyles: () => ({\n      bordered,\n      circular,\n      disabled,\n      outline,\n      rotate,\n      size,\n      xSpacing,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = getUnhandledProps(SvgIcon.handledProps, props);\n\n  const element = (\n    <ElementType\n      role=\"img\"\n      aria-hidden={alt || ariaLabel ? undefined : 'true'}\n      aria-label={ariaLabel}\n      className={classes.root}\n      {...unhandledProps}\n    >\n      {callable(children)({ classes, rtl: context.rtl, props })}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nSvgIcon.displayName = svgIconDisplayName;\nSvgIcon.handledProps = [...svgIconHandledProps, 'children'];\nSvgIcon.defaultProps = {\n  as: 'span',\n  size: 'medium',\n  rotate: 0,\n};\n"],"file":"SvgIcon.js"}