import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Accessibility } from '@fluentui/accessibility';
import { UIComponentProps, ChildrenComponentProps, ContentComponentProps, SizeValue } from '../../utils';
import { FluentComponentStaticProps } from '../../types';
export interface PillContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     */
    accessibility?: Accessibility<never>;
    /**
     * A Pill can be sized.
     */
    size?: Extract<SizeValue, 'smaller' | 'small' | 'medium'>;
    /**
     * A Pill can be actionable.
     */
    actionable?: boolean;
}
export declare type PillContentStylesProps = Required<Pick<PillContentProps, 'size' | 'actionable'>>;
export declare const pillContentClassName = "ui-pillcontent";
/**
 * A PillContent allows user to classify content.
 */
export declare const PillContent: (<TExtendedElementType extends React.ElementType<any> = "span">(props: React.RefAttributes<HTMLSpanElement> & Omit<import("@fluentui/react-bindings").PropsOfElement<TExtendedElementType>, "as" | keyof PillContentProps> & {
    as?: TExtendedElementType;
} & PillContentProps) => JSX.Element) & {
    propTypes?: React.WeakValidationMap<PillContentProps> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
    contextTypes?: PropTypes.ValidationMap<any>;
    defaultProps?: Partial<PillContentProps & {
        as: "span";
    }>;
    displayName?: string;
    readonly __PRIVATE_PROPS?: React.RefAttributes<HTMLSpanElement> & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "key" | keyof React.HTMLAttributes<HTMLSpanElement>> & {
        ref?: React.Ref<HTMLSpanElement>;
    }, "as" | keyof PillContentProps> & {
        as?: "span";
    } & PillContentProps;
} & FluentComponentStaticProps<PillContentProps>;
