import { Accessibility } from '@fluentui/accessibility';
import * as React from 'react';
import { UIComponentProps, ChildrenComponentProps, ContentComponentProps, ColorComponentProps } from '../../utils';
import { FluentComponentStaticProps } from '../../types';
export interface HeaderDescriptionProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps, ColorComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     */
    accessibility?: Accessibility<never>;
}
export declare const headerDescriptionClassName = "ui-header__description";
export declare type HeaderDescriptionStylesProps = Pick<HeaderDescriptionProps, 'color'>;
/**
 * A HeaderDescription provides more detailed information about the Header.
 */
export declare const HeaderDescription: (<TExtendedElementType extends React.ElementType<any> = "p">(props: React.RefAttributes<HTMLParagraphElement> & Omit<import("@fluentui/react-bindings").PropsOfElement<TExtendedElementType>, "as" | keyof HeaderDescriptionProps> & {
    as?: TExtendedElementType;
} & HeaderDescriptionProps) => JSX.Element) & {
    propTypes?: React.WeakValidationMap<HeaderDescriptionProps> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
    contextTypes?: import("prop-types").ValidationMap<any>;
    defaultProps?: Partial<HeaderDescriptionProps & {
        as: "p";
    }>;
    displayName?: string;
    readonly __PRIVATE_PROPS?: React.RefAttributes<HTMLParagraphElement> & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, "key" | keyof React.HTMLAttributes<HTMLParagraphElement>> & {
        ref?: React.Ref<HTMLParagraphElement>;
    }, "as" | keyof HeaderDescriptionProps> & {
        as?: "p";
    } & HeaderDescriptionProps;
} & FluentComponentStaticProps<HeaderDescriptionProps>;
