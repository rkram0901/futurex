{"version":3,"sources":["components/Form/FormField.tsx"],"names":["formFieldBehavior","customPropTypes","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","getOrGenerateIdFromShorthand","Text","Input","Box","getElementType","useUnhandledProps","useFluentContext","useTelemetry","useStyles","useAccessibility","formFieldClassName","formFieldMessageClassName","FormField","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","children","control","id","label","message","name","required","type","className","design","styles","variables","inline","errorMessage","ElementType","unhandledProps","handledProps","messageId","useRef","current","labelId","getA11yProps","accessibility","debugName","mapPropsToBehavior","hasErrorMessage","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","labelElement","create","defaultProps","as","htmlFor","messageElement","controlElement","error","shouldControlAppearFirst","content","element","root","propTypes","createCommon","shorthandAllowingChildren","string","bool","itemShorthand","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Text, TextProps } from '../Text/Text';\nimport { Input } from '../Input/Input';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface FormFieldProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /**\n   * @deprecated\n   * A control for the form field.\n   */\n  control?: ShorthandValue<BoxProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<TextProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<TextProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** Message to be shown when input has error */\n  errorMessage?: ShorthandValue<TextProps>;\n}\n\nexport const formFieldClassName = 'ui-form__field';\nexport const formFieldMessageClassName = 'ui-form__field__message';\n\nexport type FormFieldStylesProps = Required<Pick<FormFieldProps, 'type' | 'inline' | 'required'>> & {\n  hasErrorMessage: boolean;\n};\n\n/**\n * A FormField represents a Form element containing a label and an input.\n */\nexport const FormField = (React.forwardRef<HTMLDivElement, FormFieldProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(FormField.displayName, context.telemetry);\n  setStart();\n\n  const {\n    children,\n    control,\n    id,\n    label,\n    message,\n    name,\n    required,\n    type,\n    className,\n    design,\n    styles,\n    variables,\n    inline,\n    errorMessage,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(FormField.handledProps, props);\n  const messageId = React.useRef<string>();\n  messageId.current = getOrGenerateIdFromShorthand('error-message-', message || errorMessage, messageId.current);\n  const labelId = React.useRef<string>();\n  labelId.current = getOrGenerateIdFromShorthand('form-label-', id, labelId.current);\n\n  const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n    debugName: FormField.displayName,\n    mapPropsToBehavior: () => ({\n      hasErrorMessage: !!errorMessage,\n      messageId: messageId.current,\n      labelId: labelId.current,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<FormFieldStylesProps>(FormField.displayName, {\n    className: formFieldClassName,\n    mapPropsToStyles: () => ({\n      type,\n      inline,\n      required,\n      hasErrorMessage: !!errorMessage,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11yProps('label', {\n        as: 'label',\n        htmlFor: id,\n        id: labelId.current,\n        styles: resolvedStyles.label,\n      }),\n  });\n\n  const messageElement = Text.create(errorMessage || message, {\n    defaultProps: () =>\n      getA11yProps('message', {\n        className: formFieldMessageClassName,\n        id: messageId.current,\n        styles: resolvedStyles.message,\n      }),\n  });\n\n  const controlElement = Box.create(control || {}, {\n    defaultProps: () =>\n      getA11yProps('control', {\n        required,\n        name,\n        id,\n        type,\n        error: !!errorMessage || null,\n        styles: resolvedStyles.control,\n      }),\n  });\n\n  const shouldControlAppearFirst = () => {\n    return type && (type === 'checkbox' || type === 'radio');\n  };\n\n  const content = (\n    <>\n      {shouldControlAppearFirst() && controlElement}\n      {labelElement}\n      {!shouldControlAppearFirst() && controlElement}\n      {messageElement}\n    </>\n  );\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, FormFieldProps> & FluentComponentStaticProps<FormFieldProps>;\n\nFormField.displayName = 'FormField';\n\nFormField.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  control: customPropTypes.shorthandAllowingChildren,\n  id: PropTypes.string,\n  inline: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  message: customPropTypes.itemShorthand,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n  errorMessage: customPropTypes.shorthandAllowingChildren,\n};\n\nFormField.handledProps = Object.keys(FormField.propTypes) as any;\n\nFormField.defaultProps = {\n  accessibility: formFieldBehavior,\n  control: { as: Input },\n};\n\nFormField.create = createShorthandFactory({ Component: FormField, mappedProp: 'label' });\n"],"file":"FormField.js"}