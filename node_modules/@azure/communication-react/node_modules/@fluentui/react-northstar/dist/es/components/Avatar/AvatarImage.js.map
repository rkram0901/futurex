{"version":3,"sources":["components/Avatar/AvatarImage.tsx"],"names":["imageBehavior","getElementType","useUnhandledProps","useAccessibility","useFluentContext","useStyles","useTelemetry","PropTypes","React","commonPropTypes","createShorthandFactory","imageClassName","avatarImageClassName","AvatarImage","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","alt","ariaLabel","avatar","circular","className","design","fluid","styles","variables","size","getA11Props","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","result","root","defaultProps","as","propTypes","createCommon","children","content","bool","shorthandConfig","mappedProp","allowsJSX","Object","keys","create","Component"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributes, imageBehavior, ImageBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { UIComponentProps, commonPropTypes, createShorthandFactory, SizeValue } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { imageClassName } from '../Image/Image';\n\nexport interface AvatarImageProps extends UIComponentProps, ImageBehaviorProps {\n  /** Alternative text. */\n  alt?: string;\n\n  'aria-label'?: AccessibilityAttributes['aria-label'];\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ImageBehaviorProps>;\n\n  /** @deprecated An image may be formatted to appear inline with text as an avatar. */\n  avatar?: boolean;\n\n  /** An Avatarimage can appear circular. */\n  circular?: boolean;\n\n  /** An Avatarimage can take up the width of its container. */\n  fluid?: boolean;\n\n  /** AvatarImage source URL. */\n  src?: string;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n}\n\nexport type AvatarImageStylesProps = Pick<AvatarImageProps, 'avatar' | 'circular' | 'fluid' | 'size'>;\nexport const avatarImageClassName = imageClassName;\n\n/**\n * An AvatarImage is a graphic representation used by Avatar.\n */\nexport const AvatarImage = (React.forwardRef<HTMLImageElement, AvatarImageProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarImage.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    alt,\n    'aria-label': ariaLabel,\n    avatar,\n    circular,\n    className,\n    design,\n    fluid,\n    styles,\n    variables,\n    size,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: AvatarImage.displayName,\n    mapPropsToBehavior: () => ({\n      alt,\n      'aria-label': ariaLabel,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<AvatarImageStylesProps>(AvatarImage.displayName, {\n    className: avatarImageClassName,\n    mapPropsToStyles: () => ({\n      avatar,\n      circular,\n      fluid,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarImage.handledProps, props);\n\n  const result = <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })} />;\n\n  setEnd();\n\n  return result;\n}) as unknown) as ForwardRefWithAs<'img', HTMLImageElement, AvatarImageProps> &\n  FluentComponentStaticProps<AvatarImageProps>;\n\nAvatarImage.displayName = 'AvatarImage';\nAvatarImage.defaultProps = {\n  as: 'img',\n  accessibility: imageBehavior,\n};\n\nAvatarImage.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  avatar: PropTypes.bool,\n  circular: PropTypes.bool,\n  fluid: PropTypes.bool,\n};\n\nAvatarImage.shorthandConfig = {\n  mappedProp: 'src',\n  allowsJSX: false,\n};\n\nAvatarImage.handledProps = Object.keys(AvatarImage.propTypes) as any;\nAvatarImage.create = createShorthandFactory({ Component: AvatarImage, mappedProp: 'src', allowsJSX: false });\n"],"file":"AvatarImage.js"}