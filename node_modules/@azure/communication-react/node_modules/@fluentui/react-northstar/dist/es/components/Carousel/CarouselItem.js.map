{"version":3,"sources":["components/Carousel/CarouselItem.tsx"],"names":["React","PropTypes","carouselItemBehavior","commonPropTypes","childrenExist","createShorthandFactory","screenReaderContainerStyles","useAccessibility","useTelemetry","useFluentContext","getElementType","useUnhandledProps","useStyles","carouselItemClassName","carouselItemSlotClassNames","itemPositionText","CarouselItem","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","unhandledProps","handledProps","accessibility","navigation","active","children","content","className","design","styles","variables","ElementType","getA11yProps","debugName","actionHandlers","arrowKeysNavigationStopPropagation","e","currentTarget","target","stopPropagation","mapPropsToBehavior","mapPropsToInlineStyles","rtl","classes","element","root","propTypes","createCommon","bool","string","defaultProps","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { carouselItemBehavior, CarouselItemBehaviorProps, Accessibility } from '@fluentui/accessibility';\n\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n} from '../../utils';\n\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  useAccessibility,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface CarouselItemSlotClassNames {\n  itemPositionText: string;\n}\n\nexport interface CarouselItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CarouselItemBehaviorProps>;\n\n  /** Whether or not the item is in view or not. */\n  active?: boolean;\n\n  /**\n   * Text to be added in the DOM that will specify item position. To be picked\n   * up by screen readers.\n   */\n  itemPositionText?: string;\n\n  /** Whether or not navigation exists in carousel. */\n  navigation?: boolean;\n}\n\nexport type CarouselItemStylesProps = never;\n\nexport const carouselItemClassName = 'ui-carousel__item';\nexport const carouselItemSlotClassNames: CarouselItemSlotClassNames = {\n  itemPositionText: `${carouselItemClassName}__itemPositionText`,\n};\n\n/**\n * A Carousel displays data organised as a gallery.\n *\n * @accessibility\n * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.\n */\nexport const CarouselItem = (React.forwardRef<HTMLDivElement, CarouselItemProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(CarouselItem.displayName, context.telemetry);\n  setStart();\n  const unhandledProps = useUnhandledProps(CarouselItem.handledProps, props);\n  const {\n    accessibility,\n    navigation,\n    active,\n    children,\n    itemPositionText,\n    content,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const getA11yProps = useAccessibility<CarouselItemBehaviorProps>(accessibility, {\n    debugName: CarouselItem.displayName,\n    actionHandlers: {\n      arrowKeysNavigationStopPropagation: e => {\n        // let event propagate, when it was invoke on the element where arrow keys should rotate carousel\n        if (e.currentTarget !== e.target) {\n          e.stopPropagation();\n        }\n      },\n    },\n    mapPropsToBehavior: () => ({\n      navigation,\n      active,\n    }),\n  });\n\n  const { classes } = useStyles<CarouselItemStylesProps>(CarouselItem.displayName, {\n    className: carouselItemClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n      <div className={carouselItemSlotClassNames.itemPositionText} style={screenReaderContainerStyles}>\n        {itemPositionText}\n      </div>\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, CarouselItemProps> &\n  FluentComponentStaticProps<CarouselItemProps>;\n\nCarouselItem.displayName = 'CarouselItem';\n\nCarouselItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  navigation: PropTypes.bool,\n  itemPositionText: PropTypes.string,\n};\n\nCarouselItem.defaultProps = {\n  accessibility: carouselItemBehavior,\n};\n\nCarouselItem.handledProps = Object.keys(CarouselItem.propTypes) as any;\n\nCarouselItem.create = createShorthandFactory({ Component: CarouselItem, mappedProp: 'content' });\n"],"file":"CarouselItem.js"}