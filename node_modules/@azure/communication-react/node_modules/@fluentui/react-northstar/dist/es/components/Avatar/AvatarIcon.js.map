{"version":3,"sources":["components/Avatar/AvatarIcon.tsx"],"names":["React","useFluentContext","useTelemetry","useStyles","useAccessibility","getElementType","useUnhandledProps","customPropTypes","PropTypes","commonPropTypes","childrenExist","avatarIconClassName","AvatarIcon","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","children","design","styles","variables","size","square","content","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","propTypes","createCommon","bool","Object","keys","defaultProps","as","shorthandConfig","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  SizeValue,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  childrenExist,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\n\nexport interface AvatarIconProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n\n  /** The avatar icon can have a square shape. */\n  square?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n}\n\nexport type AvatarIconStylesProps = Required<Pick<AvatarIconProps, 'size' | 'square'>>;\nexport const avatarIconClassName = 'ui-avatar__icon';\n\n/**\n * A AvatarIcon provides a status icon for the Avatar.\n */\nexport const AvatarIcon = (React.forwardRef<HTMLSpanElement, AvatarIconProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarIcon.displayName, context.telemetry);\n  setStart();\n\n  const { className, children, design, styles, variables, size, square, content } = props;\n\n  const { classes } = useStyles<AvatarIconStylesProps>(AvatarIcon.displayName, {\n    className: avatarIconClassName,\n    mapPropsToStyles: () => ({\n      size,\n      square,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: AvatarIcon.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarIcon.handledProps, props);\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })}>\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, AvatarIconProps> &\n  FluentComponentStaticProps<AvatarIconProps>;\n\nAvatarIcon.displayName = 'AvatarIcon';\nAvatarIcon.propTypes = {\n  ...commonPropTypes.createCommon(),\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n};\nAvatarIcon.handledProps = Object.keys(AvatarIcon.propTypes) as any;\nAvatarIcon.defaultProps = {\n  as: 'span',\n};\n\nAvatarIcon.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"AvatarIcon.js"}