{"version":3,"sources":["themes/teams/getBorderFocusStyles.ts"],"names":["defaultColor","getBorderFocusStyles","args","sv","variables","borderRadius","focusBorderRadius","focusInnerBorderColor","focusOuterBorderColor","borderPadding","focusInnerBorderWidth","borderWidth","focusOuterBorderWidth","defaultPreudoStyles","content","position","borderStyle","pointerEvents","borderPaddingTop","top","borderPaddingBottom","bottom","borderPaddingLeft","left","borderPaddingRight","right","outline","borderColor","zIndex","zIndexes","foreground"],"mappings":"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","sourcesContent":["import { ICSSInJSStyle, SiteVariablesPrepared } from '@fluentui/styles';\nimport * as React from 'react';\n\ntype CSSBorderStyles = Pick<React.CSSProperties, 'borderWidth' | 'borderRadius'>;\ntype BorderPadding = Record<'top' | 'bottom' | 'left' | 'right', string>;\ntype BorderFocusStyles = CSSBorderStyles & {\n  variables?:\n    | SiteVariablesPrepared\n    | {\n        borderWidth: string;\n        borderRadius: string;\n        focusBorderRadius?: string;\n        focusInnerBorderColor: string;\n        focusOuterBorderColor: string;\n        focusInnerBorderWidth?: string;\n        focusOuterBorderWidth?: string;\n        zIndexes: { foreground: string };\n      };\n  focusBorderRadius?: string;\n  focusInnerBorderColor?: string;\n  focusOuterBorderColor?: string;\n  focusInnerBorderWidth?: string;\n  focusOuterBorderWidth?: string;\n  borderPadding?: string | BorderPadding;\n};\nconst defaultColor = 'transparent';\n/**\n * Returns style object that can be used for styling components on focus state.\n * NOTE: the element where this is used needs to have relative positioning so that the\n * pseudo elements created on focus can be properly positioned.\n */\nexport const getBorderFocusStyles = (args: BorderFocusStyles): Record<':focus' | ':focus-visible', ICSSInJSStyle> => {\n  const sv = args.variables;\n  const {\n    borderRadius = sv.focusBorderRadius || sv.borderRadius,\n    focusInnerBorderColor = sv.focusInnerBorderColor || defaultColor,\n    focusOuterBorderColor = sv.focusOuterBorderColor || defaultColor,\n    borderPadding,\n    focusInnerBorderWidth = sv.focusInnerBorderWidth || sv.borderWidth,\n    focusOuterBorderWidth = sv.focusOuterBorderWidth || sv.borderWidth,\n  } = args;\n  const defaultPreudoStyles: React.CSSProperties = {\n    content: '\"\"',\n    position: 'absolute',\n    borderStyle: 'solid',\n    pointerEvents: 'none',\n    borderRadius,\n  };\n  const borderPaddingTop = (borderPadding as BorderPadding)?.top || borderPadding;\n  const borderPaddingBottom = (borderPadding as BorderPadding)?.bottom || borderPadding;\n  const borderPaddingLeft = (borderPadding as BorderPadding)?.left || borderPadding;\n  const borderPaddingRight = (borderPadding as BorderPadding)?.right || borderPadding;\n  return {\n    ':focus': {\n      outline: 'none',\n    },\n    ':focus-visible': {\n      borderColor: 'transparent',\n      ':before': {\n        ...defaultPreudoStyles,\n        borderWidth: focusInnerBorderWidth,\n        zIndex: sv.zIndexes.foreground,\n        borderColor: focusInnerBorderColor,\n        top: borderPadding == null ? '0' : `-${borderPaddingTop}`,\n        bottom: borderPadding == null ? '0' : `-${borderPaddingBottom}`,\n        left: borderPadding == null ? '0' : `-${borderPaddingLeft}`,\n        right: borderPadding == null ? '0' : `-${borderPaddingRight}`,\n      },\n      ':after': {\n        ...defaultPreudoStyles,\n        borderWidth: focusOuterBorderWidth,\n        zIndex: sv.zIndexes.foreground,\n        borderColor: focusOuterBorderColor,\n        top:\n          borderPadding == null\n            ? `-${focusInnerBorderWidth}`\n            : `calc(0px - ${borderPaddingTop} - ${focusInnerBorderWidth})`,\n        bottom:\n          borderPadding == null\n            ? `-${focusInnerBorderWidth}`\n            : `calc(0px - ${borderPaddingBottom} - ${focusInnerBorderWidth})`,\n        left:\n          borderPadding == null\n            ? `-${focusInnerBorderWidth}`\n            : `calc(0px - ${borderPaddingLeft} - ${focusInnerBorderWidth})`,\n        right:\n          borderPadding == null\n            ? `-${focusInnerBorderWidth}`\n            : `calc(0px - ${borderPaddingRight} - ${focusInnerBorderWidth})`,\n      },\n    },\n  };\n};\n"],"file":"getBorderFocusStyles.js"}