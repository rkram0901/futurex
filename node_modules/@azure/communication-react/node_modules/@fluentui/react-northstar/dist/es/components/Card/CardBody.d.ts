import * as React from 'react';
import { FluentComponentStaticProps } from '../../types';
import { Accessibility } from '@fluentui/accessibility';
import { UIComponentProps, ChildrenComponentProps } from '../../utils';
import * as PropTypes from 'prop-types';
export interface CardBodyProps extends UIComponentProps, ChildrenComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     */
    accessibility?: Accessibility<never>;
    /** A body can be fitted, without any space above or below it. */
    fitted?: boolean;
}
export declare type CardBodyStylesProps = Pick<CardBodyProps, 'fitted'>;
export declare const cardBodyClassName = "ui-card__body";
/**
 * A CardBody is used to display data in Card body.
 */
export declare const CardBody: (<TExtendedElementType extends React.ElementType<any> = "div">(props: React.RefAttributes<HTMLDivElement> & Omit<import("@fluentui/react-bindings").PropsOfElement<TExtendedElementType>, "as" | keyof CardBodyProps> & {
    as?: TExtendedElementType;
} & CardBodyProps) => JSX.Element) & {
    propTypes?: React.WeakValidationMap<CardBodyProps> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
    contextTypes?: PropTypes.ValidationMap<any>;
    defaultProps?: Partial<CardBodyProps & {
        as: "div";
    }>;
    displayName?: string;
    readonly __PRIVATE_PROPS?: React.RefAttributes<HTMLDivElement> & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>> & {
        ref?: React.Ref<HTMLDivElement>;
    }, "as" | keyof CardBodyProps> & {
        as?: "div";
    } & CardBodyProps;
} & FluentComponentStaticProps<CardBodyProps>;
