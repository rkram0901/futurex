{"version":3,"sources":["components/TextArea/TextArea.tsx"],"names":["textAreaBehavior","React","PropTypes","commonPropTypes","createShorthandFactory","useAutoControlled","getElementType","useTelemetry","useUnhandledProps","useFluentContext","useAccessibility","useStyles","textAreaClassName","TextArea","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","disabled","accessibility","inverted","resize","fluid","className","design","styles","variables","error","defaultValue","value","initialValue","setValue","unhandledProps","handledProps","getA11yProps","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","handleChange","e","newValue","element","root","onChange","propTypes","createCommon","content","string","func","bool","oneOf","defaultProps","as","Object","keys","create","Component"],"mappings":"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","sourcesContent":["import { Accessibility, textAreaBehavior, TextAreaBehaviorProps } from '@fluentui/accessibility';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes, createShorthandFactory } from '../../utils';\nimport {\n  useAutoControlled,\n  getElementType,\n  useTelemetry,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TextAreaBehaviorProps>;\n\n  /** The default value of the text area. */\n  defaultValue?: string;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<TextAreaProps>;\n\n  /** The value of the text area. */\n  value?: string;\n\n  /** The text area becomes read-only. */\n  disabled?: boolean;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /** A textarea can be resized. */\n  resize?: 'none' | 'both' | 'horizontal' | 'vertical';\n\n  /** A textarea can take the width of its container. */\n  fluid?: boolean;\n\n  /** A text area can have error state. */\n  error?: boolean;\n\n  /** A text area can be required to be valid. */\n  required?: boolean;\n}\n\nexport type TextAreaStylesProps = Required<Pick<TextAreaProps, 'inverted' | 'resize' | 'fluid' | 'disabled' | 'error'>>;\n\nexport const textAreaClassName = 'ui-textarea';\n\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\nexport const TextArea = (React.forwardRef<HTMLTextAreaElement, TextAreaProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TextArea.displayName, context.telemetry);\n\n  setStart();\n\n  const { disabled, accessibility, inverted, resize, fluid, className, design, styles, variables, error } = props;\n\n  const [value, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    value: props.value,\n    initialValue: '',\n  });\n\n  const unhandledProps = useUnhandledProps(TextArea.handledProps, props);\n\n  const getA11yProps = useAccessibility<TextAreaBehaviorProps>(accessibility, {\n    debugName: TextArea.displayName,\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TextAreaStylesProps>(TextArea.displayName, {\n    className: textAreaClassName,\n    mapPropsToStyles: () => ({\n      inverted,\n      resize,\n      fluid,\n      disabled,\n      error,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n\n  const handleChange = (e: React.ChangeEvent | React.FormEvent) => {\n    const newValue = _.get(e, 'target.value');\n\n    _.invoke(props, 'onChange', e, { ...props, value: newValue });\n    setValue(newValue);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        value,\n        disabled,\n        ref,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    />\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'textarea', HTMLTextAreaElement, TextAreaProps> &\n  FluentComponentStaticProps<TextAreaProps>;\n\nTextArea.displayName = 'TextArea';\n\nTextArea.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n  fluid: PropTypes.bool,\n  error: PropTypes.bool,\n  resize: PropTypes.oneOf(['none', 'both', 'horizontal', 'vertical']),\n};\n\nTextArea.defaultProps = {\n  as: 'textarea',\n  accessibility: textAreaBehavior,\n};\n\nTextArea.handledProps = Object.keys(TextArea.propTypes) as any;\n\nTextArea.create = createShorthandFactory({\n  Component: TextArea,\n});\n"],"file":"TextArea.js"}