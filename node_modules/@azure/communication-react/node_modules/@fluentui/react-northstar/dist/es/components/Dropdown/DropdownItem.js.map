{"version":3,"sources":["components/Dropdown/DropdownItem.tsx"],"names":["customPropTypes","indicatorBehavior","React","PropTypes","getElementType","useUnhandledProps","useFluentContext","useStyles","useTelemetry","cx","createShorthandFactory","commonPropTypes","Image","Box","dropdownItemClassName","dropdownItemSlotClassNames","main","content","header","image","checkableIndicator","DropdownItem","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","active","accessibilityItemProps","className","design","isFromKeyboard","styles","checkable","selected","variables","mapPropsToStyles","hasContent","hasHeader","mapPropsToInlineStyles","rtl","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleClick","e","contentElement","create","defaultProps","headerElement","endMediaElement","accessibility","imageElement","avatar","media","element","root","as","propTypes","createCommon","children","object","bool","itemShorthand","shorthandAllowingChildren","disabled","itemShorthandWithoutJSX","onClick","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport cx from 'classnames';\n\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { ShorthandValue, ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport { Image, ImageProps } from '../Image/Image';\nimport { Box, BoxProps } from '../Box/Box';\n\nexport interface DropdownItemSlotClassNames {\n  content: string;\n  header: string;\n  image: string;\n  checkableIndicator: string;\n  main: string;\n}\n\nexport interface DropdownItemProps extends UIComponentProps<DropdownItemProps> {\n  /** A dropdown item can be active. */\n  active?: boolean;\n\n  /** Item's accessibility props. */\n  accessibilityItemProps?: any;\n\n  /** Item's content. */\n  content?: ShorthandValue<BoxProps>;\n\n  /** Item can show check indicator if selected. */\n  checkable?: boolean;\n\n  /** A slot for a checkable indicator. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown item can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** Item's header. */\n  header?: ShorthandValue<BoxProps>;\n\n  /** Item's image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** Indicated whether the item has been set active by keyboard. */\n  isFromKeyboard?: boolean;\n\n  /**\n   * Called on dropdown item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onClick?: ComponentEventHandler<DropdownItemProps>;\n\n  /** A dropdown item can be selected if single selection Dropdown is used. */\n  selected?: boolean;\n}\n\nexport const dropdownItemClassName = 'ui-dropdown__item';\nexport const dropdownItemSlotClassNames: DropdownItemSlotClassNames = {\n  main: `${dropdownItemClassName}__main`,\n  content: `${dropdownItemClassName}__content`,\n  header: `${dropdownItemClassName}__header`,\n  image: `${dropdownItemClassName}__image`,\n  checkableIndicator: `${dropdownItemClassName}__checkable-indicator`,\n};\n\n/**\n * A DropdownItem represents an option of Dropdown list.\n * Displays an item with optional rich media metadata.\n */\nexport const DropdownItem = (React.forwardRef<HTMLLIElement, DropdownItemProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DropdownItem.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    active,\n    accessibilityItemProps,\n    className,\n    content,\n    design,\n    header,\n    image,\n    isFromKeyboard,\n    styles,\n    checkable,\n    checkableIndicator,\n    selected,\n    variables,\n  } = props;\n\n  const { classes, styles: resolvedStyles } = useStyles(DropdownItem.displayName, {\n    className: dropdownItemClassName,\n    mapPropsToStyles: () => ({\n      active,\n      isFromKeyboard,\n      selected,\n      hasContent: !!content,\n      hasHeader: !!header,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DropdownItem.handledProps, props);\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const contentElement = Box.create(content, {\n    defaultProps: () => ({\n      className: dropdownItemSlotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n  const headerElement = Box.create(header, {\n    defaultProps: () => ({\n      className: dropdownItemSlotClassNames.header,\n      styles: resolvedStyles.header,\n    }),\n  });\n  const endMediaElement =\n    selected && checkable\n      ? Box.create(checkableIndicator, {\n          defaultProps: () => ({\n            className: dropdownItemSlotClassNames.checkableIndicator,\n            styles: resolvedStyles.checkableIndicator,\n            accessibility: indicatorBehavior,\n          }),\n        })\n      : null;\n  const imageElement = Box.create(\n    Image.create(image, {\n      defaultProps: () => ({\n        avatar: true,\n        className: dropdownItemSlotClassNames.image,\n        styles: resolvedStyles.image,\n      }),\n    }),\n    {\n      defaultProps: () => ({\n        className: dropdownItemSlotClassNames.image,\n        styles: resolvedStyles.media,\n      }),\n    },\n  );\n\n  const element = (\n    <ElementType\n      ref={ref}\n      className={classes.root}\n      onClick={handleClick}\n      {...accessibilityItemProps}\n      {...unhandledProps}\n    >\n      {imageElement}\n\n      <div className={cx(dropdownItemSlotClassNames.main, classes.main)}>\n        {headerElement}\n        {contentElement}\n      </div>\n\n      {endMediaElement}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'li', HTMLLIElement, DropdownItemProps> &\n  FluentComponentStaticProps<DropdownItemProps>;\n\nDropdownItem.displayName = 'DropdownItem';\n\nDropdownItem.defaultProps = {\n  as: 'li',\n  checkableIndicator: {},\n};\n\nDropdownItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  accessibilityItemProps: PropTypes.object,\n  active: PropTypes.bool,\n  content: customPropTypes.itemShorthand,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  disabled: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  isFromKeyboard: PropTypes.bool,\n  selected: PropTypes.bool,\n};\nDropdownItem.handledProps = Object.keys(DropdownItem.propTypes) as any;\n\nDropdownItem.create = createShorthandFactory({ Component: DropdownItem, mappedProp: 'header' });\n"],"file":"DropdownItem.js"}