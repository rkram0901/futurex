{"version":3,"sources":["components/Avatar/AvatarStatusIcon.tsx"],"names":["React","useFluentContext","useTelemetry","useStyles","useAccessibility","getElementType","useUnhandledProps","PropTypes","commonPropTypes","createShorthandFactory","avatarStatusIconClassName","AvatarStatusIcon","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","children","design","styles","variables","state","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","propTypes","createCommon","oneOf","Object","keys","defaultProps","as","create","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport { commonPropTypes, UIComponentProps, createShorthandFactory } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\n\nexport interface AvatarStatusIconProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type AvatarStatusIconStylesProps = Required<Pick<AvatarStatusIconProps, 'state'>>;\nexport const avatarStatusIconClassName = 'ui-avatar__statusicon';\n\n/**\n * A AvatarStatusIcon provides a status icon for the Avatar.\n */\nexport const AvatarStatusIcon = (React.forwardRef<HTMLSpanElement, AvatarStatusIconProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarStatusIcon.displayName, context.telemetry);\n  setStart();\n\n  const { className, children, design, styles, variables, state } = props;\n\n  const { classes } = useStyles<AvatarStatusIconStylesProps>(AvatarStatusIcon.displayName, {\n    className: avatarStatusIconClassName,\n    mapPropsToStyles: () => ({\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: AvatarStatusIcon.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarStatusIcon.handledProps, props);\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })}>{children}</ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, AvatarStatusIconProps> & FluentComponentStaticProps;\n\nAvatarStatusIcon.displayName = 'AvatarStatusIcon';\nAvatarStatusIcon.propTypes = {\n  ...commonPropTypes.createCommon(),\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nAvatarStatusIcon.handledProps = Object.keys(AvatarStatusIcon.propTypes) as any;\nAvatarStatusIcon.defaultProps = {\n  as: 'span',\n};\n\nAvatarStatusIcon.create = createShorthandFactory({ Component: AvatarStatusIcon });\n"],"file":"AvatarStatusIcon.js"}