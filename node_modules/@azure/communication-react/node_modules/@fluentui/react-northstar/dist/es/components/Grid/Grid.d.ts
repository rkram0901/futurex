import { Accessibility, GridBehaviorProps } from '@fluentui/accessibility';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { UIComponentProps, ChildrenComponentProps, ContentComponentProps } from '../../utils';
import { FluentComponentStaticProps } from '../../types';
export interface GridProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     * @available gridBehavior, gridHorizontalBehavior
     * */
    accessibility?: Accessibility<GridBehaviorProps>;
    /** The columns of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */
    columns?: string | number;
    /** The rows of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */
    rows?: string | number;
}
export declare const gridClassName = "ui-grid";
export declare type GridStylesProps = Pick<GridProps, 'columns' | 'rows'>;
/**
 * A Grid is a layout component that harmonizes negative space, by controlling both the row and column alignment.
 */
export declare const Grid: (<TExtendedElementType extends React.ElementType<any> = "div">(props: React.RefAttributes<HTMLDivElement> & Omit<import("@fluentui/react-bindings").PropsOfElement<TExtendedElementType>, "as" | keyof GridProps> & {
    as?: TExtendedElementType;
} & GridProps) => JSX.Element) & {
    propTypes?: React.WeakValidationMap<GridProps> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
    contextTypes?: PropTypes.ValidationMap<any>;
    defaultProps?: Partial<GridProps & {
        as: "div";
    }>;
    displayName?: string;
    readonly __PRIVATE_PROPS?: React.RefAttributes<HTMLDivElement> & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>> & {
        ref?: React.Ref<HTMLDivElement>;
    }, "as" | keyof GridProps> & {
        as?: "div";
    } & GridProps;
} & FluentComponentStaticProps<GridProps>;
