{"version":3,"sources":["components/Chat/ChatItem.tsx"],"names":["getElementType","useAccessibility","useFluentContext","useStyles","useTelemetry","useUnhandledProps","customPropTypes","PropTypes","React","childrenExist","commonPropTypes","createShorthandFactory","rtlTextContainer","Box","useChatContextSelectors","ChatItemContextProvider","chatItemClassName","chatItemSlotClassNames","message","gutter","ChatItem","forwardRef","inputProps","ref","context","displayName","telemetry","setStart","setEnd","chatProps","density","v","accessibility","behaviors","item","props","attached","children","className","contentPosition","design","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","renderContent","gutterElement","create","defaultProps","messageElement","ElementType","unhandledProps","handledProps","element","root","getAttributes","forElements","as","propTypes","createCommon","content","oneOfType","bool","oneOf","itemShorthand","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ForwardRefWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport {\n  ChildrenComponentProps,\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\nimport { useChatContextSelectors } from './chatContext';\nimport { ChatDensity } from './chatDensity';\nimport { ChatItemContextProvider } from './chatItemContext';\n\nexport interface ChatItemSlotClassNames {\n  message: string;\n  gutter: string;\n}\n\nexport const chatItemClassName = 'ui-chat__item';\nexport const chatItemSlotClassNames: ChatItemSlotClassNames = {\n  message: `${chatItemClassName}__message`,\n  gutter: `${chatItemClassName}__gutter`,\n};\n\nexport interface ChatItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n\n  /** Controls item's relation to other chat items. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Indicates whether the content is positioned at the start or the end. */\n  contentPosition?: 'start' | 'end';\n\n  /** Chat density. Is automatically set by the Chat. */\n  density?: ChatDensity;\n\n  /** Chat items can have a gutter. */\n  gutter?: ShorthandValue<BoxProps>;\n\n  /** Chat items can have a message. */\n  message?: ShorthandValue<BoxProps>;\n}\n\nexport type ChatItemStylesProps = Pick<ChatItemProps, 'attached' | 'contentPosition' | 'density'>;\n\n/**\n * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).\n */\nexport const ChatItem = (React.forwardRef<HTMLLIElement, ChatItemProps>((inputProps, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(ChatItem.displayName, context.telemetry);\n  setStart();\n\n  const chatProps = useChatContextSelectors({\n    density: v => v.density,\n    accessibility: v => v.behaviors.item,\n  });\n  const props = {\n    ...chatProps,\n    ...inputProps,\n  };\n\n  const {\n    accessibility,\n    attached,\n    children,\n    className,\n    contentPosition,\n    density,\n    design,\n    gutter,\n    message,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: ChatItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatItemStylesProps>(ChatItem.displayName, {\n    className: chatItemClassName,\n    mapPropsToStyles: () => ({\n      attached,\n      contentPosition,\n      density,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderContent = () => {\n    const gutterElement = Box.create(gutter, {\n      defaultProps: () =>\n        getA11Props('gutter', {\n          className: chatItemSlotClassNames.gutter,\n          styles: resolvedStyles.gutter,\n        }),\n    });\n    const messageElement = Box.create(message, {\n      defaultProps: () =>\n        getA11Props('message', {\n          className: chatItemSlotClassNames.message,\n          styles: resolvedStyles.message,\n        }),\n    });\n\n    return (\n      <ChatItemContextProvider value={{ attached }}>\n        {(contentPosition === 'start' || density === 'compact') && gutterElement}\n        {messageElement}\n        {contentPosition === 'end' && density === 'comfy' && gutterElement}\n      </ChatItemContextProvider>\n    );\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatItem.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'li', HTMLLIElement, ChatItemProps> & FluentComponentStaticProps<ChatItemProps>;\n\nChatItem.displayName = 'ChatItem';\n\nChatItem.defaultProps = {\n  as: 'li',\n  contentPosition: 'start',\n  attached: false,\n};\nChatItem.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  contentPosition: PropTypes.oneOf(['start', 'end']),\n  density: PropTypes.oneOf<ChatDensity>(['comfy', 'compact']),\n  gutter: customPropTypes.itemShorthand,\n  message: customPropTypes.itemShorthand,\n};\nChatItem.handledProps = Object.keys(ChatItem.propTypes) as any;\n\nChatItem.create = createShorthandFactory({ Component: ChatItem, mappedProp: 'message' });\n"],"file":"ChatItem.js"}