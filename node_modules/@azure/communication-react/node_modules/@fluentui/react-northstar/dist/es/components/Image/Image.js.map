{"version":3,"sources":["components/Image/Image.tsx"],"names":["imageBehavior","getElementType","useUnhandledProps","useAccessibility","useFluentContext","useStyles","useTelemetry","PropTypes","React","createShorthandFactory","commonPropTypes","imageClassName","Image","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","alt","ariaLabel","avatar","circular","className","design","fluid","styles","variables","getA11Props","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","result","root","defaultProps","as","propTypes","createCommon","children","content","bool","Object","keys","create","Component","mappedProp","allowsJSX"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributes, imageBehavior, ImageBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface ImageProps extends UIComponentProps, ImageBehaviorProps {\n  /** Alternative text. */\n  alt?: string;\n\n  'aria-label'?: AccessibilityAttributes['aria-label'];\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ImageBehaviorProps>;\n\n  /** An image may be formatted to appear inline with text as an avatar. */\n  avatar?: boolean;\n\n  /** An image can appear circular. */\n  circular?: boolean;\n\n  /** An image can take up the width of its container. */\n  fluid?: boolean;\n\n  /** Image source URL. */\n  src?: string;\n}\n\nexport type ImageStylesProps = Pick<ImageProps, 'avatar' | 'circular' | 'fluid'>;\nexport const imageClassName = 'ui-image';\n\n/**\n * An Image is a graphic representation of something.\n *\n * @accessibility\n * If image should be visible to screen readers, textual representation needs to be provided in 'alt' property.\n *\n * Other considerations:\n *  - when alt property is empty, then Narrator in scan mode navigates to image and narrates it as empty paragraph.\n *  - when image has role='presentation' then screen readers navigate to the element in scan/virtual mode. To avoid this, the attribute \"aria-hidden='true'\" is applied by the default image behavior.\n *  - when alt property is used in combination with aria-label, arialabbeledby or title, additional screen readers verification is needed as each screen reader handles this combination differently.\n */\nexport const Image = (React.forwardRef<HTMLImageElement, ImageProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Image.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    alt,\n    'aria-label': ariaLabel,\n    avatar,\n    circular,\n    className,\n    design,\n    fluid,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Image.displayName,\n    mapPropsToBehavior: () => ({\n      alt,\n      'aria-label': ariaLabel,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ImageStylesProps>(Image.displayName, {\n    className: imageClassName,\n    mapPropsToStyles: () => ({\n      avatar,\n      circular,\n      fluid,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Image.handledProps, props);\n\n  const result = <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })} />;\n\n  setEnd();\n\n  return result;\n}) as unknown) as ForwardRefWithAs<'img', HTMLImageElement, ImageProps> & FluentComponentStaticProps<ImageProps>;\n\nImage.displayName = 'Image';\nImage.defaultProps = {\n  as: 'img' as const,\n  accessibility: imageBehavior,\n};\n\nImage.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  avatar: PropTypes.bool,\n  circular: PropTypes.bool,\n  fluid: PropTypes.bool,\n};\n\nImage.handledProps = Object.keys(Image.propTypes) as any;\n\nImage.create = createShorthandFactory({ Component: Image, mappedProp: 'src', allowsJSX: false });\n"],"file":"Image.js"}