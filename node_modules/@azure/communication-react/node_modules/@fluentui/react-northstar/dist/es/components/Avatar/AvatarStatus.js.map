{"version":3,"sources":["components/Avatar/AvatarStatus.tsx"],"names":["React","useFluentContext","useTelemetry","useStyles","useAccessibility","getElementType","useUnhandledProps","commonPropTypes","createShorthandFactory","createShorthand","customPropTypes","PropTypes","statusBehavior","avatarStatusBehavior","AvatarStatusIcon","statusClassName","avatarStatusClassName","AvatarStatus","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","color","icon","size","state","design","styles","variables","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","iconElement","defaultProps","element","root","propTypes","createCommon","children","content","string","shorthandAllowingChildren","oneOf","Object","keys","as","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport { commonPropTypes, SizeValue, UIComponentProps, createShorthandFactory, createShorthand } from '../../utils';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Accessibility, statusBehavior as avatarStatusBehavior, StatusBehaviorProps } from '@fluentui/accessibility';\nimport { AvatarStatusIcon, AvatarStatusIconProps } from './AvatarStatusIcon';\nimport { statusClassName } from '../Status/Status';\n\nexport interface AvatarStatusProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<StatusBehaviorProps>;\n\n  /** A custom color. */\n  color?: string;\n\n  /** Shorthand for the icon, to provide customizing status */\n  icon?: ShorthandValue<AvatarStatusIconProps>;\n\n  /** Size multiplier */\n  size?: SizeValue;\n\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type AvatarStatusStylesProps = Required<Pick<AvatarStatusProps, 'color' | 'size' | 'state'>>;\n// update in upcoming breaking change and enable a unit test\nexport const avatarStatusClassName = statusClassName;\n\n/**\n * A AvatarStatus provides a status for the Avatar.\n */\nexport const AvatarStatus = (React.forwardRef<HTMLSpanElement, AvatarStatusProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarStatus.displayName, context.telemetry);\n  setStart();\n\n  const { className, color, icon, size, state, design, styles, variables } = props;\n  const { classes } = useStyles<AvatarStatusStylesProps>(AvatarStatus.displayName, {\n    className: avatarStatusClassName,\n    mapPropsToStyles: () => ({\n      color,\n      size,\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: AvatarStatus.displayName,\n    rtl: context.rtl,\n  });\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarStatus.handledProps, props);\n\n  const iconElement = createShorthand(\n    AvatarStatusIcon,\n    icon as ShorthandValue<AvatarStatusIconProps & { as: 'span' }>,\n    {\n      defaultProps: () => ({\n        state,\n      }),\n    },\n  );\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })}>\n      {iconElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, AvatarStatusProps> & FluentComponentStaticProps;\n\nAvatarStatus.displayName = 'AvatarStatus';\nAvatarStatus.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nAvatarStatus.handledProps = Object.keys(AvatarStatus.propTypes) as any;\nAvatarStatus.defaultProps = {\n  accessibility: avatarStatusBehavior,\n  as: 'span',\n  size: 'medium',\n  state: 'unknown',\n};\n\nAvatarStatus.create = createShorthandFactory({ Component: AvatarStatus, mappedProp: 'state' });\n"],"file":"AvatarStatus.js"}