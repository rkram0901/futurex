{"version":3,"sources":["components/Chat/Chat.tsx"],"names":["chatBehavior","getElementType","useAccessibility","useFluentContext","useStyles","useTelemetry","useUnhandledProps","customPropTypes","PropTypes","React","childrenExist","commonPropTypes","createShorthandFactory","rtlTextContainer","ChatContextProvider","defaultChatDensity","ChatItem","ChatMessage","ChatMessageDetails","ChatMessageHeader","ChatMessageReadStatus","chatClassName","chatSlotClassNames","item","Chat","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","density","design","items","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","childBehaviors","contextProps","behaviors","message","element","unstable_wrapWithFocusZone","root","getAttributes","forElements","create","defaultProps","as","propTypes","createCommon","content","arrayOf","itemShorthand","oneOf","Object","keys","Item","Message","MessageHeader","MessageDetails","MessageReadStatus","Component"],"mappings":"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","sourcesContent":["import { Accessibility, chatBehavior, ChatBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ForwardRefWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { FluentComponentStaticProps, ShorthandCollection } from '../../types';\nimport {\n  ChildrenComponentProps,\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport { ChatContextProvider, ChatContextValue } from './chatContext';\nimport { ChatDensity, defaultChatDensity } from './chatDensity';\nimport { ChatItem, ChatItemProps } from './ChatItem';\nimport { ChatMessage } from './ChatMessage';\nimport { ChatMessageDetails } from './ChatMessageDetails';\nimport { ChatMessageHeader } from './ChatMessageHeader';\nimport { ChatMessageReadStatus } from './ChatMessageReadStatus';\n\nexport interface ChatSlotClassNames {\n  item: string;\n}\n\nexport interface ChatProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatBehaviorProps>;\n\n  /** Chat density. */\n  density?: ChatDensity;\n\n  /** Shorthand array of the items inside the chat. */\n  items?: ShorthandCollection<ChatItemProps>;\n}\n\nexport type ChatStylesProps = Pick<ChatProps, 'density'>;\nexport const chatClassName = 'ui-chat';\nexport const chatSlotClassNames: ChatSlotClassNames = {\n  item: `${chatClassName}__item`,\n};\n\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\nexport const Chat = (React.forwardRef<HTMLUListElement, ChatProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Chat.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, density, design, items, styles, variables } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Chat.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ChatStylesProps>(Chat.displayName, {\n    className: chatClassName,\n    mapPropsToStyles: () => ({ density }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Chat.handledProps, props);\n\n  const childBehaviors = accessibility && (accessibility as Accessibility<ChatProps>)(props).childBehaviors;\n\n  const contextProps: ChatContextValue = {\n    density,\n    behaviors: {\n      item: childBehaviors?.item,\n      message: childBehaviors?.message,\n    },\n  };\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      <ChatContextProvider value={contextProps}>\n        {childrenExist(children)\n          ? children\n          : _.map(items, item =>\n              ChatItem.create(item, {\n                defaultProps: () => ({ className: chatSlotClassNames.item }),\n              }),\n            )}\n      </ChatContextProvider>\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'ul', HTMLUListElement, ChatProps> &\n  FluentComponentStaticProps<ChatProps> & {\n    Item: typeof ChatItem;\n    Message: typeof ChatMessage;\n    MessageDetails: typeof ChatMessageDetails;\n    MessageReadStatus: typeof ChatMessageReadStatus;\n    MessageHeader: typeof ChatMessageHeader;\n  };\n\nChat.displayName = 'Chat';\n\nChat.defaultProps = {\n  accessibility: chatBehavior,\n  as: 'ul',\n  density: defaultChatDensity,\n};\nChat.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: PropTypes.arrayOf(customPropTypes.itemShorthand),\n  density: PropTypes.oneOf<ChatDensity>(['comfy', 'compact']),\n};\nChat.handledProps = Object.keys(Chat.propTypes) as any;\n\nChat.Item = ChatItem;\nChat.Message = ChatMessage;\nChat.MessageHeader = ChatMessageHeader;\nChat.MessageDetails = ChatMessageDetails;\nChat.MessageReadStatus = ChatMessageReadStatus;\n\nChat.create = createShorthandFactory({ Component: Chat });\n"],"file":"Chat.js"}