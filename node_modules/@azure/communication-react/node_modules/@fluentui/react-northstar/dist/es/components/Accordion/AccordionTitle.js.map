{"version":3,"sources":["components/Accordion/AccordionTitle.tsx"],"names":["accordionTitleBehavior","Ref","customPropTypes","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","Box","getElementType","useTelemetry","useFluentContext","useUnhandledProps","useAccessibility","useStyles","accordionTitleClassName","accordionTitleSlotClassNames","contentWrapper","AccordionTitle","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","contentRef","children","content","indicator","disabled","accessibility","canBeCollapsed","as","active","accordionContentId","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","debugName","actionHandlers","performClick","e","preventDefault","stopPropagation","handleClick","mapPropsToBehavior","hasContent","String","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","handleFocus","handleWrapperOverrides","predefinedProps","onFocus","onClick","contentWrapperElement","create","defaultProps","overrideProps","element","getAttributes","forElements","root","shorthandConfig","mappedProp","propTypes","createCommon","string","bool","wrapperShorthand","index","number","func","shorthandAllowingChildren","Object","keys","Component"],"mappings":"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","sourcesContent":["import { accordionTitleBehavior, Accessibility, AccordionTitleBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  getElementType,\n  useTelemetry,\n  useFluentContext,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionTitleSlotClassNames {\n  contentWrapper: string;\n}\n\nexport interface AccordionTitleProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionTitleBehaviorProps>;\n\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n\n  /** Shorthand for the content wrapper element. */\n  contentWrapper?: ShorthandValue<BoxProps>;\n\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** AccordionTitle index inside Accordion. */\n  index?: number;\n\n  /** Ref to the clickable element that contains the title. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionTitleProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AccordionTitleProps>;\n\n  /** Shorthand for the active indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n}\n\nexport const accordionTitleClassName = 'ui-accordion__title';\nexport const accordionTitleSlotClassNames: AccordionTitleSlotClassNames = {\n  contentWrapper: `${accordionTitleClassName}__content-wrapper`,\n};\n\nexport type AccordionTitleStylesProps = Required<Pick<AccordionTitleProps, 'disabled' | 'active'>> & {\n  content: boolean;\n};\n\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\nexport const AccordionTitle = (React.forwardRef<HTMLDListElement, AccordionTitleProps & { as: React.ReactNode }>(\n  (props, ref) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(AccordionTitle.displayName, context.telemetry);\n    setStart();\n    const {\n      contentRef,\n      children,\n      content,\n      indicator,\n      contentWrapper,\n      disabled,\n      accessibility,\n      canBeCollapsed,\n      as,\n      active,\n      accordionContentId,\n      className,\n      design,\n      styles,\n      variables,\n    } = props;\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(AccordionTitle.handledProps, props);\n\n    const getA11yProps = useAccessibility<AccordionTitleBehaviorProps>(accessibility, {\n      debugName: AccordionTitle.displayName,\n      actionHandlers: {\n        performClick: e => {\n          e.preventDefault();\n          e.stopPropagation();\n          handleClick(e);\n        },\n      },\n      mapPropsToBehavior: () => ({\n        hasContent: !!content,\n        canBeCollapsed,\n        as: String(as),\n        active,\n        disabled,\n        accordionContentId,\n      }),\n      rtl: context.rtl,\n    });\n\n    const { classes, styles: resolvedStyles } = useStyles<AccordionTitleStylesProps>(AccordionTitle.displayName, {\n      className: accordionTitleClassName,\n      mapPropsToStyles: () => ({\n        disabled,\n        content: !!content,\n        active,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n    });\n\n    const handleClick = (e: React.SyntheticEvent) => {\n      if (!disabled) {\n        _.invoke(props, 'onClick', e, props);\n      }\n    };\n\n    const handleFocus = (e: React.SyntheticEvent) => {\n      e.stopPropagation();\n      _.invoke(props, 'onFocus', e, props);\n    };\n\n    const handleWrapperOverrides = predefinedProps => ({\n      onFocus: (e: React.FocusEvent) => {\n        handleFocus(e);\n        _.invoke(predefinedProps, 'onFocus', e, props);\n      },\n      onClick: (e: React.MouseEvent) => {\n        handleClick(e);\n        _.invoke(predefinedProps, 'onClick', e, props);\n      },\n    });\n\n    const contentWrapperElement = (\n      <Ref innerRef={contentRef}>\n        {Box.create(contentWrapper, {\n          defaultProps: () =>\n            getA11yProps('content', {\n              className: accordionTitleSlotClassNames.contentWrapper,\n              styles: resolvedStyles.contentWrapper,\n            }),\n          overrideProps: predefinedProps => ({\n            children: (\n              <>\n                {Box.create(indicator, {\n                  defaultProps: () =>\n                    getA11yProps('indicator', {\n                      styles: resolvedStyles.indicator,\n                    }),\n                })}\n                {Box.create(content, {\n                  defaultProps: () => ({\n                    styles: resolvedStyles.content,\n                  }),\n                })}\n              </>\n            ),\n            ...handleWrapperOverrides(predefinedProps),\n          }),\n        })}\n      </Ref>\n    );\n\n    const element = (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...getA11yProps('root', {\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {childrenExist(children) ? children : contentWrapperElement}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n) as unknown) as ForwardRefWithAs<'div', HTMLDListElement, AccordionTitleProps> &\n  FluentComponentStaticProps<AccordionTitleProps>;\n\nAccordionTitle.displayName = 'AccordionTitle';\n\nAccordionTitle.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionTitle.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  accordionContentId: PropTypes.string,\n  active: PropTypes.bool,\n  contentRef: customPropTypes.ref,\n  contentWrapper: customPropTypes.wrapperShorthand,\n  canBeCollapsed: PropTypes.bool,\n  disabled: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  indicator: customPropTypes.shorthandAllowingChildren,\n};\n\nAccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes) as any;\n\nAccordionTitle.defaultProps = {\n  accessibility: accordionTitleBehavior,\n  as: 'div',\n  contentRef: _.noop,\n  indicator: {},\n  contentWrapper: {},\n};\n\nAccordionTitle.create = createShorthandFactory({ Component: AccordionTitle, mappedProp: 'content' });\n"],"file":"AccordionTitle.js"}