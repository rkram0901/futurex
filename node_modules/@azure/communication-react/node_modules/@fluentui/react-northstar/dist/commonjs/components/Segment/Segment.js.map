{"version":3,"sources":["components/Segment/Segment.tsx"],"names":["segmentClassName","Segment","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","children","content","color","inverted","disabled","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","element","unstable_wrapWithFocusZone","root","rtlTextContainer","getAttributes","forElements","Box","create","propTypes","commonPropTypes","createCommon","PropTypes","bool","Object","keys","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ColorComponentProps,\n  createShorthandFactory,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  useTelemetry,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useUnhandledProps,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface SegmentProps\n  extends UIComponentProps<SegmentProps>,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** An segment can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted?: boolean;\n}\n\nexport type SegmentStylesProps = Required<Pick<SegmentProps, 'color' | 'inverted' | 'disabled'>>;\n\nexport const segmentClassName = 'ui-segment';\n\n/**\n * A Segment visually groups related content.\n */\nexport const Segment = (React.forwardRef<HTMLDivElement, SegmentProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Segment.displayName, context.telemetry);\n  setStart();\n  const { children, content, color, inverted, disabled, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Segment.handledProps, props);\n\n  const getA11yProps = useAccessibility<never>(props.accessibility, {\n    debugName: Segment.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<SegmentStylesProps>(Segment.displayName, {\n    className: segmentClassName,\n    mapPropsToStyles: () => ({\n      color,\n      inverted,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : Box.create(content)}\n    </ElementType>,\n  );\n\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, SegmentProps> & FluentComponentStaticProps<SegmentProps>;\n\nSegment.displayName = 'Segment';\n\nSegment.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n    color: true,\n  }),\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n};\nSegment.handledProps = Object.keys(Segment.propTypes) as any;\n\nSegment.create = createShorthandFactory({\n  Component: Segment,\n});\n"],"file":"Segment.js"}