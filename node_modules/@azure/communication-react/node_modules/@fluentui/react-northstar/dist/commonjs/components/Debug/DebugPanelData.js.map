{"version":3,"sources":["components/Debug/DebugPanelData.tsx"],"names":["DebugPanelData","props","data","indent","highlightKey","overrides","comments","commentKeyPredicate","isValidComment","JSON","stringify","Object","keys","map","key","idx","value","comment","highlight","overridden","background","repeat","textDecoration","color"],"mappings":";;;;;AAAA;;AACA;;;;;;AAWO,IAAMA,cAA6C,GAAG,SAAhDA,cAAgD,CAAAC,KAAK,EAAI;AACpE,MAAQC,IAAR,GAAqFD,KAArF,CAAQC,IAAR;AAAA,sBAAqFD,KAArF,CAAcE,MAAd;AAAA,MAAcA,MAAd,8BAAuB,CAAvB;AAAA,MAA0BC,YAA1B,GAAqFH,KAArF,CAA0BG,YAA1B;AAAA,MAAwCC,SAAxC,GAAqFJ,KAArF,CAAwCI,SAAxC;AAAA,MAAmDC,QAAnD,GAAqFL,KAArF,CAAmDK,QAAnD;AAAA,MAA6DC,mBAA7D,GAAqFN,KAArF,CAA6DM,mBAA7D;AAEA,MAAMC,cAAc,GAAG,OAAOF,QAAP,KAAoB,QAApB,IAAgCC,mBAAhC,IAAuDA,mBAAmB,CAACD,QAAD,CAAjG;;AAEA,MAAI,OAAOJ,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAOM,cAAc,gBAAG;AAAM,MAAA,KAAK,EAAEF;AAAb,mBAAH,gBAA6C,8CAAlE;AACD;;AAED,MAAIJ,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAP,KAAgB,QAArC,EAA+C;AAC7C,WAAOM,cAAc,gBAAG;AAAM,MAAA,KAAK,EAAEF;AAAb,OAAwBG,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAxB,CAAH,gBAA0D,kCAAOO,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAP,CAA/E;AACD;;AAED,sBACE,0CACG,GADH,EAEGS,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,GAAlB,CAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,QAAMC,KAAK,GAAGd,IAAI,CAACY,GAAD,CAAlB;AAEA,QAAMG,OAAO,GAAGX,QAAQ,IAAIA,QAAQ,CAACQ,GAAD,CAApC;AAEA,QAAMI,SAAS,GAAG,iBAAKhB,IAAL,EAAWY,GAAX,EAAgBV,YAAhB,CAAlB;AACA,QAAMe,UAAU,GAAG,yBAAajB,IAAb,EAAmBY,GAAnB,EAAwBT,SAAxB,CAAnB;AAEA,wBACE;AAAK,MAAA,GAAG,EAAES;AAAV,oBACE;AAAM,MAAA,KAAK,EAAE;AAAEM,QAAAA,UAAU,EAAEF,SAAS,GAAG,kBAAH,GAAwB;AAA/C;AAAb,OACG,IAAIG,MAAJ,CAAWlB,MAAX,CADH,eAEE;AAAM,MAAA,KAAK,EAAE;AAAEmB,QAAAA,cAAc,EAAEH,UAAU,GAAG,cAAH,GAAoB;AAAhD;AAAb,oBACE;AAAM,MAAA,KAAK,EAAE;AAAEI,QAAAA,KAAK,EAAE,OAAOP,KAAP,KAAiB,QAAjB,GAA4B,MAA5B,GAAqC;AAA9C;AAAb,OAAyEF,GAAzE,CADF,EAEG,IAFH,eAGE,oBAAC,cAAD;AACE,MAAA,IAAI,EAAEE,KADR;AAEE,MAAA,QAAQ,EAAEC,OAFZ;AAGE,MAAA,mBAAmB,EAAEV,mBAHvB;AAIE,MAAA,MAAM,EAAEJ,MAAM,GAAG,CAJnB;AAKE,MAAA,SAAS,EAAEE,SAAS,GAAGA,SAAS,CAACS,GAAD,CAAZ,GAAoB,IAL1C;AAME,MAAA,YAAY,EAAEV;AANhB,MAHF,CAFF,EAcG,GAdH,CADF,CADF;AAoBD,GA5BA,CAFH,GA+BMD,MAAM,GAAG,CAAT,GAAa,IAAIkB,MAAJ,CAAWlB,MAAM,GAAG,CAApB,CAAb,GAAsC,EA/B5C,QADF;AAmCD,CAhDM","sourcesContent":["import * as React from 'react';\nimport { find, isOverridden } from './utils';\n\ninterface DebugPanelDataProps {\n  data: any;\n  overrides?: any;\n  comments?: any;\n  indent?: number;\n  highlightKey?: string;\n  commentKeyPredicate?: (val: any) => boolean;\n}\n\nexport const DebugPanelData: React.FC<DebugPanelDataProps> = props => {\n  const { data, indent = 2, highlightKey, overrides, comments, commentKeyPredicate } = props;\n\n  const isValidComment = typeof comments === 'string' && commentKeyPredicate && commentKeyPredicate(comments);\n\n  if (typeof data === 'undefined') {\n    return isValidComment ? <abbr title={comments}>undefined</abbr> : <span>undefined</span>;\n  }\n\n  if (data === null || typeof data !== 'object') {\n    return isValidComment ? <abbr title={comments}>{JSON.stringify(data)}</abbr> : <span>{JSON.stringify(data)}</span>;\n  }\n\n  return (\n    <>\n      {'{'}\n      {Object.keys(data).map((key, idx) => {\n        const value = data[key];\n\n        const comment = comments && comments[key];\n\n        const highlight = find(data, key, highlightKey);\n        const overridden = isOverridden(data, key, overrides);\n\n        return (\n          <div key={key}>\n            <span style={{ background: highlight ? 'rgb(255,255,224)' : '' }}>\n              {' '.repeat(indent)}\n              <span style={{ textDecoration: overridden ? 'line-through' : 'none' }}>\n                <span style={{ color: typeof value === 'object' ? 'grey' : '#b82519' }}>{key}</span>\n                {': '}\n                <DebugPanelData\n                  data={value}\n                  comments={comment}\n                  commentKeyPredicate={commentKeyPredicate}\n                  indent={indent + 2}\n                  overrides={overrides ? overrides[key] : null}\n                  highlightKey={highlightKey}\n                />\n              </span>\n              {','}\n            </span>\n          </div>\n        );\n      })}\n      {`${indent > 2 ? ' '.repeat(indent - 2) : ''}}`}\n    </>\n  );\n};\n"],"file":"DebugPanelData.js"}