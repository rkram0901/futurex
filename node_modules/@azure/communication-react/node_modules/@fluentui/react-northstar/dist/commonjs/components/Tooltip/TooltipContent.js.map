{"version":3,"sources":["components/Tooltip/TooltipContent.tsx"],"names":["tooltipContentClassName","TooltipContent","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","open","placement","pointing","pointerRef","styles","variables","subtle","getA11Props","debugName","rtl","mapPropsToStyles","basePlacement","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","rtlTextContainer","getAttributes","forElements","pointer","propTypes","commonPropTypes","createCommon","PropTypes","oneOf","bool","customPropTypes","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PopperJs from '@popperjs/core';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\n\nimport { getBasePlacement, PopperChildrenProps } from '../../utils/positioner';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface TooltipContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** An actual placement value from Popper. */\n  placement?: PopperChildrenProps['placement'];\n\n  /** Defines whether tooltip is displayed. */\n  open?: boolean;\n\n  /** A tooltip can show a pointer to trigger. */\n  pointing?: boolean;\n\n  /** A ref to a pointer element. */\n  pointerRef?: React.Ref<HTMLDivElement>;\n\n  /** Defines wether tooltip is subtle  */\n  subtle?: boolean;\n}\n\nexport type TooltipContentStylesProps = Required<Pick<TooltipContentProps, 'pointing' | 'open' | 'subtle'>> & {\n  basePlacement: PopperJs.BasePlacement;\n};\n\nexport const tooltipContentClassName = 'ui-tooltip__content';\n\n/**\n * A TooltipContent contains the content of a Tooltip component.\n */\nexport const TooltipContent = (React.forwardRef<HTMLDivElement, TooltipContentProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TooltipContent.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    open,\n    placement,\n    pointing,\n    pointerRef,\n    styles,\n    variables,\n    subtle,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TooltipContent.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TooltipContentStylesProps>(TooltipContent.displayName, {\n    className: tooltipContentClassName,\n    mapPropsToStyles: () => ({\n      basePlacement: getBasePlacement(placement, context.rtl),\n      open,\n      pointing,\n      subtle,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TooltipContent.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {open && pointing && <div className={classes.pointer} ref={pointerRef} />}\n\n      <div {...getA11Props('content', { className: classes.content })}>\n        {childrenExist(children) ? children : content}\n      </div>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, TooltipContentProps> &\n  FluentComponentStaticProps<TooltipContentProps>;\n\nTooltipContent.displayName = 'TooltipContent';\n\nTooltipContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  placement: PropTypes.oneOf<PopperJs.Placement>([\n    'auto-start',\n    'auto',\n    'auto-end',\n    'top-start',\n    'top',\n    'top-end',\n    'right-start',\n    'right',\n    'right-end',\n    'bottom-end',\n    'bottom',\n    'bottom-start',\n    'left-end',\n    'left',\n    'left-start',\n  ]),\n  pointing: PropTypes.bool,\n  pointerRef: customPropTypes.ref,\n  subtle: PropTypes.bool,\n};\nTooltipContent.handledProps = Object.keys(TooltipContent.propTypes) as any;\n\nTooltipContent.create = createShorthandFactory({ Component: TooltipContent, mappedProp: 'content' });\n"],"file":"TooltipContent.js"}