"use strict";

exports.__esModule = true;
exports.avatarIconClassName = exports.AvatarIcon = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _utils = require("../../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var avatarIconClassName = 'ui-avatar__icon';
/**
 * A AvatarIcon provides a status icon for the Avatar.
 */

exports.avatarIconClassName = avatarIconClassName;
var AvatarIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(AvatarIcon.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var className = props.className,
      children = props.children,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      size = props.size,
      square = props.square,
      content = props.content;

  var _useStyles = (0, _reactBindings.useStyles)(AvatarIcon.displayName, {
    className: avatarIconClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        size: size,
        square: square
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var getA11Props = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: AvatarIcon.displayName,
    rtl: context.rtl
  });
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(AvatarIcon.handledProps, props);
  var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root,
    ref: ref
  }, unhandledProps)), (0, _utils.childrenExist)(children) ? children : content);
  setEnd();
  return element;
});
exports.AvatarIcon = AvatarIcon;
AvatarIcon.displayName = 'AvatarIcon';
AvatarIcon.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  square: PropTypes.bool,
  size: customPropTypes.size
});
AvatarIcon.handledProps = Object.keys(AvatarIcon.propTypes);
AvatarIcon.defaultProps = {
  as: 'span'
};
AvatarIcon.shorthandConfig = {
  mappedProp: 'content'
};
//# sourceMappingURL=AvatarIcon.js.map
