{"version":3,"sources":["components/Accordion/AccordionContent.tsx"],"names":["accordionContentClassName","AccordionContent","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","children","content","accordionTitleId","active","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","mapPropsToBehavior","rtl","handleClick","e","mapPropsToStyles","mapPropsToInlineStyles","classes","element","root","onClick","rtlTextContainer","getAttributes","forElements","shorthandConfig","mappedProp","propTypes","commonPropTypes","createCommon","PropTypes","string","bool","func","defaultProps","accordionContentBehavior","as","Object","keys","create","Component"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAGA;;AAWA;;;;;;AA+BO,IAAMA,yBAAyB,GAAG,uBAAlC;;;AAIP;AACA;AACA;AACO,IAAMC,gBAAgB,gBAAIC,KAAK,CAACC,UAAN,CAA0D,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACzG,MAAMC,OAAO,GAAG,sCAAhB;;AACA,sBAA6B,iCAAaL,gBAAgB,CAACM,WAA9B,EAA2CD,OAAO,CAACE,SAAnD,CAA7B;AAAA,MAAQC,QAAR,iBAAQA,QAAR;AAAA,MAAkBC,MAAlB,iBAAkBA,MAAlB;;AAEAD,EAAAA,QAAQ;AACR,MAAQE,QAAR,GAA8FP,KAA9F,CAAQO,QAAR;AAAA,MAAkBC,OAAlB,GAA8FR,KAA9F,CAAkBQ,OAAlB;AAAA,MAA2BC,gBAA3B,GAA8FT,KAA9F,CAA2BS,gBAA3B;AAAA,MAA6CC,MAA7C,GAA8FV,KAA9F,CAA6CU,MAA7C;AAAA,MAAqDC,SAArD,GAA8FX,KAA9F,CAAqDW,SAArD;AAAA,MAAgEC,MAAhE,GAA8FZ,KAA9F,CAAgEY,MAAhE;AAAA,MAAwEC,MAAxE,GAA8Fb,KAA9F,CAAwEa,MAAxE;AAAA,MAAgFC,SAAhF,GAA8Fd,KAA9F,CAAgFc,SAAhF;AACA,MAAMC,WAAW,GAAG,mCAAef,KAAf,CAApB;AACA,MAAMgB,cAAc,GAAG,sCAAkBnB,gBAAgB,CAACoB,YAAnC,EAAiDjB,KAAjD,CAAvB;AAEA,MAAMkB,YAAY,GAAG,qCAAiBlB,KAAK,CAACmB,aAAvB,EAAsC;AACzDC,IAAAA,SAAS,EAAEvB,gBAAgB,CAACM,WAD6B;AAEzDkB,IAAAA,kBAAkB,EAAE;AAAA,aAAO;AACzBZ,QAAAA,gBAAgB,EAAhBA;AADyB,OAAP;AAAA,KAFqC;AAKzDa,IAAAA,GAAG,EAAEpB,OAAO,CAACoB;AAL4C,GAAtC,CAArB;;AAOA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAA6B;AAC/C,0BAASxB,KAAT,EAAgB,SAAhB,EAA2BwB,CAA3B,EAA8BxB,KAA9B;AACD,GAFD;;AAIA,mBAAoB,8BAAuCH,gBAAgB,CAACM,WAAxD,EAAqE;AACvFQ,IAAAA,SAAS,EAAEf,yBAD4E;AAEvF6B,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBf,QAAAA,MAAM,EAANA;AADuB,OAAP;AAAA,KAFqE;AAKvFgB,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7Bf,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KAL+D;AAWvFQ,IAAAA,GAAG,EAAEpB,OAAO,CAACoB;AAX0E,GAArE,CAApB;AAAA,MAAQK,OAAR,cAAQA,OAAR;;AAcA,MAAMC,OAAO,gBACX,oBAAC,WAAD,6BACMV,YAAY,CAAC,MAAD;AACdP,IAAAA,SAAS,EAAEgB,OAAO,CAACE,IADL;AAEdC,IAAAA,OAAO,EAAEP,WAFK;AAGdtB,IAAAA,GAAG,EAAHA;AAHc,KAIXe,cAJW,EADlB,EAOMe,wBAAiBC,aAAjB,CAA+B;AAAEC,IAAAA,WAAW,EAAE,CAAC1B,QAAD,EAAWC,OAAX;AAAf,GAA/B,CAPN,GASG,0BAAcD,QAAd,IAA0BA,QAA1B,GAAqCC,OATxC,CADF;AAcAF,EAAAA,MAAM;AAEN,SAAOsB,OAAP;AACD,CAnDgC,CAA1B;;AAsDP/B,gBAAgB,CAACM,WAAjB,GAA+B,kBAA/B;AAEAN,gBAAgB,CAACqC,eAAjB,GAAmC;AACjCC,EAAAA,UAAU,EAAE;AADqB,CAAnC;AAIAtC,gBAAgB,CAACuC,SAAjB,qBACKC,uBAAgBC,YAAhB,EADL;AAEE7B,EAAAA,gBAAgB,EAAE8B,SAAS,CAACC,MAF9B;AAGE9B,EAAAA,MAAM,EAAE6B,SAAS,CAACE,IAHpB;AAIEX,EAAAA,OAAO,EAAES,SAAS,CAACG;AAJrB;AAOA7C,gBAAgB,CAAC8C,YAAjB,GAAgC;AAC9BxB,EAAAA,aAAa,EAAEyB,uCADe;AAE9BC,EAAAA,EAAE,EAAE;AAF0B,CAAhC;AAKAhD,gBAAgB,CAACoB,YAAjB,GAAgC6B,MAAM,CAACC,IAAP,CAAYlD,gBAAgB,CAACuC,SAA7B,CAAhC;AAEAvC,gBAAgB,CAACmD,MAAjB,GAA0B,mCAAuB;AAC/CC,EAAAA,SAAS,EAAEpD,gBADoC;AAE/CsC,EAAAA,UAAU,EAAE;AAFmC,CAAvB,CAA1B","sourcesContent":["import { accordionContentBehavior, Accessibility, AccordionContentBehaviorProps } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\n\nimport {\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useAccessibility,\n  useUnhandledProps,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionContentBehaviorProps>;\n\n  /** Id of the title it belongs to. */\n  accordionTitleId?: string;\n\n  /** Whether or not the content is visible. */\n  active?: boolean;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionContentProps>;\n}\n\nexport const accordionContentClassName = 'ui-accordion__content';\n\nexport type AccordionContentStylesProps = Required<Pick<AccordionContentProps, 'active'>>;\n\n/**\n * An AccordionContent displays content hosted in an Accordion.\n */\nexport const AccordionContent = (React.forwardRef<HTMLDListElement, AccordionContentProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AccordionContent.displayName, context.telemetry);\n\n  setStart();\n  const { children, content, accordionTitleId, active, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AccordionContent.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: AccordionContent.displayName,\n    mapPropsToBehavior: () => ({\n      accordionTitleId,\n    }),\n    rtl: context.rtl,\n  });\n  const handleClick = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const { classes } = useStyles<AccordionContentStylesProps>(AccordionContent.displayName, {\n    className: accordionContentClassName,\n    mapPropsToStyles: () => ({\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ref,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDListElement, AccordionContentProps> &\n  FluentComponentStaticProps<AccordionContentProps>;\n\nAccordionContent.displayName = 'AccordionContent';\n\nAccordionContent.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  accordionTitleId: PropTypes.string,\n  active: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nAccordionContent.defaultProps = {\n  accessibility: accordionContentBehavior,\n  as: 'div',\n};\n\nAccordionContent.handledProps = Object.keys(AccordionContent.propTypes) as any;\n\nAccordionContent.create = createShorthandFactory({\n  Component: AccordionContent,\n  mappedProp: 'content',\n});\n"],"file":"AccordionContent.js"}