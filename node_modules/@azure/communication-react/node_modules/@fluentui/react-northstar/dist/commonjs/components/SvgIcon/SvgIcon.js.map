{"version":3,"sources":["components/SvgIcon/SvgIcon.tsx"],"names":["SvgIcon","props","context","displayName","telemetry","setStart","setEnd","alt","ariaLabel","bordered","circular","className","design","disabled","children","outline","rotate","size","styles","variables","xSpacing","svgIconClassName","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","ElementType","unhandledProps","handledProps","element","undefined","root","svgIconDisplayName","svgIconHandledProps","defaultProps","as"],"mappings":"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","sourcesContent":["import {\n  ComponentWithAs,\n  getElementType,\n  getUnhandledProps,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport {\n  SvgIconProps,\n  svgIconClassName,\n  svgIconDisplayName,\n  svgIconHandledProps,\n  SvgIconChildrenFn,\n} from '@fluentui/react-icons-northstar';\nimport { callable } from '@fluentui/styles';\nimport * as React from 'react';\n\nexport type SvgIconStylesProps = Required<\n  Pick<SvgIconProps, 'bordered' | 'circular' | 'disabled' | 'outline' | 'rotate' | 'size' | 'xSpacing'>\n>;\n\n/**\n * An SvgIcon displays a pictogram with semantic meaning.\n */\nexport const SvgIcon: ComponentWithAs<'span', SvgIconProps & { children: SvgIconChildrenFn<SvgIconProps> }> & {\n  handledProps: (keyof (SvgIconProps & { children: SvgIconChildrenFn<SvgIconProps> }))[];\n} = props => {\n  const context = useFluentContext();\n\n  const { setStart, setEnd } = useTelemetry(SvgIcon.displayName, context.telemetry);\n  setStart();\n\n  const {\n    alt,\n    'aria-label': ariaLabel,\n    bordered,\n    circular,\n    className,\n    design,\n    disabled,\n    children,\n    outline,\n    rotate,\n    size,\n    styles,\n    variables,\n    xSpacing,\n  } = props;\n\n  const { classes } = useStyles<SvgIconStylesProps>(SvgIcon.displayName, {\n    className: svgIconClassName,\n    mapPropsToStyles: () => ({\n      bordered,\n      circular,\n      disabled,\n      outline,\n      rotate,\n      size,\n      xSpacing,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = getUnhandledProps(SvgIcon.handledProps, props);\n\n  const element = (\n    <ElementType\n      role=\"img\"\n      aria-hidden={alt || ariaLabel ? undefined : 'true'}\n      aria-label={ariaLabel}\n      className={classes.root}\n      {...unhandledProps}\n    >\n      {callable(children)({ classes, rtl: context.rtl, props })}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nSvgIcon.displayName = svgIconDisplayName;\nSvgIcon.handledProps = [...svgIconHandledProps, 'children'];\nSvgIcon.defaultProps = {\n  as: 'span',\n  size: 'medium',\n  rotate: 0,\n};\n"],"file":"SvgIcon.js"}