{"version":3,"sources":["components/Dropdown/DropdownItem.tsx"],"names":["dropdownItemClassName","dropdownItemSlotClassNames","main","content","header","image","checkableIndicator","DropdownItem","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","active","accessibilityItemProps","className","design","isFromKeyboard","styles","checkable","selected","variables","mapPropsToStyles","hasContent","hasHeader","mapPropsToInlineStyles","rtl","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleClick","e","contentElement","Box","create","defaultProps","headerElement","endMediaElement","accessibility","indicatorBehavior","imageElement","Image","avatar","media","element","root","as","propTypes","commonPropTypes","createCommon","children","PropTypes","object","bool","customPropTypes","itemShorthand","shorthandAllowingChildren","disabled","itemShorthandWithoutJSX","onClick","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport cx from 'classnames';\n\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { ShorthandValue, ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport { Image, ImageProps } from '../Image/Image';\nimport { Box, BoxProps } from '../Box/Box';\n\nexport interface DropdownItemSlotClassNames {\n  content: string;\n  header: string;\n  image: string;\n  checkableIndicator: string;\n  main: string;\n}\n\nexport interface DropdownItemProps extends UIComponentProps<DropdownItemProps> {\n  /** A dropdown item can be active. */\n  active?: boolean;\n\n  /** Item's accessibility props. */\n  accessibilityItemProps?: any;\n\n  /** Item's content. */\n  content?: ShorthandValue<BoxProps>;\n\n  /** Item can show check indicator if selected. */\n  checkable?: boolean;\n\n  /** A slot for a checkable indicator. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown item can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** Item's header. */\n  header?: ShorthandValue<BoxProps>;\n\n  /** Item's image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** Indicated whether the item has been set active by keyboard. */\n  isFromKeyboard?: boolean;\n\n  /**\n   * Called on dropdown item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onClick?: ComponentEventHandler<DropdownItemProps>;\n\n  /** A dropdown item can be selected if single selection Dropdown is used. */\n  selected?: boolean;\n}\n\nexport const dropdownItemClassName = 'ui-dropdown__item';\nexport const dropdownItemSlotClassNames: DropdownItemSlotClassNames = {\n  main: `${dropdownItemClassName}__main`,\n  content: `${dropdownItemClassName}__content`,\n  header: `${dropdownItemClassName}__header`,\n  image: `${dropdownItemClassName}__image`,\n  checkableIndicator: `${dropdownItemClassName}__checkable-indicator`,\n};\n\n/**\n * A DropdownItem represents an option of Dropdown list.\n * Displays an item with optional rich media metadata.\n */\nexport const DropdownItem = (React.forwardRef<HTMLLIElement, DropdownItemProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DropdownItem.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    active,\n    accessibilityItemProps,\n    className,\n    content,\n    design,\n    header,\n    image,\n    isFromKeyboard,\n    styles,\n    checkable,\n    checkableIndicator,\n    selected,\n    variables,\n  } = props;\n\n  const { classes, styles: resolvedStyles } = useStyles(DropdownItem.displayName, {\n    className: dropdownItemClassName,\n    mapPropsToStyles: () => ({\n      active,\n      isFromKeyboard,\n      selected,\n      hasContent: !!content,\n      hasHeader: !!header,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DropdownItem.handledProps, props);\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const contentElement = Box.create(content, {\n    defaultProps: () => ({\n      className: dropdownItemSlotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n  const headerElement = Box.create(header, {\n    defaultProps: () => ({\n      className: dropdownItemSlotClassNames.header,\n      styles: resolvedStyles.header,\n    }),\n  });\n  const endMediaElement =\n    selected && checkable\n      ? Box.create(checkableIndicator, {\n          defaultProps: () => ({\n            className: dropdownItemSlotClassNames.checkableIndicator,\n            styles: resolvedStyles.checkableIndicator,\n            accessibility: indicatorBehavior,\n          }),\n        })\n      : null;\n  const imageElement = Box.create(\n    Image.create(image, {\n      defaultProps: () => ({\n        avatar: true,\n        className: dropdownItemSlotClassNames.image,\n        styles: resolvedStyles.image,\n      }),\n    }),\n    {\n      defaultProps: () => ({\n        className: dropdownItemSlotClassNames.image,\n        styles: resolvedStyles.media,\n      }),\n    },\n  );\n\n  const element = (\n    <ElementType\n      ref={ref}\n      className={classes.root}\n      onClick={handleClick}\n      {...accessibilityItemProps}\n      {...unhandledProps}\n    >\n      {imageElement}\n\n      <div className={cx(dropdownItemSlotClassNames.main, classes.main)}>\n        {headerElement}\n        {contentElement}\n      </div>\n\n      {endMediaElement}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'li', HTMLLIElement, DropdownItemProps> &\n  FluentComponentStaticProps<DropdownItemProps>;\n\nDropdownItem.displayName = 'DropdownItem';\n\nDropdownItem.defaultProps = {\n  as: 'li',\n  checkableIndicator: {},\n};\n\nDropdownItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  accessibilityItemProps: PropTypes.object,\n  active: PropTypes.bool,\n  content: customPropTypes.itemShorthand,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  disabled: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  isFromKeyboard: PropTypes.bool,\n  selected: PropTypes.bool,\n};\nDropdownItem.handledProps = Object.keys(DropdownItem.propTypes) as any;\n\nDropdownItem.create = createShorthandFactory({ Component: DropdownItem, mappedProp: 'header' });\n"],"file":"DropdownItem.js"}