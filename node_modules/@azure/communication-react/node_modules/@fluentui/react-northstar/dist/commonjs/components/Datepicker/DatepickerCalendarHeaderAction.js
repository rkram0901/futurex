"use strict";

exports.__esModule = true;
exports.datepickerCalendarHeaderActionClassName = exports.DatepickerCalendarHeaderAction = void 0;

var React = _interopRequireWildcard(require("react"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var _reactIconsNorthstar = require("@fluentui/react-icons-northstar");

var _Button = require("../Button/Button");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var datepickerCalendarHeaderActionClassName = 'ui-datepicker__calendarheaderaction';
/**
 * A DatepickerCalendarHeaderAction is used to display action button for DatepickerCalendarHeader.
 */

exports.datepickerCalendarHeaderActionClassName = datepickerCalendarHeaderActionClassName;
var DatepickerCalendarHeaderAction = (0, _reactBindings.compose)(_Button.Button, {
  className: datepickerCalendarHeaderActionClassName,
  displayName: 'DatepickerCalendarHeaderAction',
  handledProps: ['direction', 'disabledNavigatableButton'],
  mapPropsToStylesProps: function mapPropsToStylesProps(p) {
    return {
      iconOnly: true,
      text: true,
      disabled: p.disabledNavigatableButton
    };
  },
  slotProps: function slotProps(props) {
    return {
      icon: {
        content: props.direction === 'next' ? /*#__PURE__*/React.createElement(_reactIconsNorthstar.ChevronEndIcon, null) : /*#__PURE__*/React.createElement(_reactIconsNorthstar.ChevronStartIcon, null)
      }
    };
  }
});
exports.DatepickerCalendarHeaderAction = DatepickerCalendarHeaderAction;
DatepickerCalendarHeaderAction.defaultProps = {
  as: 'button',
  accessibility: _accessibility.buttonBehavior,
  size: 'medium',
  icon: {}
};
//# sourceMappingURL=DatepickerCalendarHeaderAction.js.map
