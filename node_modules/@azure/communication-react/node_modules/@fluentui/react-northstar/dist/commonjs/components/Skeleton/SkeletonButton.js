"use strict";

exports.__esModule = true;
exports.skeletonButtonClassName = exports.SkeletonButton = void 0;

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _reactBindings = require("@fluentui/react-bindings");

var _utils = require("../../utils");

var _SkeletonShape = require("./SkeletonShape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var skeletonButtonClassName = 'ui-skeleton__button';
/**
 * An SkeletonButton represents a buton component that will be loaded
 */

exports.skeletonButtonClassName = skeletonButtonClassName;
var SkeletonButton = (0, _reactBindings.compose)(_SkeletonShape.SkeletonShape, {
  className: skeletonButtonClassName,
  displayName: 'SkeletonButton',
  overrideStyles: true,
  shorthandConfig: {},
  handledProps: ['size', 'circular', 'iconOnly', 'fluid'],
  mapPropsToStylesProps: function mapPropsToStylesProps(_ref) {
    var size = _ref.size,
        fluid = _ref.fluid,
        iconOnly = _ref.iconOnly,
        circular = _ref.circular;
    return {
      size: size,
      fluid: fluid,
      iconOnly: iconOnly,
      circular: circular
    };
  }
});
exports.SkeletonButton = SkeletonButton;
SkeletonButton.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  size: customPropTypes.size,
  circular: PropTypes.bool,
  iconOnly: PropTypes.bool,
  fluid: PropTypes.bool
});
SkeletonButton.defaultProps = {
  as: 'span',
  size: 'medium'
};
//# sourceMappingURL=SkeletonButton.js.map
