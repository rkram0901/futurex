"use strict";

exports.__esModule = true;
exports.dialogStyles = void 0;

var _Button = require("../../../../components/Button/Button");

var _Flex = require("../../../../components/Flex/Flex");

var dialogStyles = {
  root: function root(_ref) {
    var _ref2;

    var v = _ref.variables;
    return _ref2 = {
      background: v.rootBackground,
      border: v.border,
      borderRadius: v.rootBorderRadius,
      outline: 'none',
      padding: v.rootPadding,
      position: 'relative',
      width: v.rootWidth,
      maxWidth: '100vw',
      maxHeight: '100vh',
      overflowX: 'hidden',
      overflowY: 'auto',
      display: 'grid',
      gridTemplateColumns: '1fr auto',
      msGridColumns: '1fr auto',
      boxShadow: v.boxShadow,
      color: v.foregroundColor
    }, _ref2["@media screen and (max-width: " + v.rootWidth + ")"] = {
      padding: v.rootPaddingZoom
    }, _ref2;
  },
  footer: function footer() {
    return {
      gridColumn: '1 / -1',
      gridRow: 3,
      msGridRow: 3
    };
  },
  actions: function actions(_ref3) {
    var _ref4, _ref5;

    var v = _ref3.variables;
    return _ref5 = {
      display: 'flex',
      width: '100%'
    }, _ref5["& ." + _Flex.flexClassName] = {
      flexWrap: 'wrap',
      width: '100%'
    }, _ref5["@media screen and (max-width: " + v.footerActionsBreakpoint + ")"] = (_ref4 = {}, _ref4["& ." + _Button.buttonClassName] = {
      width: '100%',
      maxWidth: '100%',
      margin: 0
    }, _ref4["& ." + _Flex.flexClassName + " > :not(:last-child)"] = {
      marginBottom: '0.5rem'
    }, _ref4), _ref5;
  },
  content: function content(_ref6) {
    var _ref7;

    var v = _ref6.variables;
    return _ref7 = {
      margin: v.contentMargin,
      gridColumn: '1 / span 2',
      gridRow: 2,
      msGridColumn: 1,
      msGridColumnSpan: 2,
      msGridRow: 2,
      justifySelf: 'left',
      width: '100%'
    }, _ref7["@media screen and (max-width: " + v.rootWidth + "), screen and (max-height: 400px)"] = {
      maxHeight: '100%',
      overflow: 'unset'
    }, _ref7;
  },
  header: function header(_ref8) {
    var v = _ref8.variables;
    return {
      margin: v.headerMargin,
      gridRow: 1,
      msGridRow: 1,
      gridColumn: 1,
      msGridColumn: 1,
      justifySelf: 'left',
      fontSize: v.headerFontSize,
      fontWeight: v.headerFontWeight
    };
  },
  headerAction: function headerAction(_ref9) {
    var v = _ref9.variables;
    return {
      gridRow: 1,
      msGridRow: 1,
      gridColumn: 2,
      msGridColumn: 2,
      color: v.foregroundColor,
      margin: v.headerActionMargin
    };
  },
  overlay: function overlay(_ref10) {
    var p = _ref10.props,
        v = _ref10.variables;
    return Object.assign({
      alignItems: 'center',
      background: 'transparent',
      bottom: 0,
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      left: 0,
      overflow: 'auto',
      position: 'fixed',
      right: 0,
      top: 0,
      zIndex: v.overlayZIndex
    }, p.backdrop && {
      background: v.overlayBackground
    });
  }
};
exports.dialogStyles = dialogStyles;
//# sourceMappingURL=dialogStyles.js.map
