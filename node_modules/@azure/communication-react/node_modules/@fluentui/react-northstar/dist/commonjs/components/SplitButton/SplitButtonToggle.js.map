{"version":3,"sources":["components/SplitButton/SplitButtonToggle.tsx"],"names":["splitButtonToggleClassName","SplitButtonToggle","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","as","children","content","disabled","primary","className","size","flat","styles","variables","design","hasChildren","getA11Props","debugName","mapPropsToBehavior","String","actionHandlers","performClick","event","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","unhandledProps","handledProps","ElementType","e","result","rtlTextContainer","getAttributes","forElements","onClick","root","defaultProps","buttonBehavior","propTypes","commonPropTypes","createCommon","PropTypes","bool","func","customPropTypes","every","disallow","secondary","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, buttonBehavior, ButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n  SizeValue,\n} from '../../utils';\n\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport {\n  ForwardRefWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\n\nexport interface SplitButtonToggleProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ButtonBehaviorProps>;\n\n  /** A split button toggle can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /**\n   * Called after a user clicks the button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<SplitButtonToggleProps>;\n\n  /** A split button toggle can emphasize that it represents the primary action. */\n  primary?: boolean;\n\n  /** A split button toggle can emphasize that it represents an alternative action. */\n  secondary?: boolean;\n\n  /** A split button toggle can be sized */\n  size?: SizeValue;\n\n  /** A split button toggle can be elevated or flat. */\n  flat?: boolean;\n}\n\nexport type SplitButtonToggleStylesProps = Pick<SplitButtonToggleProps, 'primary' | 'disabled' | 'size' | 'flat'>;\nexport const splitButtonToggleClassName = 'ui-splitbutton__toggle';\n\n/**\n * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\n\nexport const SplitButtonToggle = (React.forwardRef<HTMLButtonElement, SplitButtonToggleProps & { as: React.ReactNode }>(\n  (props, ref) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(SplitButtonToggle.displayName, context.telemetry);\n    setStart();\n\n    const {\n      accessibility,\n      as,\n      children,\n      content,\n      disabled,\n      primary,\n      className,\n      size,\n      flat,\n      styles,\n      variables,\n      design,\n    } = props;\n\n    const hasChildren = childrenExist(children);\n\n    const getA11Props = useAccessibility(accessibility, {\n      debugName: SplitButtonToggle.displayName,\n      mapPropsToBehavior: () => ({\n        as: String(as),\n        disabled,\n      }),\n      actionHandlers: {\n        performClick: event => {\n          event.preventDefault();\n          handleClick(event);\n        },\n      },\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<SplitButtonToggleStylesProps>(SplitButtonToggle.displayName, {\n      className: splitButtonToggleClassName,\n      mapPropsToStyles: () => ({\n        primary,\n        disabled,\n        size,\n        flat,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n    });\n\n    const unhandledProps = useUnhandledProps(SplitButtonToggle.handledProps, props);\n    const ElementType = getElementType(props);\n\n    const handleClick = (e: React.SyntheticEvent) => {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _.invoke(props, 'onClick', e, props);\n    };\n\n    const result = (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...getA11Props('root', {\n          onClick: handleClick,\n          disabled,\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {hasChildren ? children : content}\n      </ElementType>\n    );\n\n    setEnd();\n\n    return result;\n  },\n) as unknown) as ForwardRefWithAs<'button', HTMLButtonElement, SplitButtonToggleProps> &\n  FluentComponentStaticProps<SplitButtonToggleProps>;\n\nSplitButtonToggle.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n};\n\nSplitButtonToggle.displayName = 'SplitButtonToggle';\n\nSplitButtonToggle.propTypes = {\n  ...commonPropTypes.createCommon({}),\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  size: customPropTypes.size,\n  flat: PropTypes.bool,\n};\n\nSplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes) as any;\n\nSplitButtonToggle.create = createShorthandFactory({ Component: SplitButtonToggle, mappedProp: 'content' });\n"],"file":"SplitButtonToggle.js"}