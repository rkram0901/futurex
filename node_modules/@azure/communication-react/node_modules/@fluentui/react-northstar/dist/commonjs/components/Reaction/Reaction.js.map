{"version":3,"sources":["components/Reaction/Reaction.tsx"],"names":["reactionClassName","reactionSlotClassNames","icon","content","Reaction","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","children","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToStyles","hasContent","mapPropsToInlineStyles","classes","resolvedStyles","element","root","rtlTextContainer","getAttributes","forElements","Box","create","defaultProps","propTypes","commonPropTypes","createCommon","customPropTypes","shorthandAllowingChildren","as","Object","keys","Group","ReactionGroup","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n  ContentComponentProps,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport { ReactionGroup } from './ReactionGroup';\nimport {\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface ReactionSlotClassNames {\n  icon: string;\n  content: string;\n}\n\nexport interface ReactionProps\n  extends UIComponentProps<ReactionProps>,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A reaction can have icon for the indicator of the reaction. */\n  icon?: ShorthandValue<BoxProps>;\n}\n\nexport type ReactionStylesProps = {\n  hasContent: boolean;\n};\n\nexport const reactionClassName = 'ui-reaction';\nexport const reactionSlotClassNames: ReactionSlotClassNames = {\n  icon: `${reactionClassName}__icon`,\n  content: `${reactionClassName}__content`,\n};\n\n/**\n * A Reaction indicates user's emotion or perception.\n * Used to display user's reaction for entity in Chat (e.g. message).\n */\nexport const Reaction = (React.forwardRef<HTMLSpanElement, ReactionProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Reaction.displayName, context.telemetry);\n  setStart();\n  const { children, icon, content, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Reaction.handledProps, props);\n\n  const getA11yProps = useAccessibility<never>(props.accessibility, {\n    debugName: Reaction.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<ReactionStylesProps>(Reaction.displayName, {\n    className: reactionClassName,\n    mapPropsToStyles: () => ({\n      hasContent: !!content,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n    >\n      {childrenExist(children) ? (\n        children\n      ) : (\n        <>\n          {Box.create(icon, {\n            defaultProps: () =>\n              getA11yProps('icon', {\n                className: reactionSlotClassNames.icon,\n                styles: resolvedStyles.icon,\n              }),\n          })}\n          {Box.create(content, {\n            defaultProps: () =>\n              getA11yProps('content', {\n                className: reactionSlotClassNames.content,\n                styles: resolvedStyles.content,\n              }),\n          })}\n        </>\n      )}\n    </ElementType>\n  );\n\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, ReactionProps> &\n  FluentComponentStaticProps<ReactionProps> & {\n    Group: typeof ReactionGroup;\n  };\n\nReaction.displayName = 'Reaction';\n\nReaction.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n  }),\n  icon: customPropTypes.shorthandAllowingChildren,\n};\n\nReaction.defaultProps = {\n  as: 'span',\n};\n\nReaction.handledProps = Object.keys(Reaction.propTypes) as any;\n\nReaction.Group = ReactionGroup;\n\nReaction.create = createShorthandFactory({ Component: Reaction, mappedProp: 'content' });\n"],"file":"Reaction.js"}