{"version":3,"sources":["components/Flex/FlexItem.tsx"],"names":["applyStyles","element","styles","classes","type","React","cloneElement","className","props","root","flexItemClassName","FlexItem","context","displayName","telemetry","setStart","setEnd","align","children","design","grow","flexDirection","push","shrink","size","variables","mapPropsToStyles","mapPropsToInlineStyles","rtl","resolvedStyles","Children","only","propTypes","commonPropTypes","createCommon","accessibility","content","PropTypes","oneOfType","func","oneOf","string","bool","number","__isFlexItem"],"mappings":"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","sourcesContent":["import { ComponentSlotClasses, useStyles, useTelemetry, useFluentContext } from '@fluentui/react-bindings';\nimport { ComponentSlotStylesPrepared, ComponentSlotStylesResolved, mergeStyles } from '@fluentui/styles';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { commonPropTypes, UIComponentProps, ChildrenComponentProps } from '../../utils';\n\ntype ChildrenFunction = (params: { styles: ComponentSlotStylesPrepared; classes: string }) => React.ReactElement;\n\nexport type FlexItemChildren = React.ReactElement | ChildrenFunction;\n\nexport interface FlexItemProps extends UIComponentProps, ChildrenComponentProps<FlexItemChildren> {\n  /** Controls item's alignment. */\n  align?: 'auto' | 'start' | 'end' | 'center' | 'baseline' | 'stretch';\n\n  /** Defines size of the item. */\n  size?: 'size.half' | 'size.quarter' | 'size.small' | 'size.medium' | 'size.large' | string;\n\n  /**\n   * Item can fill remaining space of the container.\n   * If numeric value is provided, remaining space will be distributed proportionally between all the items.\n   * */\n  grow?: boolean | number;\n\n  /**\n   * Controls item's ability to shrink.\n   * */\n  shrink?: boolean | number;\n\n  /**\n   * Item can be pushed towards opposite side in the container's direction.\n   */\n  push?: boolean;\n\n  /**\n   * IGNORE (will be refactored and not exposed via API).\n   * Value is automatically set by parent Flex component.\n   */\n  flexDirection?: 'row' | 'column';\n}\n\nexport type FlexItemStylesProps = Pick<FlexItemProps, 'align' | 'grow' | 'flexDirection' | 'push' | 'shrink' | 'size'>;\n\nconst applyStyles = (\n  element: React.ReactElement,\n  styles: ComponentSlotStylesResolved,\n  classes: ComponentSlotClasses,\n): React.ReactElement => {\n  if (!styles) {\n    return element;\n  }\n\n  // if element is DOM element\n  if (typeof element.type === 'string') {\n    return React.cloneElement(element, {\n      className: cx(element.props.className, classes.root),\n    });\n  }\n\n  // assuming element is Fluent UI element\n  return React.cloneElement(element, {\n    styles: mergeStyles(styles.root || {}, element.props.styles),\n  });\n};\n\nexport const flexItemClassName = 'ui-flex__item';\n\n/**\n * A FlexItem is a layout component that customizes alignment of Flex child.\n */\nexport const FlexItem: React.FC<FlexItemProps> & { __isFlexItem: boolean } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(FlexItem.displayName, context.telemetry);\n  setStart();\n\n  const { align, children, className, design, grow, flexDirection, push, shrink, size, styles, variables } = props;\n\n  const { classes, styles: resolvedStyles } = useStyles<FlexItemStylesProps>(FlexItem.displayName, {\n    className: flexItemClassName,\n    mapPropsToStyles: () => ({\n      align,\n      grow,\n      flexDirection,\n      push,\n      shrink,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  let element: React.ReactElement;\n\n  // pass calculated bits using Render Props pattern\n  if (typeof children === 'function') {\n    element = children({\n      styles: resolvedStyles.root as ComponentSlotStylesPrepared,\n      classes: classes.root,\n    });\n  } else if (_.isNil(children)) {\n    element = null;\n  } else {\n    element = applyStyles(React.Children.only(children) as React.ReactElement, resolvedStyles, classes);\n  }\n\n  setEnd();\n\n  return element;\n};\n\nFlexItem.displayName = 'FlexItem';\n\nFlexItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    accessibility: false,\n    content: false,\n  }),\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  align: PropTypes.oneOf(['auto', 'start', 'end', 'center', 'baseline', 'stretch']),\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['size.half', 'size.quarter', 'size.small', 'size.medium', 'size.large']),\n    PropTypes.string,\n  ]),\n  shrink: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n\n  push: PropTypes.bool,\n\n  /**\n   * Will be automatically set by parent Flex component\n   */\n  flexDirection: PropTypes.oneOf(['row', 'column']),\n};\n\n// Boolean flag for now, Symbol-based approach may be used instead.\n// However, there are  concerns related to browser compatibility if Symbols will be used.\n// Completely alternative approach - check class name of React element (and generalize this logic).\nFlexItem.__isFlexItem = true;\n"],"file":"FlexItem.js"}