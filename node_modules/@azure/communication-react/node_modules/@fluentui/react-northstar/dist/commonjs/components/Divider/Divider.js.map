{"version":3,"sources":["components/Divider/Divider.tsx"],"names":["dividerClassName","Divider","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","children","color","fitted","size","important","vertical","className","design","styles","variables","accessibility","ElementType","unhandledProps","handledProps","getA11yProps","debugName","rtl","mapPropsToStyles","hasContent","content","mapPropsToInlineStyles","classes","DividerContent","element","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","PropTypes","bool","number","defaultProps","Content","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  useTelemetry,\n  useAccessibility,\n  getElementType,\n  useFluentContext,\n  useUnhandledProps,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthand,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\nimport { DividerContent } from './DividerContent';\n\nexport interface DividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A divider can be fitted, without any space above or below it. */\n  fitted?: boolean;\n\n  /** A divider can be resized using this multiplier. (default: 0) */\n  size?: number;\n\n  /** A divider can be emphasized to draw a user's attention. */\n  important?: boolean;\n\n  /** A divider can be positioned vertically. */\n  vertical?: boolean;\n}\n\nexport type DividerStylesProps = Required<\n  Pick<DividerProps, 'color' | 'fitted' | 'size' | 'important' | 'vertical'> & {\n    hasContent: boolean;\n  }\n>;\n\nexport const dividerClassName = 'ui-divider';\n\n/**\n * A Divider visually segments content.\n */\nexport const Divider = (React.forwardRef<HTMLDivElement, DividerProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Divider.displayName, context.telemetry);\n  setStart();\n  const {\n    children,\n    color,\n    fitted,\n    size,\n    important,\n    vertical,\n    className,\n    design,\n    styles,\n    variables,\n    accessibility,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Divider.handledProps, props);\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: Divider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<DividerStylesProps>(Divider.displayName, {\n    className: dividerClassName,\n    mapPropsToStyles: () => ({\n      hasContent: childrenExist(children) || !!props.content,\n      color,\n      fitted,\n      size,\n      important,\n      vertical,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const content = createShorthand(DividerContent, props.content, {});\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, DividerProps> &\n  FluentComponentStaticProps<DividerProps> & {\n    Content: typeof DividerContent;\n  };\n\nDivider.displayName = 'Divider';\n\nDivider.propTypes = {\n  ...commonPropTypes.createCommon({ color: true }),\n  fitted: PropTypes.bool,\n  size: PropTypes.number,\n  important: PropTypes.bool,\n  vertical: PropTypes.bool,\n};\n\nDivider.defaultProps = {\n  size: 0,\n};\n\nDivider.Content = DividerContent;\n\nDivider.handledProps = Object.keys(Divider.propTypes) as any;\n\nDivider.create = createShorthandFactory({ Component: Divider, mappedProp: 'content' });\n"],"file":"Divider.js"}