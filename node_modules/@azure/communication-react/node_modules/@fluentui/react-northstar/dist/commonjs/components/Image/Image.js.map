{"version":3,"sources":["components/Image/Image.tsx"],"names":["imageClassName","Image","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","alt","ariaLabel","avatar","circular","className","design","fluid","styles","variables","getA11Props","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","result","root","defaultProps","as","imageBehavior","propTypes","commonPropTypes","createCommon","children","content","PropTypes","bool","Object","keys","create","Component","mappedProp","allowsJSX"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributes, imageBehavior, ImageBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface ImageProps extends UIComponentProps, ImageBehaviorProps {\n  /** Alternative text. */\n  alt?: string;\n\n  'aria-label'?: AccessibilityAttributes['aria-label'];\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ImageBehaviorProps>;\n\n  /** An image may be formatted to appear inline with text as an avatar. */\n  avatar?: boolean;\n\n  /** An image can appear circular. */\n  circular?: boolean;\n\n  /** An image can take up the width of its container. */\n  fluid?: boolean;\n\n  /** Image source URL. */\n  src?: string;\n}\n\nexport type ImageStylesProps = Pick<ImageProps, 'avatar' | 'circular' | 'fluid'>;\nexport const imageClassName = 'ui-image';\n\n/**\n * An Image is a graphic representation of something.\n *\n * @accessibility\n * If image should be visible to screen readers, textual representation needs to be provided in 'alt' property.\n *\n * Other considerations:\n *  - when alt property is empty, then Narrator in scan mode navigates to image and narrates it as empty paragraph.\n *  - when image has role='presentation' then screen readers navigate to the element in scan/virtual mode. To avoid this, the attribute \"aria-hidden='true'\" is applied by the default image behavior.\n *  - when alt property is used in combination with aria-label, arialabbeledby or title, additional screen readers verification is needed as each screen reader handles this combination differently.\n */\nexport const Image = (React.forwardRef<HTMLImageElement, ImageProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Image.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    alt,\n    'aria-label': ariaLabel,\n    avatar,\n    circular,\n    className,\n    design,\n    fluid,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Image.displayName,\n    mapPropsToBehavior: () => ({\n      alt,\n      'aria-label': ariaLabel,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ImageStylesProps>(Image.displayName, {\n    className: imageClassName,\n    mapPropsToStyles: () => ({\n      avatar,\n      circular,\n      fluid,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Image.handledProps, props);\n\n  const result = <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })} />;\n\n  setEnd();\n\n  return result;\n}) as unknown) as ForwardRefWithAs<'img', HTMLImageElement, ImageProps> & FluentComponentStaticProps<ImageProps>;\n\nImage.displayName = 'Image';\nImage.defaultProps = {\n  as: 'img' as const,\n  accessibility: imageBehavior,\n};\n\nImage.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  avatar: PropTypes.bool,\n  circular: PropTypes.bool,\n  fluid: PropTypes.bool,\n};\n\nImage.handledProps = Object.keys(Image.propTypes) as any;\n\nImage.create = createShorthandFactory({ Component: Image, mappedProp: 'src', allowsJSX: false });\n"],"file":"Image.js"}