{"version":3,"sources":["components/Dropdown/DropdownSelectedItem.tsx"],"names":["dropdownSelectedItemClassName","dropdownSelectedItemSlotClassNames","header","icon","image","DropdownSelectedItem","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","active","className","design","styles","variables","itemRef","useRef","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","mapPropsToBehavior","rtl","useEffect","current","focus","mapPropsToStyles","hasImage","mapPropsToInlineStyles","classes","resolvedStyles","handleClick","e","handleKeyDown","handleIconOverrides","iconProps","onClick","stopPropagation","onKeyDown","keyboardKey","Enter","headerElement","Box","create","defaultProps","as","iconElement","overrideProps","imageElement","Image","avatar","element","root","propTypes","commonPropTypes","createCommon","children","PropTypes","bool","customPropTypes","itemShorthand","shorthandAllowingChildren","itemShorthandWithoutJSX","func","onRemove","Object","keys","dropdownSelectedItemBehavior","Component","mappedProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  dropdownSelectedItemBehavior,\n  DropdownSelectedItemBehaviorProps,\n  getCode,\n  keyboardKey,\n} from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport { CloseIcon } from '@fluentui/react-icons-northstar';\nimport {\n  ComponentEventHandler,\n  ShorthandValue,\n  ComponentKeyboardEventHandler,\n  FluentComponentStaticProps,\n} from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { Image, ImageProps } from '../Image/Image';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  useUnhandledProps,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  getElementType,\n  useAccessibility,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface DropdownSelectedItemSlotClassNames {\n  header: string;\n  icon: string;\n  image: string;\n}\n\nexport interface DropdownSelectedItemProps extends UIComponentProps<DropdownSelectedItemProps> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<DropdownSelectedItemBehaviorProps>;\n\n  /** A selected item can be active. */\n  active?: boolean;\n\n  /** Header of the selected item. */\n  header?: ShorthandValue<BoxProps>;\n\n  /** Icon of the selected item. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Image of the selected item. */\n  image?: ShorthandValue<ImageProps>;\n\n  /**\n   * Called on selected item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onClick?: ComponentEventHandler<DropdownSelectedItemProps>;\n\n  /**\n   * Called on selected item key down.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onKeyDown?: ComponentKeyboardEventHandler<DropdownSelectedItemProps>;\n\n  /**\n   * Called when item is removed from the selection list.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onRemove?: ComponentEventHandler<DropdownSelectedItemProps>;\n}\n\nexport const dropdownSelectedItemClassName = 'ui-dropdown__selecteditem';\nexport const dropdownSelectedItemSlotClassNames: DropdownSelectedItemSlotClassNames = {\n  header: `${dropdownSelectedItemClassName}__header`,\n  icon: `${dropdownSelectedItemClassName}__icon`,\n  image: `${dropdownSelectedItemClassName}__image`,\n};\n\nexport type DropdownSelectedItemStylesProps = { hasImage: boolean };\n\n/**\n * A DropdownSelectedItem represents a selected item of 'multiple-selection' Dropdown.\n */\nexport const DropdownSelectedItem = (React.forwardRef<HTMLSpanElement, DropdownSelectedItemProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DropdownSelectedItem.displayName, context.telemetry);\n  setStart();\n\n  const { active, header, icon, image, className, design, styles, variables } = props;\n\n  const itemRef = React.useRef<HTMLElement>();\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DropdownSelectedItem.handledProps, props);\n\n  const getA11yProps = useAccessibility<DropdownSelectedItemBehaviorProps>(props.accessibility, {\n    debugName: DropdownSelectedItem.displayName,\n    mapPropsToBehavior: () => ({\n      header: header as string,\n      active,\n    }),\n    rtl: context.rtl,\n  });\n\n  React.useEffect(() => {\n    if (active) {\n      itemRef.current.focus();\n    }\n  }, [active]);\n\n  const { classes, styles: resolvedStyles } = useStyles<DropdownSelectedItemStylesProps>(\n    DropdownSelectedItem.displayName,\n    {\n      className: dropdownSelectedItemClassName,\n      mapPropsToStyles: () => ({\n        hasImage: !!image,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n    },\n  );\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const handleKeyDown = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onKeyDown', e, props);\n  };\n\n  const handleIconOverrides = iconProps => ({\n    ...iconProps,\n    onClick: (e: React.SyntheticEvent, iconProps: BoxProps) => {\n      e.stopPropagation();\n      _.invoke(props, 'onRemove', e, iconProps);\n      _.invoke(props, 'onClick', e, iconProps);\n    },\n    onKeyDown: (e: React.KeyboardEvent, iconProps: BoxProps) => {\n      e.stopPropagation();\n      if (getCode(e) === keyboardKey.Enter) {\n        _.invoke(props, 'onRemove', e, iconProps);\n      }\n      _.invoke(props, 'onKeyDown', e, iconProps);\n    },\n  });\n\n  const headerElement = Box.create(header, {\n    defaultProps: () =>\n      getA11yProps('header', {\n        as: 'span',\n        className: dropdownSelectedItemSlotClassNames.header,\n        styles: resolvedStyles.header,\n      }),\n  });\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11yProps('icon', {\n        className: dropdownSelectedItemSlotClassNames.icon,\n        styles: resolvedStyles.icon,\n      }),\n    overrideProps: handleIconOverrides,\n  });\n\n  const imageElement = Image.create(image, {\n    defaultProps: () =>\n      getA11yProps('image', {\n        avatar: true,\n        className: dropdownSelectedItemSlotClassNames.image,\n        styles: resolvedStyles.image,\n      }),\n  });\n\n  const element = (\n    <Ref innerRef={itemRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          onClick: handleClick,\n          onKeyDown: handleKeyDown,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {imageElement}\n        {headerElement}\n        {iconElement}\n      </ElementType>\n    </Ref>\n  );\n\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, DropdownSelectedItemProps> &\n  FluentComponentStaticProps<DropdownSelectedItemProps>;\n\nDropdownSelectedItem.displayName = 'DropdownSelectedItem';\n\nDropdownSelectedItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n  }),\n  active: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  icon: customPropTypes.shorthandAllowingChildren,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onRemove: PropTypes.func,\n};\n\nDropdownSelectedItem.handledProps = Object.keys(DropdownSelectedItem.propTypes) as any;\n\nDropdownSelectedItem.defaultProps = {\n  accessibility: dropdownSelectedItemBehavior,\n  as: 'span',\n  icon: <CloseIcon />,\n};\n\nDropdownSelectedItem.create = createShorthandFactory({\n  Component: DropdownSelectedItem,\n  mappedProp: 'header',\n});\n"],"file":"DropdownSelectedItem.js"}