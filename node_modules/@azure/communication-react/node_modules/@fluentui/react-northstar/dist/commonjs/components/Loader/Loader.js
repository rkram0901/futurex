"use strict";

exports.__esModule = true;
exports.loaderSlotClassNames = exports.loaderClassName = exports.Loader = void 0;

var _accessibility = require("@fluentui/accessibility");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _reactBindings = require("@fluentui/react-bindings");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

var _Text = require("../Text/Text");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var loaderClassName = 'ui-loader';
exports.loaderClassName = loaderClassName;
var loaderSlotClassNames = {
  indicator: loaderClassName + "__indicator",
  label: loaderClassName + "__label",
  svg: loaderClassName + "__svg"
};
exports.loaderSlotClassNames = loaderSlotClassNames;

/**
 * A loader alerts a user that content is being loaded or processed and they should wait for the activity to complete.
 *
 * @accessibility
 * Implements [ARIA progressbar](https://www.w3.org/TR/wai-aria-1.1/#progressbar) role.
 */
var Loader = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Loader.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var delay = props.delay,
      secondary = props.secondary,
      label = props.label,
      indicator = props.indicator,
      svg = props.svg,
      inline = props.inline,
      labelPosition = props.labelPosition,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      size = props.size;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Loader.handledProps, props);
  var delayTimer = React.useRef();

  var _React$useState = React.useState(props.delay === 0),
      visible = _React$useState[0],
      setVisible = _React$useState[1];

  var labelId = React.useRef();
  labelId.current = (0, _utils.getOrGenerateIdFromShorthand)('loader-label-', label, labelId.current);

  var _useStyles = (0, _reactBindings.useStyles)(Loader.displayName, {
    className: loaderClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        inline: inline,
        labelPosition: labelPosition,
        size: size,
        secondary: secondary
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: Loader.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        labelId: labelId.current
      };
    },
    rtl: context.rtl
  });
  React.useEffect(function () {
    if (delay > 0) {
      // @ts-ignore We have a collision between types from DOM and @types/node
      delayTimer.current = setTimeout(function () {
        setVisible(true);
      }, delay);
    }

    return function () {
      return clearTimeout(delayTimer.current);
    };
  }, [delay]);

  var svgElement = _Box.Box.create(svg, {
    defaultProps: function defaultProps() {
      return {
        className: loaderSlotClassNames.svg,
        styles: resolvedStyles.svg
      };
    }
  });

  var element = visible && /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    ref: ref
  }, unhandledProps)), _Box.Box.create(indicator, {
    defaultProps: function defaultProps() {
      return getA11yProps('indicator', {
        children: svgElement,
        className: loaderSlotClassNames.indicator,
        styles: resolvedStyles.indicator
      });
    }
  }), _Text.Text.create(label, {
    defaultProps: function defaultProps() {
      return getA11yProps('label', {
        className: loaderSlotClassNames.label,
        styles: resolvedStyles.label,
        id: labelId.current
      });
    }
  }));
  setEnd();
  return element;
});
exports.Loader = Loader;
Loader.displayName = 'Loader';
Loader.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  children: false,
  content: false
}), {
  delay: PropTypes.number,
  indicator: customPropTypes.itemShorthand,
  inline: PropTypes.bool,
  label: customPropTypes.itemShorthand,
  labelPosition: PropTypes.oneOf(['above', 'below', 'start', 'end']),
  size: customPropTypes.size,
  svg: customPropTypes.itemShorthand,
  secondary: PropTypes.bool
});
Loader.defaultProps = {
  accessibility: _accessibility.loaderBehavior,
  delay: 0,
  indicator: {},
  labelPosition: 'below',
  svg: '',
  size: 'medium'
};
Loader.handledProps = Object.keys(Loader.propTypes);
Loader.create = (0, _utils.createShorthandFactory)({
  Component: Loader,
  mappedProp: 'label'
});
Loader.shorthandConfig = {
  mappedProp: 'label'
};
//# sourceMappingURL=Loader.js.map
