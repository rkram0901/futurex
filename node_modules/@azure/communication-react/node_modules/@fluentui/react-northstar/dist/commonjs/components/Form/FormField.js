"use strict";

exports.__esModule = true;
exports.formFieldMessageClassName = exports.formFieldClassName = exports.FormField = void 0;

var _accessibility = require("@fluentui/accessibility");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Text = require("../Text/Text");

var _Input = require("../Input/Input");

var _Box = require("../Box/Box");

var _reactBindings = require("@fluentui/react-bindings");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var formFieldClassName = 'ui-form__field';
exports.formFieldClassName = formFieldClassName;
var formFieldMessageClassName = 'ui-form__field__message';
exports.formFieldMessageClassName = formFieldMessageClassName;

/**
 * A FormField represents a Form element containing a label and an input.
 */
var FormField = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(FormField.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var children = props.children,
      control = props.control,
      id = props.id,
      label = props.label,
      message = props.message,
      name = props.name,
      required = props.required,
      type = props.type,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      inline = props.inline,
      errorMessage = props.errorMessage;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(FormField.handledProps, props);
  var messageId = React.useRef();
  messageId.current = (0, _utils.getOrGenerateIdFromShorthand)('error-message-', message || errorMessage, messageId.current);
  var labelId = React.useRef();
  labelId.current = (0, _utils.getOrGenerateIdFromShorthand)('form-label-', id, labelId.current);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: FormField.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        hasErrorMessage: !!errorMessage,
        messageId: messageId.current,
        labelId: labelId.current
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(FormField.displayName, {
    className: formFieldClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        type: type,
        inline: inline,
        required: required,
        hasErrorMessage: !!errorMessage
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var labelElement = _Text.Text.create(label, {
    defaultProps: function defaultProps() {
      return getA11yProps('label', {
        as: 'label',
        htmlFor: id,
        id: labelId.current,
        styles: resolvedStyles.label
      });
    }
  });

  var messageElement = _Text.Text.create(errorMessage || message, {
    defaultProps: function defaultProps() {
      return getA11yProps('message', {
        className: formFieldMessageClassName,
        id: messageId.current,
        styles: resolvedStyles.message
      });
    }
  });

  var controlElement = _Box.Box.create(control || {}, {
    defaultProps: function defaultProps() {
      return getA11yProps('control', {
        required: required,
        name: name,
        id: id,
        type: type,
        error: !!errorMessage || null,
        styles: resolvedStyles.control
      });
    }
  });

  var shouldControlAppearFirst = function shouldControlAppearFirst() {
    return type && (type === 'checkbox' || type === 'radio');
  };

  var content = /*#__PURE__*/React.createElement(React.Fragment, null, shouldControlAppearFirst() && controlElement, labelElement, !shouldControlAppearFirst() && controlElement, messageElement);
  var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    ref: ref
  }, unhandledProps)), (0, _utils.childrenExist)(children) ? children : content);
  setEnd();
  return element;
});
exports.FormField = FormField;
FormField.displayName = 'FormField';
FormField.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  control: customPropTypes.shorthandAllowingChildren,
  id: PropTypes.string,
  inline: PropTypes.bool,
  label: customPropTypes.itemShorthand,
  message: customPropTypes.itemShorthand,
  name: PropTypes.string,
  required: PropTypes.bool,
  type: PropTypes.string,
  errorMessage: customPropTypes.shorthandAllowingChildren
});
FormField.handledProps = Object.keys(FormField.propTypes);
FormField.defaultProps = {
  accessibility: _accessibility.formFieldBehavior,
  control: {
    as: _Input.Input
  }
};
FormField.create = (0, _utils.createShorthandFactory)({
  Component: FormField,
  mappedProp: 'label'
});
//# sourceMappingURL=FormField.js.map
