"use strict";

exports.__esModule = true;
exports.avatarImageClassName = exports.AvatarImage = void 0;

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Image = require("../Image/Image");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var avatarImageClassName = _Image.imageClassName;
/**
 * An AvatarImage is a graphic representation used by Avatar.
 */

exports.avatarImageClassName = avatarImageClassName;
var AvatarImage = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(AvatarImage.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      alt = props.alt,
      ariaLabel = props['aria-label'],
      avatar = props.avatar,
      circular = props.circular,
      className = props.className,
      design = props.design,
      fluid = props.fluid,
      styles = props.styles,
      variables = props.variables,
      size = props.size;
  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: AvatarImage.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        alt: alt,
        'aria-label': ariaLabel
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(AvatarImage.displayName, {
    className: avatarImageClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        avatar: avatar,
        circular: circular,
        fluid: fluid,
        size: size
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(AvatarImage.handledProps, props);
  var result = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root,
    ref: ref
  }, unhandledProps)));
  setEnd();
  return result;
});
exports.AvatarImage = AvatarImage;
AvatarImage.displayName = 'AvatarImage';
AvatarImage.defaultProps = {
  as: 'img',
  accessibility: _accessibility.imageBehavior
};
AvatarImage.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  children: false,
  content: false
}), {
  avatar: PropTypes.bool,
  circular: PropTypes.bool,
  fluid: PropTypes.bool
});
AvatarImage.shorthandConfig = {
  mappedProp: 'src',
  allowsJSX: false
};
AvatarImage.handledProps = Object.keys(AvatarImage.propTypes);
AvatarImage.create = (0, _utils.createShorthandFactory)({
  Component: AvatarImage,
  mappedProp: 'src',
  allowsJSX: false
});
//# sourceMappingURL=AvatarImage.js.map
