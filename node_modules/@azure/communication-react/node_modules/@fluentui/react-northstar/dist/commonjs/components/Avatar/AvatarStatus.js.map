{"version":3,"sources":["components/Avatar/AvatarStatus.tsx"],"names":["avatarStatusClassName","statusClassName","AvatarStatus","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","color","icon","size","state","design","styles","variables","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","iconElement","AvatarStatusIcon","defaultProps","element","root","propTypes","commonPropTypes","createCommon","children","content","PropTypes","string","customPropTypes","shorthandAllowingChildren","oneOf","Object","keys","avatarStatusBehavior","as","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport { commonPropTypes, SizeValue, UIComponentProps, createShorthandFactory, createShorthand } from '../../utils';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Accessibility, statusBehavior as avatarStatusBehavior, StatusBehaviorProps } from '@fluentui/accessibility';\nimport { AvatarStatusIcon, AvatarStatusIconProps } from './AvatarStatusIcon';\nimport { statusClassName } from '../Status/Status';\n\nexport interface AvatarStatusProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<StatusBehaviorProps>;\n\n  /** A custom color. */\n  color?: string;\n\n  /** Shorthand for the icon, to provide customizing status */\n  icon?: ShorthandValue<AvatarStatusIconProps>;\n\n  /** Size multiplier */\n  size?: SizeValue;\n\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type AvatarStatusStylesProps = Required<Pick<AvatarStatusProps, 'color' | 'size' | 'state'>>;\n// update in upcoming breaking change and enable a unit test\nexport const avatarStatusClassName = statusClassName;\n\n/**\n * A AvatarStatus provides a status for the Avatar.\n */\nexport const AvatarStatus = (React.forwardRef<HTMLSpanElement, AvatarStatusProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarStatus.displayName, context.telemetry);\n  setStart();\n\n  const { className, color, icon, size, state, design, styles, variables } = props;\n  const { classes } = useStyles<AvatarStatusStylesProps>(AvatarStatus.displayName, {\n    className: avatarStatusClassName,\n    mapPropsToStyles: () => ({\n      color,\n      size,\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: AvatarStatus.displayName,\n    rtl: context.rtl,\n  });\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarStatus.handledProps, props);\n\n  const iconElement = createShorthand(\n    AvatarStatusIcon,\n    icon as ShorthandValue<AvatarStatusIconProps & { as: 'span' }>,\n    {\n      defaultProps: () => ({\n        state,\n      }),\n    },\n  );\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })}>\n      {iconElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, AvatarStatusProps> & FluentComponentStaticProps;\n\nAvatarStatus.displayName = 'AvatarStatus';\nAvatarStatus.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nAvatarStatus.handledProps = Object.keys(AvatarStatus.propTypes) as any;\nAvatarStatus.defaultProps = {\n  accessibility: avatarStatusBehavior,\n  as: 'span',\n  size: 'medium',\n  state: 'unknown',\n};\n\nAvatarStatus.create = createShorthandFactory({ Component: AvatarStatus, mappedProp: 'state' });\n"],"file":"AvatarStatus.js"}