"use strict";

exports.__esModule = true;
exports.breadcrumbDividerClassName = exports.BreadcrumbDivider = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactBindings = require("@fluentui/react-bindings");

var _utils = require("../../utils");

var _accessibility = require("@fluentui/accessibility");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var breadcrumbDividerClassName = 'ui-breadcrumb__divider';
/**
 * BreadcrumbDivider divides BreadcrumbItem components within Breadcrumb
 */

exports.breadcrumbDividerClassName = breadcrumbDividerClassName;
var BreadcrumbDivider = (0, _reactBindings.compose)(function (props, ref, composeOptions) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      content = props.content,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: composeOptions.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(composeOptions.displayName, {
    className: composeOptions.className,
    composeOptions: composeOptions,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var unhandledProps = (0, _reactBindings.useUnhandledProps)(composeOptions.handledProps, props);
  var ElementType = (0, _reactBindings.getElementType)(props);
  var result = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    ref: ref
  }, unhandledProps)), (0, _reactBindings.childrenExist)(children) ? children : content);
  setEnd();
  return result;
}, {
  className: breadcrumbDividerClassName,
  displayName: 'BreadcrumbDivider',
  handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables']
});
exports.BreadcrumbDivider = BreadcrumbDivider;
BreadcrumbDivider.defaultProps = {
  as: 'span',
  children: '/',
  accessibility: _accessibility.breadcrumbDividerBehavior
};
BreadcrumbDivider.propTypes = _utils.commonPropTypes.createCommon();
//# sourceMappingURL=BreadcrumbDivider.js.map
