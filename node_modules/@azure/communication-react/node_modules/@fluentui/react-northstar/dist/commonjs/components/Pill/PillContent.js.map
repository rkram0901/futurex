{"version":3,"sources":["components/Pill/PillContent.tsx"],"names":["pillContentClassName","PillContent","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","styles","variables","size","actionable","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","PropTypes","bool","Object","keys","defaultProps","as","shorthandConfig","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Accessibility } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  SizeValue,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface PillContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /**\n   * A Pill can be sized.\n   */\n  size?: Extract<SizeValue, 'smaller' | 'small' | 'medium'>;\n\n  /**\n   * A Pill can be actionable.\n   */\n  actionable?: boolean;\n}\n\nexport type PillContentStylesProps = Required<Pick<PillContentProps, 'size' | 'actionable'>>;\nexport const pillContentClassName = 'ui-pillcontent';\n\n/**\n * A PillContent allows user to classify content.\n */\nexport const PillContent = (React.forwardRef<HTMLSpanElement, PillContentProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(PillContent.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, content, design, styles, variables, size, actionable } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: PillContent.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<PillContentStylesProps>(PillContent.displayName, {\n    className: pillContentClassName,\n    mapPropsToStyles: () => ({ size, actionable }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(PillContent.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, PillContentProps> &\n  FluentComponentStaticProps<PillContentProps>;\n\nPillContent.displayName = 'PillContent';\n\nPillContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  actionable: PropTypes.bool,\n};\n\nPillContent.handledProps = Object.keys(PillContent.propTypes) as any;\n\nPillContent.defaultProps = {\n  as: 'span',\n};\n\nPillContent.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"PillContent.js"}