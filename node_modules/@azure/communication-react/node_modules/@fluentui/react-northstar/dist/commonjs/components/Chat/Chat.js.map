{"version":3,"sources":["components/Chat/Chat.tsx"],"names":["chatClassName","chatSlotClassNames","item","Chat","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","density","design","items","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","childBehaviors","contextProps","behaviors","message","element","unstable_wrapWithFocusZone","root","rtlTextContainer","getAttributes","forElements","ChatItem","create","defaultProps","chatBehavior","as","defaultChatDensity","propTypes","commonPropTypes","createCommon","content","PropTypes","arrayOf","customPropTypes","itemShorthand","oneOf","Object","keys","Item","Message","ChatMessage","MessageHeader","ChatMessageHeader","MessageDetails","ChatMessageDetails","MessageReadStatus","ChatMessageReadStatus","Component"],"mappings":"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","sourcesContent":["import { Accessibility, chatBehavior, ChatBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ForwardRefWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { FluentComponentStaticProps, ShorthandCollection } from '../../types';\nimport {\n  ChildrenComponentProps,\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport { ChatContextProvider, ChatContextValue } from './chatContext';\nimport { ChatDensity, defaultChatDensity } from './chatDensity';\nimport { ChatItem, ChatItemProps } from './ChatItem';\nimport { ChatMessage } from './ChatMessage';\nimport { ChatMessageDetails } from './ChatMessageDetails';\nimport { ChatMessageHeader } from './ChatMessageHeader';\nimport { ChatMessageReadStatus } from './ChatMessageReadStatus';\n\nexport interface ChatSlotClassNames {\n  item: string;\n}\n\nexport interface ChatProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatBehaviorProps>;\n\n  /** Chat density. */\n  density?: ChatDensity;\n\n  /** Shorthand array of the items inside the chat. */\n  items?: ShorthandCollection<ChatItemProps>;\n}\n\nexport type ChatStylesProps = Pick<ChatProps, 'density'>;\nexport const chatClassName = 'ui-chat';\nexport const chatSlotClassNames: ChatSlotClassNames = {\n  item: `${chatClassName}__item`,\n};\n\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\nexport const Chat = (React.forwardRef<HTMLUListElement, ChatProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Chat.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, density, design, items, styles, variables } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Chat.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ChatStylesProps>(Chat.displayName, {\n    className: chatClassName,\n    mapPropsToStyles: () => ({ density }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Chat.handledProps, props);\n\n  const childBehaviors = accessibility && (accessibility as Accessibility<ChatProps>)(props).childBehaviors;\n\n  const contextProps: ChatContextValue = {\n    density,\n    behaviors: {\n      item: childBehaviors?.item,\n      message: childBehaviors?.message,\n    },\n  };\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      <ChatContextProvider value={contextProps}>\n        {childrenExist(children)\n          ? children\n          : _.map(items, item =>\n              ChatItem.create(item, {\n                defaultProps: () => ({ className: chatSlotClassNames.item }),\n              }),\n            )}\n      </ChatContextProvider>\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'ul', HTMLUListElement, ChatProps> &\n  FluentComponentStaticProps<ChatProps> & {\n    Item: typeof ChatItem;\n    Message: typeof ChatMessage;\n    MessageDetails: typeof ChatMessageDetails;\n    MessageReadStatus: typeof ChatMessageReadStatus;\n    MessageHeader: typeof ChatMessageHeader;\n  };\n\nChat.displayName = 'Chat';\n\nChat.defaultProps = {\n  accessibility: chatBehavior,\n  as: 'ul',\n  density: defaultChatDensity,\n};\nChat.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: PropTypes.arrayOf(customPropTypes.itemShorthand),\n  density: PropTypes.oneOf<ChatDensity>(['comfy', 'compact']),\n};\nChat.handledProps = Object.keys(Chat.propTypes) as any;\n\nChat.Item = ChatItem;\nChat.Message = ChatMessage;\nChat.MessageHeader = ChatMessageHeader;\nChat.MessageDetails = ChatMessageDetails;\nChat.MessageReadStatus = ChatMessageReadStatus;\n\nChat.create = createShorthandFactory({ Component: Chat });\n"],"file":"Chat.js"}