{"version":3,"sources":["components/RadioGroup/RadioGroupItem.tsx"],"names":["radioGroupItemClassName","radioGroupItemSlotClassNames","indicator","label","RadioGroupItem","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","checkedIndicator","disabled","vertical","className","design","styles","variables","shouldFocus","elementRef","useRef","ElementType","unhandledProps","handledProps","defaultValue","defaultChecked","value","checked","initialValue","setChecked","prevChecked","handleClick","e","useEffect","current","undefined","focus","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","resolvedStyles","getA11yProps","accessibility","debugName","actionHandlers","performClick","preventDefault","mapPropsToBehavior","handleChange","element","unstable_wrapWithFocusZone","root","onClick","onChange","Box","create","defaultProps","as","propTypes","commonPropTypes","createCommon","content","PropTypes","bool","customPropTypes","shorthandAllowingChildren","itemShorthand","name","string","func","oneOfType","number","radioGroupItemBehavior","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, radioGroupItemBehavior, RadioGroupItemBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport {\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  shouldPreventDefaultOnKeyDown,\n} from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport {\n  useAutoControlled,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport { RadioButtonIcon } from '@fluentui/react-icons-northstar';\n\nexport interface RadioGroupItemSlotClassNames {\n  indicator: string;\n  label: string;\n}\n\nexport interface RadioGroupItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<RadioGroupItemBehaviorProps>;\n\n  /** Whether or not radio item is checked. */\n  checked?: boolean;\n\n  /**\n   * Called after radio item checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** The label of the radio item. */\n  label?: ShorthandValue<BoxProps>;\n\n  /** Initial checked value. */\n  defaultChecked?: boolean;\n\n  /** A radio item can appear disabled and be unable to change states. */\n  disabled?: boolean;\n\n  /** The radio item indicator can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** The checked radio item indicator can be customized. */\n  checkedIndicator?: ShorthandValue<BoxProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /**\n   * Called after radio item is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** Whether should focus when checked */\n  shouldFocus?: boolean; // TODO: RFC #306\n\n  /** The HTML input value. */\n  value?: string | number;\n\n  /** A vertical radio group displays elements vertically. */\n  vertical?: boolean;\n}\n\nexport const radioGroupItemClassName = 'ui-radiogroup__item';\nexport const radioGroupItemSlotClassNames: RadioGroupItemSlotClassNames = {\n  indicator: `${radioGroupItemClassName}__indicator`,\n  label: `${radioGroupItemClassName}__label`,\n};\n\nexport type RadioGroupItemStylesProps = Required<Pick<RadioGroupItemProps, 'disabled' | 'vertical' | 'checked'>>;\n\n/**\n * A RadioGroupItem represents single input element within a RadioGroup.\n *\n * @accessibility\n * Radio items need to be grouped to correctly handle accessibility.\n */\nexport const RadioGroupItem = (React.forwardRef<HTMLDivElement, RadioGroupItemProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(RadioGroupItem.displayName, context.telemetry);\n  setStart();\n  const {\n    label,\n    checkedIndicator,\n    indicator,\n    disabled,\n    vertical,\n    className,\n    design,\n    styles,\n    variables,\n    shouldFocus,\n  } = props;\n  const elementRef = React.useRef<HTMLElement>();\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(RadioGroupItem.handledProps, props);\n\n  const [checked, setChecked] = useAutoControlled({\n    defaultValue: props.defaultChecked,\n    value: props.checked,\n    initialValue: false,\n  });\n\n  const prevChecked = React.useRef<boolean>(checked);\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    _.invoke(props, 'onClick', e, props);\n    setChecked(prevChecked => {\n      return !prevChecked;\n    });\n  };\n\n  // This behavior is not conformant with native input radio, it was added to avoid breaking change\n  // and it should be fixed to be conformant with native, only calling onChange when item is clicked (checked will always be true)\n  React.useEffect(() => {\n    if (prevChecked.current !== checked) {\n      _.invoke(props, 'onChange', undefined, { ...props, checked });\n      prevChecked.current = checked;\n    }\n  });\n\n  React.useEffect(() => {\n    if (checked && shouldFocus) elementRef.current.focus();\n  }, [checked, shouldFocus]);\n\n  const { classes, styles: resolvedStyles } = useStyles<RadioGroupItemStylesProps>(RadioGroupItem.displayName, {\n    className: radioGroupItemClassName,\n    mapPropsToStyles: () => ({\n      vertical,\n      disabled,\n      checked,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11yProps = useAccessibility<RadioGroupItemBehaviorProps>(props.accessibility, {\n    debugName: RadioGroupItem.displayName,\n    actionHandlers: {\n      performClick: e => {\n        if (shouldPreventDefaultOnKeyDown(e)) {\n          e.preventDefault();\n        }\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      checked,\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleChange = (e: React.ChangeEvent) => {\n    // RadioGroupItem component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(props, 'onChange', e, { ...props, checked });\n  };\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <Ref innerRef={elementRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          onClick: handleClick,\n          onChange: handleChange,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {Box.create(checked ? checkedIndicator : indicator, {\n          defaultProps: () => ({\n            className: radioGroupItemSlotClassNames.indicator,\n            styles: resolvedStyles.indicator,\n          }),\n        })}\n        {Box.create(label, {\n          defaultProps: () => ({\n            as: 'span',\n            className: radioGroupItemSlotClassNames.label,\n            styles: resolvedStyles.label,\n          }),\n        })}\n      </ElementType>\n    </Ref>,\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, RadioGroupItemProps> &\n  FluentComponentStaticProps<RadioGroupItemProps>;\n\nRadioGroupItem.displayName = 'RadioGroupItem';\n\nRadioGroupItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  checkedIndicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  name: PropTypes.string,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func,\n  shouldFocus: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  vertical: PropTypes.bool,\n};\n\nRadioGroupItem.defaultProps = {\n  accessibility: radioGroupItemBehavior,\n  indicator: <RadioButtonIcon outline />,\n  checkedIndicator: <RadioButtonIcon />,\n};\n\nRadioGroupItem.handledProps = Object.keys(RadioGroupItem.propTypes) as any;\n\nRadioGroupItem.create = createShorthandFactory({ Component: RadioGroupItem, mappedProp: 'label' });\n"],"file":"RadioGroupItem.js"}