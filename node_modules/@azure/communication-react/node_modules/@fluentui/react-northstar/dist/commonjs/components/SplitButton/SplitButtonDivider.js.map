{"version":3,"sources":["components/SplitButton/SplitButtonDivider.tsx"],"names":["SplitButtonDividerClassName","SplitButtonDivider","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","design","styles","variables","accessibility","ElementType","primary","unhandledProps","handledProps","getA11yProps","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","element","root","propTypes","commonPropTypes","createCommon","PropTypes","bool","Object","keys"],"mappings":";;;;;AAAA;;AACA;;AAEA;;AAUA;;;;;;AA0BO,IAAMA,2BAA2B,GAAG,uBAApC;AAEP;AACA;AACA;;;AACO,IAAMC,kBAAkB,gBAAIC,KAAK,CAACC,UAAN,CAA0D,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC3G,MAAMC,OAAO,GAAG,sCAAhB;;AACA,sBAA6B,iCAAaL,kBAAkB,CAACM,WAAhC,EAA6CD,OAAO,CAACE,SAArD,CAA7B;AAAA,MAAQC,QAAR,iBAAQA,QAAR;AAAA,MAAkBC,MAAlB,iBAAkBA,MAAlB;;AACAD,EAAAA,QAAQ;AACR,MAAQE,SAAR,GAAgEP,KAAhE,CAAQO,SAAR;AAAA,MAAmBC,MAAnB,GAAgER,KAAhE,CAAmBQ,MAAnB;AAAA,MAA2BC,MAA3B,GAAgET,KAAhE,CAA2BS,MAA3B;AAAA,MAAmCC,SAAnC,GAAgEV,KAAhE,CAAmCU,SAAnC;AAAA,MAA8CC,aAA9C,GAAgEX,KAAhE,CAA8CW,aAA9C;AACA,MAAMC,WAAW,GAAG,mCAAeZ,KAAf,CAApB;AACA,MAAQa,OAAR,GAAoBb,KAApB,CAAQa,OAAR;AACA,MAAMC,cAAc,GAAG,sCAAkBjB,kBAAkB,CAACkB,YAArC,EAAmDf,KAAnD,CAAvB;AACA,MAAMgB,YAAY,GAAG,qCAAwBL,aAAxB,EAAuC;AAC1DM,IAAAA,SAAS,EAAEpB,kBAAkB,CAACM,WAD4B;AAE1De,IAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAF6C,GAAvC,CAArB;;AAIA,mBAAoB,8BAAyCrB,kBAAkB,CAACM,WAA5D,EAAyE;AAC3FI,IAAAA,SAAS,EAAEX,2BADgF;AAE3FuB,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBN,QAAAA,OAAO,EAAPA;AADuB,OAAP;AAAA,KAFyE;AAK3FO,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7Bb,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KALmE;AAW3FQ,IAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAX8E,GAAzE,CAApB;AAAA,MAAQG,OAAR,cAAQA,OAAR;;AAcA,MAAMC,OAAO,gBACX,oBAAC,WAAD,EACMN,YAAY,CAAC,MAAD;AACdT,IAAAA,SAAS,EAAEc,OAAO,CAACE,IADL;AAEdtB,IAAAA,GAAG,EAAHA;AAFc,KAGXa,cAHW,EADlB,CADF;AASAR,EAAAA,MAAM;AACN,SAAOgB,OAAP;AACD,CArCkC,CAA5B;;AAwCPzB,kBAAkB,CAACM,WAAnB,GAAiC,oBAAjC;AAEAN,kBAAkB,CAAC2B,SAAnB,qBACKC,uBAAgBC,YAAhB,EADL;AAEEb,EAAAA,OAAO,EAAEc,SAAS,CAACC;AAFrB;AAKA/B,kBAAkB,CAACkB,YAAnB,GAAkCc,MAAM,CAACC,IAAP,CAAYjC,kBAAkB,CAAC2B,SAA/B,CAAlC","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Accessibility } from '@fluentui/accessibility';\nimport {\n  useTelemetry,\n  useAccessibility,\n  getElementType,\n  useFluentContext,\n  useUnhandledProps,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface SplitButtonDividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A split button divider can be formatted to show different levels of emphasis. */\n  primary?: boolean;\n}\n\nexport type SplitButtonDividerStylesProps = Required<Pick<SplitButtonDividerProps, 'primary'>>;\n\nexport const SplitButtonDividerClassName = 'ui-splitButtonDivider';\n\n/**\n * A SplitButtonDivider visually segments content.\n */\nexport const SplitButtonDivider = (React.forwardRef<HTMLDivElement, SplitButtonDividerProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(SplitButtonDivider.displayName, context.telemetry);\n  setStart();\n  const { className, design, styles, variables, accessibility } = props;\n  const ElementType = getElementType(props);\n  const { primary } = props;\n  const unhandledProps = useUnhandledProps(SplitButtonDivider.handledProps, props);\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: SplitButtonDivider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<SplitButtonDividerStylesProps>(SplitButtonDivider.displayName, {\n    className: SplitButtonDividerClassName,\n    mapPropsToStyles: () => ({\n      primary,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n    />\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, SplitButtonDividerProps> &\n  FluentComponentStaticProps<SplitButtonDividerProps>;\n\nSplitButtonDivider.displayName = 'SplitButtonDivider';\n\nSplitButtonDivider.propTypes = {\n  ...commonPropTypes.createCommon(),\n  primary: PropTypes.bool,\n};\n\nSplitButtonDivider.handledProps = Object.keys(SplitButtonDivider.propTypes) as any;\n"],"file":"SplitButtonDivider.js"}