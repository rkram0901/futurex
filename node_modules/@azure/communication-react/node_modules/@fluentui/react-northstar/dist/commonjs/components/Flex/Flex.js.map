{"version":3,"sources":["components/Flex/Flex.tsx"],"names":["flexClassName","Flex","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","children","className","column","debug","design","fill","gap","hAlign","inline","padding","space","styles","variables","vAlign","wrap","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","ElementType","unhandledProps","handledProps","content","Children","map","child","isFlexItemElement","cloneElement","flexDirection","element","root","propTypes","commonPropTypes","createCommon","accessibility","PropTypes","bool","oneOf","Object","keys","Item","FlexItem"],"mappings":"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","sourcesContent":["import {\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { commonPropTypes, UIComponentProps, ChildrenComponentProps } from '../../utils';\nimport { FlexItem } from './FlexItem';\n\nexport interface FlexProps extends UIComponentProps, ChildrenComponentProps {\n  /** Defines if container should be inline element. */\n  inline?: boolean;\n\n  /** Sets vertical flow direction. */\n  column?: boolean;\n\n  /** Allows overflow items to wrap on the next container's line. */\n  wrap?: boolean;\n\n  /** Controls items alignment in horizontal direction. */\n  hAlign?: 'start' | 'center' | 'end' | 'stretch';\n\n  /** Controls items alignment in vertical direction. */\n  vAlign?: 'start' | 'center' | 'end' | 'stretch';\n\n  /** Defines strategy for distributing remaining space between items. */\n  space?: 'around' | 'between' | 'evenly';\n\n  /** Defines gap between each two adjacent child items. */\n  gap?: 'gap.smaller' | 'gap.small' | 'gap.medium' | 'gap.large';\n\n  /** Defines container's padding. */\n  padding?: 'padding.medium';\n\n  /** Enables debug mode. */\n  debug?: boolean;\n\n  /** Orders container to fill all parent's space available. */\n  fill?: boolean;\n}\n\nexport type FlexStylesProps = Pick<\n  FlexProps,\n  'column' | 'debug' | 'fill' | 'gap' | 'hAlign' | 'inline' | 'padding' | 'space' | 'vAlign' | 'wrap'\n>;\nexport const flexClassName = 'ui-flex';\n\n/**\n * A Flex is a layout component that arranges group of items aligned towards common direction (either row or column).\n */\nexport const Flex = (React.forwardRef<HTMLDivElement, FlexProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Flex.displayName, context.telemetry);\n  setStart();\n\n  const {\n    children,\n    className,\n    column,\n    debug,\n    design,\n    fill,\n    gap,\n    hAlign,\n    inline,\n    padding,\n    space,\n    styles,\n    variables,\n    vAlign,\n    wrap,\n  } = props;\n\n  const { classes } = useStyles<FlexStylesProps>(Flex.displayName, {\n    className: flexClassName,\n    mapPropsToStyles: () => ({\n      column,\n      debug,\n      fill,\n      gap,\n      hAlign,\n      inline,\n      padding,\n      space,\n      vAlign,\n      wrap,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Flex.handledProps, props);\n\n  const content = React.Children.map(children, child => {\n    const isFlexItemElement: boolean = _.get(child, 'type.__isFlexItem');\n\n    return isFlexItemElement\n      ? React.cloneElement(child as React.ReactElement, {\n          flexDirection: column ? 'column' : 'row',\n        })\n      : child;\n  });\n  const element = (\n    <ElementType className={classes.root} {...unhandledProps} ref={ref}>\n      {content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, FlexProps> & {\n  handledProps: (keyof FlexProps)[];\n  Item: typeof FlexItem;\n};\n\nFlex.displayName = 'Flex';\n\nFlex.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    content: false,\n  }),\n\n  inline: PropTypes.bool,\n\n  column: PropTypes.bool,\n\n  wrap: PropTypes.bool,\n\n  hAlign: PropTypes.oneOf<'start' | 'center' | 'end' | 'stretch'>(['start', 'center', 'end', 'stretch']),\n  vAlign: PropTypes.oneOf<'start' | 'center' | 'end' | 'stretch'>(['start', 'center', 'end', 'stretch']),\n\n  space: PropTypes.oneOf<'around' | 'between' | 'evenly'>(['around', 'between', 'evenly']),\n\n  gap: PropTypes.oneOf<'gap.smaller' | 'gap.small' | 'gap.medium' | 'gap.large'>([\n    'gap.smaller',\n    'gap.small',\n    'gap.medium',\n    'gap.large',\n  ]),\n\n  padding: PropTypes.oneOf<'padding.medium'>(['padding.medium']),\n  fill: PropTypes.bool,\n\n  debug: PropTypes.bool,\n};\nFlex.handledProps = Object.keys(Flex.propTypes) as any;\n\nFlex.Item = FlexItem;\n"],"file":"Flex.js"}