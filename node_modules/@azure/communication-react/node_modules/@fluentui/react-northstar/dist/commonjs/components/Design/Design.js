"use strict";

exports.__esModule = true;
exports.Design = Design;

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * The Design component provides a theme safe subset of CSS for designing layouts.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function Design(_ref) {
  var config = _ref.config,
      children = _ref.children;
  var context = (0, _reactBindings.useFluentContext)();
  var getConfig = React.useCallback(function () {
    return config;
  }, [config]); // Heads Up! Keep in sync with renderComponent.tsx

  var styleParam = {
    displayName: Design.displayName,
    disableAnimations: context.disableAnimations,
    direction: context.rtl ? 'rtl' : 'ltr',
    sanitizeCss: context.performance.enableSanitizeCssPlugin
  };
  var className = context.renderer.renderRule(getConfig, styleParam);
  return children({
    className: className
  });
}

Design.displayName = 'Design';
Design.propTypes = {
  children: PropTypes.func.isRequired,
  config: customPropTypes.design.isRequired
};
//# sourceMappingURL=Design.js.map
