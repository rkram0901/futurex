{"version":3,"sources":["components/TextArea/TextArea.tsx"],"names":["textAreaClassName","TextArea","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","disabled","accessibility","inverted","resize","fluid","className","design","styles","variables","error","defaultValue","value","initialValue","setValue","unhandledProps","handledProps","getA11yProps","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","handleChange","e","newValue","element","root","onChange","propTypes","commonPropTypes","createCommon","content","PropTypes","string","func","bool","oneOf","defaultProps","as","textAreaBehavior","Object","keys","create","Component"],"mappings":";;;;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;AACA;;;;;;AAkDO,IAAMA,iBAAiB,GAAG,aAA1B;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,IAAMC,QAAQ,gBAAIC,KAAK,CAACC,UAAN,CAAqD,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC5F,MAAMC,OAAO,GAAG,sCAAhB;;AACA,sBAA6B,iCAAaL,QAAQ,CAACM,WAAtB,EAAmCD,OAAO,CAACE,SAA3C,CAA7B;AAAA,MAAQC,QAAR,iBAAQA,QAAR;AAAA,MAAkBC,MAAlB,iBAAkBA,MAAlB;;AAEAD,EAAAA,QAAQ;AAER,MAAQE,QAAR,GAA0GP,KAA1G,CAAQO,QAAR;AAAA,MAAkBC,aAAlB,GAA0GR,KAA1G,CAAkBQ,aAAlB;AAAA,MAAiCC,QAAjC,GAA0GT,KAA1G,CAAiCS,QAAjC;AAAA,MAA2CC,MAA3C,GAA0GV,KAA1G,CAA2CU,MAA3C;AAAA,MAAmDC,KAAnD,GAA0GX,KAA1G,CAAmDW,KAAnD;AAAA,MAA0DC,SAA1D,GAA0GZ,KAA1G,CAA0DY,SAA1D;AAAA,MAAqEC,MAArE,GAA0Gb,KAA1G,CAAqEa,MAArE;AAAA,MAA6EC,MAA7E,GAA0Gd,KAA1G,CAA6Ec,MAA7E;AAAA,MAAqFC,SAArF,GAA0Gf,KAA1G,CAAqFe,SAArF;AAAA,MAAgGC,KAAhG,GAA0GhB,KAA1G,CAAgGgB,KAAhG;;AAEA,2BAA0B,sCAAkB;AAC1CC,IAAAA,YAAY,EAAEjB,KAAK,CAACiB,YADsB;AAE1CC,IAAAA,KAAK,EAAElB,KAAK,CAACkB,KAF6B;AAG1CC,IAAAA,YAAY,EAAE;AAH4B,GAAlB,CAA1B;AAAA,MAAOD,KAAP;AAAA,MAAcE,QAAd;;AAMA,MAAMC,cAAc,GAAG,sCAAkBxB,QAAQ,CAACyB,YAA3B,EAAyCtB,KAAzC,CAAvB;AAEA,MAAMuB,YAAY,GAAG,qCAAwCf,aAAxC,EAAuD;AAC1EgB,IAAAA,SAAS,EAAE3B,QAAQ,CAACM,WADsD;AAE1EsB,IAAAA,kBAAkB,EAAE;AAAA,aAAO;AACzBlB,QAAAA,QAAQ,EAARA;AADyB,OAAP;AAAA,KAFsD;AAK1EmB,IAAAA,GAAG,EAAExB,OAAO,CAACwB;AAL6D,GAAvD,CAArB;;AAQA,mBAAoB,8BAA+B7B,QAAQ,CAACM,WAAxC,EAAqD;AACvES,IAAAA,SAAS,EAAEhB,iBAD4D;AAEvE+B,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBlB,QAAAA,QAAQ,EAARA,QADuB;AAEvBC,QAAAA,MAAM,EAANA,MAFuB;AAGvBC,QAAAA,KAAK,EAALA,KAHuB;AAIvBJ,QAAAA,QAAQ,EAARA,QAJuB;AAKvBS,QAAAA,KAAK,EAALA;AALuB,OAAP;AAAA,KAFqD;AASvEY,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BhB,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KAT+C;AAevEW,IAAAA,GAAG,EAAExB,OAAO,CAACwB;AAf0D,GAArD,CAApB;AAAA,MAAQG,OAAR,cAAQA,OAAR;;AAkBA,MAAMC,WAAW,GAAG,mCAAe9B,KAAf,CAApB;;AAEA,MAAM+B,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAA4C;AAC/D,QAAMC,QAAQ,GAAG,mBAAMD,CAAN,EAAS,cAAT,CAAjB;AAEA,0BAAShC,KAAT,EAAgB,UAAhB,EAA4BgC,CAA5B,oBAAoChC,KAApC;AAA2CkB,MAAAA,KAAK,EAAEe;AAAlD;AACAb,IAAAA,QAAQ,CAACa,QAAD,CAAR;AACD,GALD;;AAOA,MAAMC,OAAO,gBACX,oBAAC,WAAD,EACMX,YAAY,CAAC,MAAD;AACdX,IAAAA,SAAS,EAAEiB,OAAO,CAACM,IADL;AAEdjB,IAAAA,KAAK,EAALA,KAFc;AAGdX,IAAAA,QAAQ,EAARA,QAHc;AAIdN,IAAAA,GAAG,EAAHA,GAJc;AAKdmC,IAAAA,QAAQ,EAAEL;AALI,KAMXV,cANW,EADlB,CADF;AAYAf,EAAAA,MAAM;AACN,SAAO4B,OAAP;AACD,CAjEwB,CAAlB;;AAoEPrC,QAAQ,CAACM,WAAT,GAAuB,UAAvB;AAEAN,QAAQ,CAACwC,SAAT,qBACKC,uBAAgBC,YAAhB,CAA6B;AAC9BC,EAAAA,OAAO,EAAE;AADqB,CAA7B,CADL;AAIEvB,EAAAA,YAAY,EAAEwB,SAAS,CAACC,MAJ1B;AAKEN,EAAAA,QAAQ,EAAEK,SAAS,CAACE,IALtB;AAMEzB,EAAAA,KAAK,EAAEuB,SAAS,CAACC,MANnB;AAOEnC,EAAAA,QAAQ,EAAEkC,SAAS,CAACG,IAPtB;AAQEnC,EAAAA,QAAQ,EAAEgC,SAAS,CAACG,IARtB;AASEjC,EAAAA,KAAK,EAAE8B,SAAS,CAACG,IATnB;AAUE5B,EAAAA,KAAK,EAAEyB,SAAS,CAACG,IAVnB;AAWElC,EAAAA,MAAM,EAAE+B,SAAS,CAACI,KAAV,CAAgB,CAAC,MAAD,EAAS,MAAT,EAAiB,YAAjB,EAA+B,UAA/B,CAAhB;AAXV;AAcAhD,QAAQ,CAACiD,YAAT,GAAwB;AACtBC,EAAAA,EAAE,EAAE,UADkB;AAEtBvC,EAAAA,aAAa,EAAEwC;AAFO,CAAxB;AAKAnD,QAAQ,CAACyB,YAAT,GAAwB2B,MAAM,CAACC,IAAP,CAAYrD,QAAQ,CAACwC,SAArB,CAAxB;AAEAxC,QAAQ,CAACsD,MAAT,GAAkB,mCAAuB;AACvCC,EAAAA,SAAS,EAAEvD;AAD4B,CAAvB,CAAlB","sourcesContent":["import { Accessibility, textAreaBehavior, TextAreaBehaviorProps } from '@fluentui/accessibility';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes, createShorthandFactory } from '../../utils';\nimport {\n  useAutoControlled,\n  getElementType,\n  useTelemetry,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TextAreaBehaviorProps>;\n\n  /** The default value of the text area. */\n  defaultValue?: string;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<TextAreaProps>;\n\n  /** The value of the text area. */\n  value?: string;\n\n  /** The text area becomes read-only. */\n  disabled?: boolean;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /** A textarea can be resized. */\n  resize?: 'none' | 'both' | 'horizontal' | 'vertical';\n\n  /** A textarea can take the width of its container. */\n  fluid?: boolean;\n\n  /** A text area can have error state. */\n  error?: boolean;\n\n  /** A text area can be required to be valid. */\n  required?: boolean;\n}\n\nexport type TextAreaStylesProps = Required<Pick<TextAreaProps, 'inverted' | 'resize' | 'fluid' | 'disabled' | 'error'>>;\n\nexport const textAreaClassName = 'ui-textarea';\n\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\nexport const TextArea = (React.forwardRef<HTMLTextAreaElement, TextAreaProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TextArea.displayName, context.telemetry);\n\n  setStart();\n\n  const { disabled, accessibility, inverted, resize, fluid, className, design, styles, variables, error } = props;\n\n  const [value, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    value: props.value,\n    initialValue: '',\n  });\n\n  const unhandledProps = useUnhandledProps(TextArea.handledProps, props);\n\n  const getA11yProps = useAccessibility<TextAreaBehaviorProps>(accessibility, {\n    debugName: TextArea.displayName,\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TextAreaStylesProps>(TextArea.displayName, {\n    className: textAreaClassName,\n    mapPropsToStyles: () => ({\n      inverted,\n      resize,\n      fluid,\n      disabled,\n      error,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n\n  const handleChange = (e: React.ChangeEvent | React.FormEvent) => {\n    const newValue = _.get(e, 'target.value');\n\n    _.invoke(props, 'onChange', e, { ...props, value: newValue });\n    setValue(newValue);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        value,\n        disabled,\n        ref,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    />\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'textarea', HTMLTextAreaElement, TextAreaProps> &\n  FluentComponentStaticProps<TextAreaProps>;\n\nTextArea.displayName = 'TextArea';\n\nTextArea.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n  fluid: PropTypes.bool,\n  error: PropTypes.bool,\n  resize: PropTypes.oneOf(['none', 'both', 'horizontal', 'vertical']),\n};\n\nTextArea.defaultProps = {\n  as: 'textarea',\n  accessibility: textAreaBehavior,\n};\n\nTextArea.handledProps = Object.keys(TextArea.propTypes) as any;\n\nTextArea.create = createShorthandFactory({\n  Component: TextArea,\n});\n"],"file":"TextArea.js"}