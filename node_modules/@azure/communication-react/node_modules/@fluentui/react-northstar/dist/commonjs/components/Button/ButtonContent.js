"use strict";

exports.__esModule = true;
exports.buttonContentClassName = exports.ButtonContent = void 0;

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var buttonContentClassName = 'ui-button__content';
/**
 * A ButtonContent allows a user to have a dedicated component that can be targeted from the theme.
 */

exports.buttonContentClassName = buttonContentClassName;
var ButtonContent = (0, _reactBindings.compose)(_Box.Box, {
  className: buttonContentClassName,
  displayName: 'ButtonContent',
  mapPropsToStylesProps: function mapPropsToStylesProps(props) {
    return {
      size: props.size
    };
  },
  handledProps: ['size'],
  overrideStyles: true,
  shorthandConfig: {
    mappedProp: 'content'
  }
});
exports.ButtonContent = ButtonContent;
ButtonContent.defaultProps = {
  as: 'span'
};
ButtonContent.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  size: customPropTypes.size
});
//# sourceMappingURL=ButtonContent.js.map
