"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.labelClassName = exports.Label = void 0;

var _has2 = _interopRequireDefault(require("lodash/has"));

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Image = require("../Image/Image");

var _Box = require("../Box/Box");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var labelClassName = 'ui-label';
/**
 * A Label allows user to classify content.
 */

exports.labelClassName = labelClassName;
var Label = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var context = (0, _reactBindings.useFluentContext)();

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Label.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      circular = props.circular,
      color = props.color,
      content = props.content,
      icon = props.icon,
      iconPosition = props.iconPosition,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      image = props.image,
      imagePosition = props.imagePosition;
  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: Label.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Label.displayName, {
    className: labelClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        hasActionableIcon: (0, _has2.default)(icon, 'onClick'),
        hasImage: !!image,
        hasIcon: !!icon,
        circular: circular,
        color: color,
        imagePosition: imagePosition,
        iconPosition: iconPosition
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Label.handledProps, props);

  if ((0, _utils.childrenExist)(children)) {
    var _element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root,
      ref: ref
    }, _utils.rtlTextContainer.getAttributes({
      forElements: [children]
    }), unhandledProps)), children);

    setEnd();
    return _element;
  }

  var imageElement = _Image.Image.create(image, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.image
      };
    }
  });

  var iconElement = _Box.Box.create(icon, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.icon
      };
    }
  });

  var contentElement = _Box.Box.create(content, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.content
      };
    }
  });

  var startImage = imagePosition === 'start' && imageElement;
  var startIcon = iconPosition === 'start' && iconElement;
  var endIcon = iconPosition === 'end' && iconElement;
  var endImage = imagePosition === 'end' && imageElement;
  var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root,
    ref: ref
  }, unhandledProps)), startImage, startIcon, contentElement, endIcon, endImage);
  setEnd();
  return element;
});
exports.Label = Label;
Label.displayName = 'Label';
Label.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  color: true,
  content: 'shorthand'
}), {
  circular: PropTypes.bool,
  icon: customPropTypes.shorthandAllowingChildren,
  iconPosition: PropTypes.oneOf(['start', 'end']),
  image: customPropTypes.itemShorthandWithoutJSX,
  imagePosition: PropTypes.oneOf(['start', 'end']),
  fluid: PropTypes.bool
});
Label.handledProps = Object.keys(Label.propTypes);
Label.defaultProps = {
  as: 'span',
  imagePosition: 'start',
  iconPosition: 'end'
};
Label.create = (0, _utils.createShorthandFactory)({
  Component: Label,
  mappedProp: 'content'
});
//# sourceMappingURL=Label.js.map
