{"version":3,"sources":["components/Grid/Grid.tsx"],"names":["gridClassName","Grid","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","accessibility","children","className","columns","content","design","rows","styles","variables","getA11yProps","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","PropTypes","oneOfType","string","number","customPropTypes","every","disallow","arrayOf","nodeContent","Object","keys"],"mappings":"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","sourcesContent":["import { Accessibility, GridBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface GridProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available gridBehavior, gridHorizontalBehavior\n   * */\n  accessibility?: Accessibility<GridBehaviorProps>;\n\n  /** The columns of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */\n  columns?: string | number;\n\n  /** The rows of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */\n  rows?: string | number;\n}\n\nexport const gridClassName = 'ui-grid';\n\nexport type GridStylesProps = Pick<GridProps, 'columns' | 'rows'>;\n\n/**\n * A Grid is a layout component that harmonizes negative space, by controlling both the row and column alignment.\n */\nexport const Grid = (React.forwardRef<HTMLDivElement, GridProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Grid.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, columns, content, design, rows, styles, variables } = props;\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: Grid.displayName,\n\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<GridStylesProps>(Grid.displayName, {\n    className: gridClassName,\n    mapPropsToStyles: () => ({ columns, rows }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Grid.handledProps, props);\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, GridProps> & FluentComponentStaticProps<GridProps>;\n\nGrid.displayName = 'Grid';\n\nGrid.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nGrid.handledProps = Object.keys(Grid.propTypes) as any;\n"],"file":"Grid.js"}