{"version":3,"sources":["components/Tree/Tree.tsx"],"names":["treeClassName","Tree","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","selectable","children","renderedItems","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToBehavior","mapPropsToInlineStyles","classes","visibleItemIds","getItemById","registerItemRef","toggleItemActive","focusItemById","expandSiblings","toggleItemSelect","getToFocusIDByFirstCharacter","contextValue","useMemo","renderContent","map","id","item","expanded","parent","level","index","treeSize","TreeItem","create","defaultProps","renderItemTitle","overrideProps","key","element","unstable_wrapWithFocusZone","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","content","activeItemIds","customPropTypes","collectionShorthand","selectedItemIds","defaultActiveItemIds","defaultSelectedItemIds","exclusive","PropTypes","bool","items","collectionObjectShorthand","onActiveItemIdsChange","func","onSelectedItemIdsChange","Item","Title","TreeTitle","treeBehavior","Object","keys","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeBehavior, TreeBehaviorProps } from '@fluentui/accessibility';\nimport {\n  useTelemetry,\n  useUnhandledProps,\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { TreeItem, TreeItemProps } from './TreeItem';\nimport { TreeTitle, TreeTitleProps } from './TreeTitle';\nimport {\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  ObjectShorthandCollection,\n  FluentComponentStaticProps,\n  ShorthandRenderFunction,\n} from '../../types';\nimport { useTree } from './hooks/useTree';\nimport { TreeContext, TreeRenderContextValue } from './context';\n\nexport interface TreeProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeBehaviorProps>;\n\n  /** Ids of expanded items. */\n  activeItemIds?: string[];\n\n  /** Ids of selected leaf items. */\n  selectedItemIds?: string[];\n\n  /** Initial activeItemIds value. */\n  defaultActiveItemIds?: string[];\n\n  /** Initial selectedItemIds value. */\n  defaultSelectedItemIds?: string[];\n\n  /** Only allow one subtree to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** Shorthand array of props for Tree. */\n  items?: ObjectShorthandCollection<TreeItemProps>;\n\n  /**\n   * A custom render function for the title slot.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;\n\n  /**\n   * Called when active item ids change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeItemIds` reflecting the new state.\n   */\n  onActiveItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Called when tree item selection state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `selectedItemIds` reflecting the new state.\n   */\n  onSelectedItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Callback that provides rendered tree items to be used by react-virtualized for instance.\n   * Acts as a render prop, with the rendered tree items being the re-used logic.\n   *\n   * @param renderedItem - The array of rendered items.\n   * @returns The render prop result.\n   */\n  renderedItems?: (renderedItems: React.ReactElement[]) => React.ReactNode;\n\n  /** Whether or not tree items are selectable. */\n  selectable?: boolean;\n}\n\nexport const treeClassName = 'ui-tree';\n\nexport type TreeStylesProps = never;\n\n/**\n * A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n * @accessibilityIssues\n * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)\n * [Aria-selected and aria-checked are not output correctly for trees #432](https://github.com/FreedomScientific/VFO-standards-support/issues/432)\n * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)\n * [VoiceOver narrates \"selected false\" for DOM with role=option and no aria-selected attribute](http://www.openradar.me/FB8050959)\n * [VoiceOver does not support Aria 1.2 listbox role owning unselectable group role](http://www.openradar.me/FB8050958)\n * [Tree as table in Mac > VoiceOver narrates \" no selection \" when user navigates to tree/table](https://bugs.chromium.org/p/chromium/issues/detail?id=1273538)\n * [Tree as table in Mac > VoiceOver narrates \" 0 items enclosed \" when user navigates to expaded treeitem](https://bugs.chromium.org/p/chromium/issues/detail?id=1273540)\n * [Tree as table in Mac > VoiceOver doesn't narrate aria-labelledby element on treeitem](https://bugs.chromium.org/p/chromium/issues/detail?id=1273544)\n */\nexport const Tree = (React.forwardRef<HTMLDivElement, TreeProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Tree.displayName, context.telemetry);\n  setStart();\n\n  const { selectable, children, renderedItems, className, design, styles, variables } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Tree.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Tree.displayName,\n    rtl: context.rtl,\n    mapPropsToBehavior: () => ({\n      selectable,\n    }),\n  });\n\n  const { classes } = useStyles<TreeStylesProps>(Tree.displayName, {\n    className: treeClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const {\n    visibleItemIds,\n    getItemById,\n    registerItemRef,\n    toggleItemActive,\n    focusItemById,\n    expandSiblings,\n    toggleItemSelect,\n    getToFocusIDByFirstCharacter,\n  } = useTree(props);\n\n  const contextValue: TreeRenderContextValue = React.useMemo(\n    () => ({\n      getItemById,\n      registerItemRef,\n      toggleItemActive,\n      expandSiblings,\n      focusItemById,\n      toggleItemSelect,\n      getToFocusIDByFirstCharacter,\n    }),\n    [\n      getItemById,\n      registerItemRef,\n      toggleItemActive,\n      focusItemById,\n      expandSiblings,\n      toggleItemSelect,\n      getToFocusIDByFirstCharacter,\n    ],\n  );\n\n  const renderContent = (): React.ReactElement[] => {\n    return visibleItemIds.map(id => {\n      const item = getItemById(id);\n      const { expanded, parent, level, index, treeSize } = item;\n      return TreeItem.create(item.item, {\n        defaultProps: () =>\n          getA11yProps('item', {\n            renderItemTitle: props.renderItemTitle,\n          }),\n        overrideProps: {\n          expanded,\n          parent,\n          key: id,\n          level,\n          index,\n          treeSize,\n          selectable: selectable ? item.item.selectable : false,\n        },\n      });\n    });\n  };\n\n  const element = (\n    <TreeContext.Provider value={contextValue}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            ref,\n            ...rtlTextContainer.getAttributes({ forElements: [children] }),\n            ...unhandledProps,\n          })}\n        >\n          {childrenExist(children) ? children : renderedItems ? renderedItems(renderContent()) : renderContent()}\n        </ElementType>,\n      )}\n    </TreeContext.Provider>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, TreeProps> &\n  FluentComponentStaticProps<TreeProps> & {\n    Item: typeof TreeItem;\n    Title: typeof TreeTitle;\n  };\n\nTree.displayName = 'Tree';\n\nTree.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  activeItemIds: customPropTypes.collectionShorthand,\n  selectedItemIds: customPropTypes.collectionShorthand,\n  defaultActiveItemIds: customPropTypes.collectionShorthand,\n  defaultSelectedItemIds: customPropTypes.collectionShorthand,\n  exclusive: PropTypes.bool,\n  selectable: PropTypes.bool,\n  items: customPropTypes.collectionObjectShorthand,\n  onActiveItemIdsChange: PropTypes.func,\n  onSelectedItemIdsChange: PropTypes.func,\n  renderItemTitle: PropTypes.func,\n  renderedItems: PropTypes.func,\n};\n\nTree.Item = TreeItem;\nTree.Title = TreeTitle;\n\nTree.defaultProps = {\n  accessibility: treeBehavior,\n};\n\nTree.handledProps = Object.keys(Tree.propTypes) as any;\n\nTree.create = createShorthandFactory({\n  Component: Tree,\n  mappedArrayProp: 'items',\n});\n"],"file":"Tree.js"}