{"version":3,"sources":["components/Form/FormField.tsx"],"names":["formFieldClassName","formFieldMessageClassName","FormField","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","children","control","id","label","message","name","required","type","className","design","styles","variables","inline","errorMessage","ElementType","unhandledProps","handledProps","messageId","useRef","current","labelId","getA11yProps","accessibility","debugName","mapPropsToBehavior","hasErrorMessage","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","labelElement","Text","create","defaultProps","as","htmlFor","messageElement","controlElement","Box","error","shouldControlAppearFirst","content","element","root","propTypes","commonPropTypes","createCommon","customPropTypes","shorthandAllowingChildren","PropTypes","string","bool","itemShorthand","Object","keys","formFieldBehavior","Input","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Text, TextProps } from '../Text/Text';\nimport { Input } from '../Input/Input';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface FormFieldProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /**\n   * @deprecated\n   * A control for the form field.\n   */\n  control?: ShorthandValue<BoxProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<TextProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<TextProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** Message to be shown when input has error */\n  errorMessage?: ShorthandValue<TextProps>;\n}\n\nexport const formFieldClassName = 'ui-form__field';\nexport const formFieldMessageClassName = 'ui-form__field__message';\n\nexport type FormFieldStylesProps = Required<Pick<FormFieldProps, 'type' | 'inline' | 'required'>> & {\n  hasErrorMessage: boolean;\n};\n\n/**\n * A FormField represents a Form element containing a label and an input.\n */\nexport const FormField = (React.forwardRef<HTMLDivElement, FormFieldProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(FormField.displayName, context.telemetry);\n  setStart();\n\n  const {\n    children,\n    control,\n    id,\n    label,\n    message,\n    name,\n    required,\n    type,\n    className,\n    design,\n    styles,\n    variables,\n    inline,\n    errorMessage,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(FormField.handledProps, props);\n  const messageId = React.useRef<string>();\n  messageId.current = getOrGenerateIdFromShorthand('error-message-', message || errorMessage, messageId.current);\n  const labelId = React.useRef<string>();\n  labelId.current = getOrGenerateIdFromShorthand('form-label-', id, labelId.current);\n\n  const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n    debugName: FormField.displayName,\n    mapPropsToBehavior: () => ({\n      hasErrorMessage: !!errorMessage,\n      messageId: messageId.current,\n      labelId: labelId.current,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<FormFieldStylesProps>(FormField.displayName, {\n    className: formFieldClassName,\n    mapPropsToStyles: () => ({\n      type,\n      inline,\n      required,\n      hasErrorMessage: !!errorMessage,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11yProps('label', {\n        as: 'label',\n        htmlFor: id,\n        id: labelId.current,\n        styles: resolvedStyles.label,\n      }),\n  });\n\n  const messageElement = Text.create(errorMessage || message, {\n    defaultProps: () =>\n      getA11yProps('message', {\n        className: formFieldMessageClassName,\n        id: messageId.current,\n        styles: resolvedStyles.message,\n      }),\n  });\n\n  const controlElement = Box.create(control || {}, {\n    defaultProps: () =>\n      getA11yProps('control', {\n        required,\n        name,\n        id,\n        type,\n        error: !!errorMessage || null,\n        styles: resolvedStyles.control,\n      }),\n  });\n\n  const shouldControlAppearFirst = () => {\n    return type && (type === 'checkbox' || type === 'radio');\n  };\n\n  const content = (\n    <>\n      {shouldControlAppearFirst() && controlElement}\n      {labelElement}\n      {!shouldControlAppearFirst() && controlElement}\n      {messageElement}\n    </>\n  );\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, FormFieldProps> & FluentComponentStaticProps<FormFieldProps>;\n\nFormField.displayName = 'FormField';\n\nFormField.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  control: customPropTypes.shorthandAllowingChildren,\n  id: PropTypes.string,\n  inline: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  message: customPropTypes.itemShorthand,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n  errorMessage: customPropTypes.shorthandAllowingChildren,\n};\n\nFormField.handledProps = Object.keys(FormField.propTypes) as any;\n\nFormField.defaultProps = {\n  accessibility: formFieldBehavior,\n  control: { as: Input },\n};\n\nFormField.create = createShorthandFactory({ Component: FormField, mappedProp: 'label' });\n"],"file":"FormField.js"}