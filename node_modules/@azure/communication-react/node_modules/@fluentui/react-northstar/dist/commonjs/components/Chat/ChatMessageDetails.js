"use strict";

exports.__esModule = true;
exports.chatMessageDetailsClassName = exports.ChatMessageDetails = void 0;

var _reactBindings = require("@fluentui/react-bindings");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _utils = require("../../utils");

var _Box = require("../Box/Box");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var chatMessageDetailsClassName = 'ui-chat__messagedetails';
/**
 * A ChatMessageDetails provides a slot for details in the ChatMessage.
 */

exports.chatMessageDetailsClassName = chatMessageDetailsClassName;
var ChatMessageDetails = (0, _reactBindings.compose)(_Box.Box, {
  className: chatMessageDetailsClassName,
  displayName: 'ChatMessageDetails',
  handledProps: ['attached', 'density', 'hasHeaderReactionGroup', 'mine'],
  mapPropsToStylesProps: function mapPropsToStylesProps(_ref) {
    var attached = _ref.attached,
        density = _ref.density,
        hasHeaderReactionGroup = _ref.hasHeaderReactionGroup,
        mine = _ref.mine;
    return {
      attached: attached,
      density: density,
      hasHeaderReactionGroup: hasHeaderReactionGroup,
      mine: mine
    };
  },
  overrideStyles: true,
  shorthandConfig: {
    mappedProp: 'content'
  }
});
exports.ChatMessageDetails = ChatMessageDetails;
ChatMessageDetails.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),
  density: PropTypes.oneOf(['comfy', 'compact']),
  hasHeaderReactionGroup: PropTypes.bool,
  mine: PropTypes.bool
});
//# sourceMappingURL=ChatMessageDetails.js.map
