{"version":3,"sources":["utils/renderComponent.tsx"],"names":["renderComponent","config","context","className","displayName","handledProps","props","state","actionHandlers","render","saveDebug","telemetry","isFirstRenderRef","setStart","setEnd","rtl","ElementType","unhandledProps","stateAndProps","accessibility","allDisplayNames","disableAnimations","primaryDisplayName","componentProps","inlineStylesProps","renderer","noopRenderer","theme","emptyTheme","performance","enableStylesCaching","enableBooleanVariablesCaching","classes","variables","styles","resolvedConfig","focusZone","originalElementType","FocusZone","as","isRtl","element"],"mappings":"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","sourcesContent":["import {\n  AccessibilityActionHandlers,\n  ComponentSlotClasses,\n  FocusZone,\n  getElementType,\n  deprecated_getTelemetry as getTelemetry,\n  getUnhandledProps,\n  ReactAccessibilityBehavior,\n  unstable_getAccessibility as getAccessibility,\n  unstable_getStyles as getStyles,\n  ProviderContextPrepared,\n} from '@fluentui/react-bindings';\nimport { noopRenderer } from '@fluentui/react-northstar-styles-renderer';\nimport {\n  emptyTheme,\n  ComponentSlotStylesResolved,\n  ComponentVariablesObject,\n  DebugData,\n  PropsWithVarsAndStyles,\n  ThemePrepared,\n} from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as React from 'react';\n\nimport { Props } from '../types';\nimport { logProviderMissingWarning } from './providerMissingHandler';\n\nexport interface RenderResultConfig<P> {\n  ElementType: React.ElementType<P>;\n  classes: ComponentSlotClasses;\n  unhandledProps: Props;\n  variables: ComponentVariablesObject;\n  styles: ComponentSlotStylesResolved;\n  accessibility: ReactAccessibilityBehavior;\n  rtl: boolean;\n  theme: ThemePrepared;\n}\n\nexport type RenderComponentCallback<P> = (config: RenderResultConfig<P>) => any;\n\nexport interface RenderConfig<P> {\n  className?: string;\n  displayName: string;\n  handledProps: string[];\n  props: PropsWithVarsAndStyles;\n  state: Record<string, any>;\n  actionHandlers: AccessibilityActionHandlers;\n  render: RenderComponentCallback<P>;\n  saveDebug: (debug: DebugData | null) => void;\n  isFirstRenderRef: React.MutableRefObject<boolean>;\n}\n\nexport const renderComponent = <P extends {}>(\n  config: RenderConfig<P>,\n  context?: ProviderContextPrepared,\n): React.ReactElement<P> => {\n  const { className, displayName, handledProps, props, state, actionHandlers, render, saveDebug = () => {} } = config;\n\n  if (_.isEmpty(context)) {\n    logProviderMissingWarning();\n  }\n\n  const { setStart, setEnd } = getTelemetry(displayName, context.telemetry, config.isFirstRenderRef);\n  const rtl = context.rtl || false;\n\n  setStart();\n\n  const ElementType = getElementType(props) as React.ReactType<P>;\n  const unhandledProps = getUnhandledProps(handledProps, props);\n  const stateAndProps = { ...state, ...props };\n\n  const accessibility: ReactAccessibilityBehavior = getAccessibility(\n    displayName,\n    props.accessibility,\n    stateAndProps,\n    rtl,\n    actionHandlers,\n  );\n  const { classes, variables, styles, theme } = getStyles({\n    allDisplayNames: [displayName],\n    className,\n    disableAnimations: context.disableAnimations || false,\n    primaryDisplayName: displayName,\n    componentProps: stateAndProps,\n    inlineStylesProps: stateAndProps,\n    renderer: context.renderer || noopRenderer,\n    rtl,\n    saveDebug,\n    theme: context.theme || emptyTheme,\n    performance: {\n      ...context.performance,\n      // we cannot enable caching for class components\n      enableStylesCaching: false,\n      enableBooleanVariablesCaching: false,\n    },\n    telemetry: context.telemetry,\n  });\n\n  const resolvedConfig: RenderResultConfig<P> = {\n    ElementType,\n    unhandledProps,\n    classes,\n    variables,\n    styles,\n    accessibility,\n    rtl,\n    theme,\n  };\n\n  if (accessibility.focusZone) {\n    const originalElementType = resolvedConfig.ElementType;\n\n    resolvedConfig.ElementType = FocusZone as any;\n    resolvedConfig.unhandledProps = {\n      ...resolvedConfig.unhandledProps,\n      ...accessibility.focusZone.props,\n    };\n    resolvedConfig.unhandledProps.as = originalElementType;\n    resolvedConfig.unhandledProps.isRtl = resolvedConfig.rtl;\n  }\n\n  const element = render(resolvedConfig);\n  setEnd();\n\n  return element;\n};\n"],"file":"renderComponent.js"}