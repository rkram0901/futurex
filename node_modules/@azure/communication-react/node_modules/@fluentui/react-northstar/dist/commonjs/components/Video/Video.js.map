{"version":3,"sources":["components/Video/Video.tsx"],"names":["videoClassName","Video","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","controls","autoPlay","loop","poster","src","muted","variables","className","design","styles","videoRef","useRef","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","useEffect","current","mapPropsToInlineStyles","classes","element","root","create","Component","mappedProp","propTypes","commonPropTypes","createCommon","children","content","PropTypes","bool","string","defaultProps","as","videoBehavior","Object","keys"],"mappings":"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","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { Accessibility, VideoBehaviorProps, videoBehavior } from '@fluentui/accessibility';\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  getElementType,\n  useStyles,\n  useFluentContext,\n  useUnhandledProps,\n  useTelemetry,\n  useAccessibility,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface VideoProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<VideoBehaviorProps>;\n\n  /** Whether the video should start playing when rendered. Autoplay videos must be muted or they will not play immediately in certain browers like Chrome. */\n  autoPlay?: boolean;\n\n  /** Whether to display the native video controls. */\n  controls?: boolean;\n\n  /** Whether the video should automatically restart after it ends. */\n  loop?: boolean;\n\n  /** Whether the video should be allowed to play audio. */\n  muted?: boolean;\n\n  /** Image source URL for when video isn't playing. */\n  poster?: string;\n\n  /** Video source URL. */\n  src?: string;\n}\n\nexport const videoClassName = 'ui-video';\n\nexport type VideoStylesProps = Required<Pick<VideoProps, 'variables'>>;\n\n/**\n * A Video provides ability to embed video content.\n */\nexport const Video = (React.forwardRef<HTMLVideoElement, VideoProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Video.displayName, context.telemetry);\n  setStart();\n\n  const { controls, autoPlay, loop, poster, src, muted, variables, className, design, styles } = props;\n  const videoRef = React.useRef<HTMLVideoElement>();\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Video.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Video.displayName,\n  });\n\n  React.useEffect(() => {\n    // this is a workaround for a potential memory leak in Chromium which retains a Detached HTMLVideoElement when <video autoplay> is unmounted\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=969049\n    return () => {\n      if (videoRef.current) {\n        // we want to perform the cleanup on the latest element rendered\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        videoRef.current.src = '';\n      }\n    };\n  }, []);\n\n  React.useEffect(() => {\n    // React doesn't guaranty that props will be set:\n    // https://github.com/facebook/react/issues/10389\n    if (videoRef.current) {\n      videoRef.current.muted = !!muted;\n    }\n  }, [muted]);\n\n  const { classes } = useStyles<VideoStylesProps>(Video.displayName, {\n    className: videoClassName,\n    mapPropsToInlineStyles: () => ({ className, variables, design, styles }),\n  });\n\n  const element = (\n    <Ref innerRef={videoRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          autoPlay,\n          controls,\n          ref,\n          loop,\n          poster,\n          src,\n          ...unhandledProps,\n        })}\n      />\n    </Ref>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'video', HTMLVideoElement, VideoProps> & FluentComponentStaticProps<VideoProps>;\n\nVideo.create = createShorthandFactory({ Component: Video, mappedProp: 'src' });\n\nVideo.displayName = 'Video';\n\nVideo.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  autoPlay: PropTypes.bool,\n  controls: PropTypes.bool,\n  loop: PropTypes.bool,\n  muted: PropTypes.bool,\n  poster: PropTypes.string,\n  src: PropTypes.string,\n};\n\nVideo.defaultProps = {\n  as: 'video' as const,\n  accessibility: videoBehavior,\n  controls: true,\n  autoPlay: false,\n  muted: false,\n};\n\nVideo.handledProps = Object.keys(Video.propTypes) as any;\n"],"file":"Video.js"}