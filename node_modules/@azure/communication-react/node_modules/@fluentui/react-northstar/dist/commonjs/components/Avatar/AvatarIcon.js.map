{"version":3,"sources":["components/Avatar/AvatarIcon.tsx"],"names":["avatarIconClassName","AvatarIcon","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","className","children","design","styles","variables","size","square","content","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","propTypes","commonPropTypes","createCommon","PropTypes","bool","customPropTypes","Object","keys","defaultProps","as","shorthandConfig","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  SizeValue,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  childrenExist,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\n\nexport interface AvatarIconProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n\n  /** The avatar icon can have a square shape. */\n  square?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n}\n\nexport type AvatarIconStylesProps = Required<Pick<AvatarIconProps, 'size' | 'square'>>;\nexport const avatarIconClassName = 'ui-avatar__icon';\n\n/**\n * A AvatarIcon provides a status icon for the Avatar.\n */\nexport const AvatarIcon = (React.forwardRef<HTMLSpanElement, AvatarIconProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AvatarIcon.displayName, context.telemetry);\n  setStart();\n\n  const { className, children, design, styles, variables, size, square, content } = props;\n\n  const { classes } = useStyles<AvatarIconStylesProps>(AvatarIcon.displayName, {\n    className: avatarIconClassName,\n    mapPropsToStyles: () => ({\n      size,\n      square,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: AvatarIcon.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AvatarIcon.handledProps, props);\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ref, ...unhandledProps })}>\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, AvatarIconProps> &\n  FluentComponentStaticProps<AvatarIconProps>;\n\nAvatarIcon.displayName = 'AvatarIcon';\nAvatarIcon.propTypes = {\n  ...commonPropTypes.createCommon(),\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n};\nAvatarIcon.handledProps = Object.keys(AvatarIcon.propTypes) as any;\nAvatarIcon.defaultProps = {\n  as: 'span',\n};\n\nAvatarIcon.shorthandConfig = {\n  mappedProp: 'content',\n};\n"],"file":"AvatarIcon.js"}