{"version":3,"sources":["components/Accordion/AccordionTitle.tsx"],"names":["accordionTitleClassName","accordionTitleSlotClassNames","contentWrapper","AccordionTitle","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","contentRef","children","content","indicator","disabled","accessibility","canBeCollapsed","as","active","accordionContentId","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","debugName","actionHandlers","performClick","e","preventDefault","stopPropagation","handleClick","mapPropsToBehavior","hasContent","String","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","handleFocus","handleWrapperOverrides","predefinedProps","onFocus","onClick","contentWrapperElement","Box","create","defaultProps","overrideProps","element","rtlTextContainer","getAttributes","forElements","root","shorthandConfig","mappedProp","propTypes","commonPropTypes","createCommon","PropTypes","string","bool","customPropTypes","wrapperShorthand","index","number","func","shorthandAllowingChildren","Object","keys","accordionTitleBehavior","Component"],"mappings":"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","sourcesContent":["import { accordionTitleBehavior, Accessibility, AccordionTitleBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  getElementType,\n  useTelemetry,\n  useFluentContext,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionTitleSlotClassNames {\n  contentWrapper: string;\n}\n\nexport interface AccordionTitleProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionTitleBehaviorProps>;\n\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n\n  /** Shorthand for the content wrapper element. */\n  contentWrapper?: ShorthandValue<BoxProps>;\n\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** AccordionTitle index inside Accordion. */\n  index?: number;\n\n  /** Ref to the clickable element that contains the title. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionTitleProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AccordionTitleProps>;\n\n  /** Shorthand for the active indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n}\n\nexport const accordionTitleClassName = 'ui-accordion__title';\nexport const accordionTitleSlotClassNames: AccordionTitleSlotClassNames = {\n  contentWrapper: `${accordionTitleClassName}__content-wrapper`,\n};\n\nexport type AccordionTitleStylesProps = Required<Pick<AccordionTitleProps, 'disabled' | 'active'>> & {\n  content: boolean;\n};\n\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\nexport const AccordionTitle = (React.forwardRef<HTMLDListElement, AccordionTitleProps & { as: React.ReactNode }>(\n  (props, ref) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(AccordionTitle.displayName, context.telemetry);\n    setStart();\n    const {\n      contentRef,\n      children,\n      content,\n      indicator,\n      contentWrapper,\n      disabled,\n      accessibility,\n      canBeCollapsed,\n      as,\n      active,\n      accordionContentId,\n      className,\n      design,\n      styles,\n      variables,\n    } = props;\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(AccordionTitle.handledProps, props);\n\n    const getA11yProps = useAccessibility<AccordionTitleBehaviorProps>(accessibility, {\n      debugName: AccordionTitle.displayName,\n      actionHandlers: {\n        performClick: e => {\n          e.preventDefault();\n          e.stopPropagation();\n          handleClick(e);\n        },\n      },\n      mapPropsToBehavior: () => ({\n        hasContent: !!content,\n        canBeCollapsed,\n        as: String(as),\n        active,\n        disabled,\n        accordionContentId,\n      }),\n      rtl: context.rtl,\n    });\n\n    const { classes, styles: resolvedStyles } = useStyles<AccordionTitleStylesProps>(AccordionTitle.displayName, {\n      className: accordionTitleClassName,\n      mapPropsToStyles: () => ({\n        disabled,\n        content: !!content,\n        active,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n    });\n\n    const handleClick = (e: React.SyntheticEvent) => {\n      if (!disabled) {\n        _.invoke(props, 'onClick', e, props);\n      }\n    };\n\n    const handleFocus = (e: React.SyntheticEvent) => {\n      e.stopPropagation();\n      _.invoke(props, 'onFocus', e, props);\n    };\n\n    const handleWrapperOverrides = predefinedProps => ({\n      onFocus: (e: React.FocusEvent) => {\n        handleFocus(e);\n        _.invoke(predefinedProps, 'onFocus', e, props);\n      },\n      onClick: (e: React.MouseEvent) => {\n        handleClick(e);\n        _.invoke(predefinedProps, 'onClick', e, props);\n      },\n    });\n\n    const contentWrapperElement = (\n      <Ref innerRef={contentRef}>\n        {Box.create(contentWrapper, {\n          defaultProps: () =>\n            getA11yProps('content', {\n              className: accordionTitleSlotClassNames.contentWrapper,\n              styles: resolvedStyles.contentWrapper,\n            }),\n          overrideProps: predefinedProps => ({\n            children: (\n              <>\n                {Box.create(indicator, {\n                  defaultProps: () =>\n                    getA11yProps('indicator', {\n                      styles: resolvedStyles.indicator,\n                    }),\n                })}\n                {Box.create(content, {\n                  defaultProps: () => ({\n                    styles: resolvedStyles.content,\n                  }),\n                })}\n              </>\n            ),\n            ...handleWrapperOverrides(predefinedProps),\n          }),\n        })}\n      </Ref>\n    );\n\n    const element = (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...getA11yProps('root', {\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {childrenExist(children) ? children : contentWrapperElement}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n) as unknown) as ForwardRefWithAs<'div', HTMLDListElement, AccordionTitleProps> &\n  FluentComponentStaticProps<AccordionTitleProps>;\n\nAccordionTitle.displayName = 'AccordionTitle';\n\nAccordionTitle.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionTitle.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  accordionContentId: PropTypes.string,\n  active: PropTypes.bool,\n  contentRef: customPropTypes.ref,\n  contentWrapper: customPropTypes.wrapperShorthand,\n  canBeCollapsed: PropTypes.bool,\n  disabled: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  indicator: customPropTypes.shorthandAllowingChildren,\n};\n\nAccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes) as any;\n\nAccordionTitle.defaultProps = {\n  accessibility: accordionTitleBehavior,\n  as: 'div',\n  contentRef: _.noop,\n  indicator: {},\n  contentWrapper: {},\n};\n\nAccordionTitle.create = createShorthandFactory({ Component: AccordionTitle, mappedProp: 'content' });\n"],"file":"AccordionTitle.js"}