{"version":3,"sources":["components/Menu/MenuItemContent.tsx"],"names":["menuItemContentClassName","MenuItemContent","React","forwardRef","props","ref","context","displayName","telemetry","setStart","setEnd","parentProps","MenuContext","vertical","v","className","children","design","styles","variables","content","hasMenu","hasIcon","inSubmenu","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","element","root","rtlTextContainer","getAttributes","forElements","defaultProps","as","propTypes","commonPropTypes","createCommon","PropTypes","bool","shorthandConfig","mappedProp","Object","keys"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ForwardRefWithAs,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  useUnhandledProps,\n  getElementType,\n  childrenExist,\n  useContextSelectors,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport {\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\nimport { MenuContext, MenuItemSubscribedValue } from './menuContext';\n\nexport interface MenuItemContentProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Indicates whether the parent menu item has menu. */\n  hasMenu?: boolean;\n\n  /** Indicates whether the parent menu item has icon. */\n  hasIcon?: boolean;\n\n  /** Indicates whether the parent menu item is inside vertical menu. */\n  vertical?: boolean;\n\n  /** Indicates whether the parent menu item is part of submenu. */\n  inSubmenu?: boolean;\n}\n\nexport type MenuItemContentStylesProps = Pick<MenuItemContentProps, 'hasMenu' | 'hasIcon' | 'vertical' | 'inSubmenu'>;\n\nexport const menuItemContentClassName = 'ui-menu__itemcontent';\n\n/**\n * A MenuItemContent allows a user to have a dedicated component that can be targeted from the theme.\n */\nexport const MenuItemContent = (React.forwardRef<HTMLSpanElement, MenuItemContentProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(MenuItemContent.displayName, context.telemetry);\n  setStart();\n\n  const parentProps = (useContextSelectors(MenuContext, {\n    vertical: v => v.vertical,\n  }) as unknown) as MenuItemSubscribedValue; // TODO: we should improve typings for the useContextSelectors\n\n  const { className, children, design, styles, variables, content, hasMenu, hasIcon, vertical, inSubmenu } = props;\n\n  const { classes } = useStyles<MenuItemContentStylesProps>(MenuItemContent.displayName, {\n    className: menuItemContentClassName,\n    mapPropsToStyles: () => ({\n      hasMenu,\n      hasIcon,\n      vertical: vertical || parentProps.vertical,\n      inSubmenu,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: MenuItemContent.displayName,\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(MenuItemContent.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'span', HTMLSpanElement, MenuItemContentProps> &\n  FluentComponentStaticProps<MenuItemContentProps>;\n\nMenuItemContent.displayName = 'MenuItemContent';\n\nMenuItemContent.defaultProps = {\n  as: 'span',\n};\n\nMenuItemContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  hasIcon: PropTypes.bool,\n  hasMenu: PropTypes.bool,\n  vertical: PropTypes.bool,\n  inSubmenu: PropTypes.bool,\n};\n\nMenuItemContent.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nMenuItemContent.handledProps = Object.keys(MenuItemContent.propTypes) as any;\n"],"file":"MenuItemContent.js"}