import * as React from 'react';
import * as PropTypes from 'prop-types';
import { UIComponentProps, SizeValue, ContentComponentProps, ChildrenComponentProps } from '../../utils';
import { FluentComponentStaticProps } from '../../types';
import { Accessibility } from '@fluentui/accessibility';
export interface AvatarIconProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {
    /** Accessibility behavior if overridden by the user. */
    accessibility?: Accessibility<never>;
    /** The avatar icon can have a square shape. */
    square?: boolean;
    /** Size multiplier. */
    size?: SizeValue;
}
export declare type AvatarIconStylesProps = Required<Pick<AvatarIconProps, 'size' | 'square'>>;
export declare const avatarIconClassName = "ui-avatar__icon";
/**
 * A AvatarIcon provides a status icon for the Avatar.
 */
export declare const AvatarIcon: (<TExtendedElementType extends React.ElementType<any> = "span">(props: React.RefAttributes<HTMLSpanElement> & Omit<import("@fluentui/react-bindings").PropsOfElement<TExtendedElementType>, "as" | keyof AvatarIconProps> & {
    as?: TExtendedElementType;
} & AvatarIconProps) => JSX.Element) & {
    propTypes?: React.WeakValidationMap<AvatarIconProps> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
    contextTypes?: PropTypes.ValidationMap<any>;
    defaultProps?: Partial<AvatarIconProps & {
        as: "span";
    }>;
    displayName?: string;
    readonly __PRIVATE_PROPS?: React.RefAttributes<HTMLSpanElement> & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "key" | keyof React.HTMLAttributes<HTMLSpanElement>> & {
        ref?: React.Ref<HTMLSpanElement>;
    }, "as" | keyof AvatarIconProps> & {
        as?: "span";
    } & AvatarIconProps;
} & FluentComponentStaticProps<AvatarIconProps>;
