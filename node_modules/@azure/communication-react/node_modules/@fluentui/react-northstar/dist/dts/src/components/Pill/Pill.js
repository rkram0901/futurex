"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pill = exports.pillClassName = void 0;
var PropTypes = require("prop-types");
var React = require("react");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var accessibility_1 = require("@fluentui/accessibility");
var utils_1 = require("../../utils");
var react_bindings_1 = require("@fluentui/react-bindings");
var PillContent_1 = require("./PillContent");
var PillAction_1 = require("./PillAction");
var pillContext_1 = require("./pillContext");
var PillImage_1 = require("./PillImage");
var PillIcon_1 = require("./PillIcon");
var react_icons_northstar_1 = require("@fluentui/react-icons-northstar");
exports.pillClassName = 'ui-pill';
/**
 * THIS COMPONENT IS UNSTABLE
 * Pills should be used when representing an input, as a way to filter content, or to represent an attribute.
 */
exports.Pill = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Pill.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var parentProps = pillContext_1.usePillContext();
    var className = props.className, design = props.design, styles = props.styles, variables = props.variables, appearance = props.appearance, size = props.size, rectangular = props.rectangular, children = props.children, content = props.content, disabled = props.disabled, action = props.action, actionable = props.actionable, image = props.image, icon = props.icon, selectable = props.selectable, selectedIndicator = props.selectedIndicator;
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultSelected,
        value: props.selected,
        initialValue: false,
    }), selected = _b[0], setSelected = _b[1];
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Pill.handledProps, props);
    var handleDismiss = function (e) {
        _.invoke(props, 'onDismiss', e, props);
    };
    var handleClick = function (e) {
        if (selectable) {
            setSelected(function (prevSelected) { return !prevSelected; });
            _.invoke(props, 'onSelectionChange', e, __assign(__assign({}, props), { selected: !selected }));
        }
        _.invoke(props, 'onClick', e, props);
    };
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility || parentProps.pillBehavior || accessibility_1.pillBehavior, {
        debugName: exports.Pill.displayName,
        actionHandlers: {
            performDismiss: handleDismiss,
            performClick: handleClick,
        },
        mapPropsToBehavior: function () { return ({
            actionable: actionable,
            selectable: selectable,
            selected: selected,
        }); },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.Pill.displayName, {
        className: exports.pillClassName,
        mapPropsToStyles: function () { return ({
            appearance: appearance,
            size: size,
            rectangular: rectangular,
            disabled: disabled,
            selectable: selectable,
            selected: selected,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var getSelectedIndicator = function () {
        if (!!selectedIndicator) {
            return selectedIndicator;
        }
        if (!!image) {
            return React.createElement(react_icons_northstar_1.CheckmarkCircleIcon, null);
        }
        return React.createElement(react_icons_northstar_1.AcceptIcon, null);
    };
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, __assign({}, getA11yProps('root', __assign(__assign({ className: classes.root, ref: ref }, (actionable && { onClick: handleClick })), unhandledProps))),
        selectable &&
            selected &&
            utils_1.createShorthand(PillIcon_1.PillIcon, getSelectedIndicator(), {
                defaultProps: function () { return ({ size: size, selectable: selectable, image: image }); },
            }),
        !selected &&
            utils_1.createShorthand(PillImage_1.PillImage, image, {
                defaultProps: function () { return ({ size: size }); },
            }),
        !selected &&
            utils_1.createShorthand(PillIcon_1.PillIcon, icon, {
                defaultProps: function () { return ({ size: size }); },
            }),
        utils_1.createShorthand(PillContent_1.PillContent, content || {}, {
            defaultProps: function () { return ({
                children: children,
                size: size,
                actionable: actionable,
            }); },
        }),
        actionable &&
            utils_1.createShorthand(PillAction_1.PillAction, action || {}, {
                overrideProps: function (prevProps) { return ({
                    onClick: function (e) {
                        _.invoke(prevProps, 'onClick', e);
                        handleDismiss(e);
                    },
                }); },
            })));
    setEnd();
    return element;
});
exports.Pill.defaultProps = {
    as: 'span',
};
exports.Pill.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon()), { content: customPropTypes.shorthandAllowingChildren, size: PropTypes.oneOf(['small', 'smaller', 'medium']), rectangular: PropTypes.bool, disabled: PropTypes.bool, appearance: PropTypes.oneOf(['filled', 'inverted', 'outline']), actionable: PropTypes.bool, action: customPropTypes.shorthandAllowingChildren, onDismiss: PropTypes.func, selectedIndicator: customPropTypes.shorthandAllowingChildren, selectable: PropTypes.bool, selected: PropTypes.bool, defaultSelected: PropTypes.bool, image: customPropTypes.shorthandAllowingChildren });
exports.Pill.displayName = 'Pill';
exports.Pill.handledProps = Object.keys(exports.Pill.propTypes);
