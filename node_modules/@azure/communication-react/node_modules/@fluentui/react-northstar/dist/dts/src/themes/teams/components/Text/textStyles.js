"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.textStyles = void 0;
var colors_1 = require("../../colors");
var translateAlignProp_1 = require("../../../../styles/translateAlignProp");
exports.textStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables;
        var colors = v.colorScheme[colors_1.getColorSchemeKey(p.color)];
        return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (p.color && { color: colors.foreground })), (p.atMention === true && { color: v.atMentionOtherColor })), (p.truncated && { overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' })), (p.disabled && { color: v.disabledColor })), (p.error && { color: v.errorColor })), (p.success && { color: v.successColor })), (p.temporary && { fontStyle: 'italic' })), (p.align && { display: 'block', textAlign: translateAlignProp_1.translateAlignProp(p.align) })), (p.weight === 'light' && { fontWeight: v.fontWeightLight })), (p.weight === 'semilight' && { fontWeight: v.fontWeightSemilight })), (p.weight === 'regular' && { fontWeight: v.fontWeightRegular })), (p.weight === 'semibold' && { fontWeight: v.fontWeightSemibold })), (p.weight === 'bold' && { fontWeight: v.fontWeightBold })), (p.size === 'smallest' && {
            fontSize: v.fontSizeSmallest,
            lineHeight: v.fontLineHeightSmallest,
        })), (p.size === 'smaller' && {
            fontSize: v.fontSizeSmaller,
            lineHeight: v.fontLineHeightSmaller,
        })), (p.size === 'small' && {
            fontSize: v.fontSizeSmall,
            lineHeight: v.fontLineHeightSmall,
        })), (p.size === 'medium' && {
            fontSize: v.fontSizeMedium,
            lineHeight: v.fontLineHeightMedium,
        })), (p.size === 'large' && {
            fontSize: v.fontSizeLarge,
            lineHeight: v.fontLineHeightLarge,
        })), (p.size === 'larger' && {
            fontSize: v.fontSizeLarger,
            lineHeight: v.fontLineHeightLarger,
        })), (p.size === 'largest' && {
            fontSize: v.fontSizeLargest,
            lineHeight: v.fontLineHeightLargest,
        })), (p.atMention === 'me' && {
            color: v.atMentionMeColor,
            fontWeight: v.atMentionMeFontWeight,
        })), (p.timestamp && {
            color: v.timestampColor,
        })), (p.important && {
            color: v.importantColor,
            fontWeight: v.importantWeight,
        }));
    },
};
