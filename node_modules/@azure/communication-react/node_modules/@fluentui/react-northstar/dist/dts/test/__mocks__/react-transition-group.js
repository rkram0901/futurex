"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transition = void 0;
var React = require("react");
__exportStar(require("react-transition-group"), exports);
var Transition = function (props) {
    // @ts-ignore
    var inProp = props.in, appear = props.appear, mountOnEnter = props.mountOnEnter, unmountOnExit = props.unmountOnExit, timeout = props.timeout, onEnter = props.onEnter, onEntering = props.onEntering, onEntered = props.onEntered, onExit = props.onExit, onExiting = props.onExiting, onExited = props.onExited, children = props.children, nodeRef = props.nodeRef, rest = __rest(props, ["in", "appear", "mountOnEnter", "unmountOnExit", "timeout", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "children", "nodeRef"]);
    if (inProp === false)
        return null;
    if (children && typeof children === 'function') {
        return children({ classes: props.className }) || null;
    }
    if (!children) {
        return null;
    }
    return React.cloneElement(props.children, rest);
};
exports.Transition = Transition;
