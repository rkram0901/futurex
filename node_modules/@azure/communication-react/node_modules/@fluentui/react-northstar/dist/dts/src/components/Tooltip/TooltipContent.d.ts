import { Accessibility } from '@fluentui/accessibility';
import * as PopperJs from '@popperjs/core';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { UIComponentProps, ChildrenComponentProps, ContentComponentProps } from '../../utils';
import { PopperChildrenProps } from '../../utils/positioner';
import { FluentComponentStaticProps } from '../../types';
export interface TooltipContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     */
    accessibility?: Accessibility<never>;
    /** An actual placement value from Popper. */
    placement?: PopperChildrenProps['placement'];
    /** Defines whether tooltip is displayed. */
    open?: boolean;
    /** A tooltip can show a pointer to trigger. */
    pointing?: boolean;
    /** A ref to a pointer element. */
    pointerRef?: React.Ref<HTMLDivElement>;
    /** Defines wether tooltip is subtle  */
    subtle?: boolean;
}
export declare type TooltipContentStylesProps = Required<Pick<TooltipContentProps, 'pointing' | 'open' | 'subtle'>> & {
    basePlacement: PopperJs.BasePlacement;
};
export declare const tooltipContentClassName = "ui-tooltip__content";
/**
 * A TooltipContent contains the content of a Tooltip component.
 */
export declare const TooltipContent: (<TExtendedElementType extends React.ElementType<any> = "div">(props: React.RefAttributes<HTMLDivElement> & Omit<import("@fluentui/react-bindings").PropsOfElement<TExtendedElementType>, "as" | keyof TooltipContentProps> & {
    as?: TExtendedElementType;
} & TooltipContentProps) => JSX.Element) & {
    propTypes?: React.WeakValidationMap<TooltipContentProps> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
    contextTypes?: PropTypes.ValidationMap<any>;
    defaultProps?: Partial<TooltipContentProps & {
        as: "div";
    }>;
    displayName?: string;
    readonly __PRIVATE_PROPS?: React.RefAttributes<HTMLDivElement> & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>> & {
        ref?: React.Ref<HTMLDivElement>;
    }, "as" | keyof TooltipContentProps> & {
        as?: "div";
    } & TooltipContentProps;
} & FluentComponentStaticProps<TooltipContentProps>;
