"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dividerStyles = void 0;
var _ = require("lodash");
var utils_1 = require("../../../../utils");
var beforeAndAfter = function (size, variables, colors, props) { return (__assign(__assign({ content: '""', flex: 1 }, (props.vertical ? { width: size + 1 + "px", height: '100%' } : { height: size + 1 + "px" })), { background: _.get(colors, 'foreground', variables.dividerColor) })); };
exports.dividerStyles = {
    root: function (_a) {
        var props = _a.props, variables = _a.variables;
        var color = props.color, fitted = props.fitted, size = props.size, important = props.important, hasContent = props.hasContent, vertical = props.vertical;
        var colors = variables.colorScheme[color];
        return __assign(__assign(__assign(__assign({ color: _.get(colors, 'foreground', variables.textColor), display: 'flex', alignItems: 'center' }, (!fitted && {
            padding: vertical ? "0 " + variables.dividerPadding : variables.dividerPadding + " 0",
        })), (important && {
            fontWeight: variables.importantFontWeight,
        })), (vertical && { height: '100%' })), (hasContent
            ? {
                textAlign: 'center',
                fontSize: utils_1.pxToRem(12 + size),
                lineHeight: variables.textLineHeight,
                '::before': __assign({}, beforeAndAfter(size, variables, colors, props)),
                '::after': __assign({}, beforeAndAfter(size, variables, colors, props)),
            }
            : {
                '::before': __assign({}, beforeAndAfter(size, variables, colors, props)),
            }));
    },
};
