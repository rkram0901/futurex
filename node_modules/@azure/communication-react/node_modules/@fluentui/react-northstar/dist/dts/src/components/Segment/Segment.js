"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Segment = exports.segmentClassName = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.segmentClassName = 'ui-segment';
/**
 * A Segment visually groups related content.
 */
exports.Segment = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Segment.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, content = props.content, color = props.color, inverted = props.inverted, disabled = props.disabled, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Segment.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.Segment.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.Segment.displayName, {
        className: exports.segmentClassName,
        mapPropsToStyles: function () { return ({
            color: color,
            inverted: inverted,
            disabled: disabled,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, __assign({}, getA11yProps('root', __assign(__assign({ className: classes.root, ref: ref }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))), utils_1.childrenExist(children) ? children : Box_1.Box.create(content)));
    setEnd();
    return element;
});
exports.Segment.displayName = 'Segment';
exports.Segment.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon({
    content: 'shorthand',
    color: true,
})), { disabled: PropTypes.bool, inverted: PropTypes.bool });
exports.Segment.handledProps = Object.keys(exports.Segment.propTypes);
exports.Segment.create = utils_1.createShorthandFactory({
    Component: exports.Segment,
});
