"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.radioGroupItemStyles = void 0;
var RadioGroupItem_1 = require("../../../../components/RadioGroup/RadioGroupItem");
var utils_1 = require("../../../../utils");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var restHoverFocusTextColor = function (textColor) { return ({
    color: textColor,
    ':hover': {
        color: textColor,
    },
    ':focus': {
        color: textColor,
    },
}); };
exports.radioGroupItemStyles = {
    root: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        return (__assign(__assign(__assign({ position: 'relative', alignItems: 'center', borderStyle: 'solid', borderWidth: "" + utils_1.pxToRem(1), borderColor: 'transparent', borderRadius: siteVariables.borderRadiusMedium, color: v.textColorDefault, cursor: 'pointer', display: p.vertical ? 'flex' : 'inline-flex', fontSize: v.textFontSize, padding: v.padding, margin: v.margin, ':hover': (_b = {
                    color: v.textColorDefaultHoverFocus
                },
                _b["& ." + RadioGroupItem_1.radioGroupItemSlotClassNames.indicator] = __assign({ borderColor: v.textColorDefaultHoverFocus }, (!p.disabled &&
                    !p.checked && {
                    borderColor: v.indicatorBorderColorDefaultHover,
                })),
                _b), ':focus': {
                color: v.textColorDefaultHoverFocus,
            } }, (p.checked && __assign({}, restHoverFocusTextColor(v.textColorChecked)))), (p.disabled && __assign({}, restHoverFocusTextColor(v.colorDisabled)))), getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables })));
    },
    indicator: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign(__assign({ margin: utils_1.pxToRem(2) + " 0", outline: 0, display: 'flex', alignItems: 'center', justifyContent: 'center', width: utils_1.pxToRem(16), height: utils_1.pxToRem(16), verticalAlign: 'midddle', color: v.indicatorColorDefault }, (p.checked && {
            color: v.indicatorBackgroundColorChecked,
        })), (p.disabled && {
            color: v.colorDisabled,
        })));
    },
    label: function () { return ({
        margin: "0 0 0 " + utils_1.pxToRem(12),
        userSelect: 'none',
    }); },
};
