"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormField = exports.formFieldMessageClassName = exports.formFieldClassName = void 0;
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var Text_1 = require("../Text/Text");
var Input_1 = require("../Input/Input");
var Box_1 = require("../Box/Box");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.formFieldClassName = 'ui-form__field';
exports.formFieldMessageClassName = 'ui-form__field__message';
/**
 * A FormField represents a Form element containing a label and an input.
 */
exports.FormField = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.FormField.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, control = props.control, id = props.id, label = props.label, message = props.message, name = props.name, required = props.required, type = props.type, className = props.className, design = props.design, styles = props.styles, variables = props.variables, inline = props.inline, errorMessage = props.errorMessage;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.FormField.handledProps, props);
    var messageId = React.useRef();
    messageId.current = utils_1.getOrGenerateIdFromShorthand('error-message-', message || errorMessage, messageId.current);
    var labelId = React.useRef();
    labelId.current = utils_1.getOrGenerateIdFromShorthand('form-label-', id, labelId.current);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.FormField.displayName,
        mapPropsToBehavior: function () { return ({
            hasErrorMessage: !!errorMessage,
            messageId: messageId.current,
            labelId: labelId.current,
        }); },
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(exports.FormField.displayName, {
        className: exports.formFieldClassName,
        mapPropsToStyles: function () { return ({
            type: type,
            inline: inline,
            required: required,
            hasErrorMessage: !!errorMessage,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var labelElement = Text_1.Text.create(label, {
        defaultProps: function () {
            return getA11yProps('label', {
                as: 'label',
                htmlFor: id,
                id: labelId.current,
                styles: resolvedStyles.label,
            });
        },
    });
    var messageElement = Text_1.Text.create(errorMessage || message, {
        defaultProps: function () {
            return getA11yProps('message', {
                className: exports.formFieldMessageClassName,
                id: messageId.current,
                styles: resolvedStyles.message,
            });
        },
    });
    var controlElement = Box_1.Box.create(control || {}, {
        defaultProps: function () {
            return getA11yProps('control', {
                required: required,
                name: name,
                id: id,
                type: type,
                error: !!errorMessage || null,
                styles: resolvedStyles.control,
            });
        },
    });
    var shouldControlAppearFirst = function () {
        return type && (type === 'checkbox' || type === 'radio');
    };
    var content = (React.createElement(React.Fragment, null,
        shouldControlAppearFirst() && controlElement,
        labelElement,
        !shouldControlAppearFirst() && controlElement,
        messageElement));
    var element = (React.createElement(ElementType, __assign({}, getA11yProps('root', __assign({ className: classes.root, ref: ref }, unhandledProps))), utils_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
});
exports.FormField.displayName = 'FormField';
exports.FormField.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { control: customPropTypes.shorthandAllowingChildren, id: PropTypes.string, inline: PropTypes.bool, label: customPropTypes.itemShorthand, message: customPropTypes.itemShorthand, name: PropTypes.string, required: PropTypes.bool, type: PropTypes.string, errorMessage: customPropTypes.shorthandAllowingChildren });
exports.FormField.handledProps = Object.keys(exports.FormField.propTypes);
exports.FormField.defaultProps = {
    accessibility: accessibility_1.formFieldBehavior,
    control: { as: Input_1.Input },
};
exports.FormField.create = utils_1.createShorthandFactory({ Component: exports.FormField, mappedProp: 'label' });
