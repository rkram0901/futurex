"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.menuItemWrapperStyles = void 0;
var utils_1 = require("../../../../utils");
var MenuItem_1 = require("../../../../components/Menu/MenuItem");
var MenuItemIndicator_1 = require("../../../../components/Menu/MenuItemIndicator");
var colors_1 = require("../../colors");
var submenuIndicatorDirection_1 = require("./submenuIndicatorDirection");
var menuItemStyles_1 = require("./menuItemStyles");
exports.menuItemWrapperStyles = {
    root: function (_a) {
        var _b;
        var props = _a.props, v = _a.variables;
        var active = props.active, disabled = props.disabled, iconOnly = props.iconOnly, isFromKeyboard = props.isFromKeyboard, pills = props.pills, pointing = props.pointing, secondary = props.secondary, underlined = props.underlined, vertical = props.vertical, primary = props.primary, on = props.on;
        var colors = colors_1.getColorScheme(v.colorScheme, null, primary);
        return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ color: 'inherit', lineHeight: 1, position: 'relative', verticalAlign: 'middle', display: 'block' }, (secondary && {
            background: 'salmon',
        })), (vertical && {
            border: "solid " + v.verticalItemBorderWidth + " " + v.verticalItemBorderColor,
        })), (pills && __assign(__assign({}, (vertical
            ? { margin: "0 0 " + menuItemStyles_1.verticalPillsBottomMargin + " 0" }
            : { margin: "0 " + menuItemStyles_1.horizontalPillsRightMargin + " 0 0" })), { borderRadius: utils_1.pxToRem(5) }))), (underlined && {
            display: 'flex',
            alignItems: 'center',
            height: utils_1.pxToRem(29),
            lineHeight: v.lineHeightBase,
            padding: "0 " + utils_1.pxToRem(4),
            margin: "0 " + utils_1.pxToRem(4) + " 0 0",
            ':nth-child(n+2)': {
                marginLeft: "" + utils_1.pxToRem(4),
            },
            boxShadow: 'none',
        })), (!vertical &&
            !pills &&
            !underlined &&
            !iconOnly && {
            boxShadow: "-1px 0 0 0 " + (primary ? v.primaryBorderColor : v.borderColor || colors.border) + " inset",
        })), (active &&
            !vertical && __assign(__assign(__assign(__assign({ color: v.wrapperColorActive }, (!underlined && {
            background: v.backgroundColorActive,
        })), (!underlined &&
            on !== 'hover' && __assign(__assign({ background: v.backgroundColorActive || colors.backgroundActive }, (iconOnly && { background: v.activeIconOnlyWrapperBackgroundColor })), (!iconOnly &&
            primary && {
            color: colors.foregroundActive,
        })))), (underlined && {
            color: v.activeUnderlinedWrapperColor,
        })), (pointing &&
            !vertical && __assign({}, menuItemStyles_1.pointingBeak({ props: props, variables: v, colors: colors })))))), (isFromKeyboard && __assign(__assign(__assign({ color: v.wrapperColorFocus }, (!underlined && __assign({ background: v.wrapperBackgroundColorFocus }, (primary && {
            background: v.primaryWrapperBackgroundColorFocus,
            color: v.primaryWrapperColorFocus,
        })))), (!iconOnly && !underlined && menuItemStyles_1.getFocusedStyles({ props: props, variables: v, colors: colors }))), (iconOnly && {
            background: v.iconOnlyWrapperBackgroundColorFocus,
            color: v.iconOnlyColorActive,
        })))), (active && {
            '[data-tabs="true"]': __assign(__assign({}, (!underlined && __assign(__assign({ background: v.backgroundColorActive || colors.backgroundActive }, (iconOnly && { background: v.activeIconOnlyWrapperBackgroundColor })), (!iconOnly &&
                primary && {
                color: colors.foregroundActive,
            })))), (pointing &&
                vertical && {
                '::before': __assign(__assign({ content: "''", position: 'absolute', width: utils_1.pxToRem(3), height: "calc(100% + " + utils_1.pxToRem(4) + ")", top: utils_1.pxToRem(-2), backgroundColor: v.pointingIndicatorBackgroundColor }, (isFromKeyboard && { display: 'none' })), (pointing === 'end' ? { right: utils_1.pxToRem(-2) } : { left: utils_1.pxToRem(-2) })),
            })),
        })), { 
            // hover styles
            ':hover': __assign(__assign(__assign(__assign(__assign(__assign({ color: v.wrapperColorHover, background: v.backgroundColorHover || colors.backgroundHover }, (active && {
                background: v.activeWrapperBackgroundColorHover,
            })), (vertical && {
                color: v.wrapperColorHover,
                background: v.backgroundColorHover || colors.backgroundHover,
            })), (primary && {
                color: v.primaryWrapperColorHover,
            })), (underlined && {
                color: v.underlinedWrapperColorHover,
                background: v.underlinedWrapperBackgroundHover,
            })), (iconOnly && {
                background: v.iconOnlyBackgroundColorHover,
                color: v.iconOnlyColorHover,
            })), (_b = {}, _b["&>." + MenuItem_1.menuItemClassName + ">." + MenuItemIndicator_1.menuItemIndicatorClassName] = __assign(__assign({ color: v.indicatorColorHover }, (primary && {
                color: v.primaryIndicatorColorHover,
            })), submenuIndicatorDirection_1.submenuIndicatorDirection(vertical)), _b)) }), (iconOnly && {
            borderRadius: v.iconOnlyBorderRadius,
            display: 'flex',
        })), { ':first-child': __assign({}, (!pills &&
                !iconOnly &&
                !(pointing && vertical) &&
                !underlined && __assign(__assign({}, (vertical && {
                '::before': {
                    display: 'none',
                },
            })), (!vertical && {
                borderBottomLeftRadius: utils_1.pxToRem(3),
                borderTopLeftRadius: utils_1.pxToRem(3),
            })))) }), (disabled && {
            color: v.colorDisabled || colors.foregroundDisabled,
            cursor: 'default',
            ':hover': {
            // empty - overwrite all existing hover styles
            },
        }));
    },
};
