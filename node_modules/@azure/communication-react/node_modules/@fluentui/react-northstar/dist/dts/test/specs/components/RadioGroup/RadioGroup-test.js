"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var commonTests_1 = require("test/specs/commonTests");
var implementsCollectionShorthandProp_1 = require("../../commonTests/implementsCollectionShorthandProp");
var utils_1 = require("test/utils");
var RadioGroup_1 = require("src/components/RadioGroup/RadioGroup");
var RadioGroupItem_1 = require("src/components/RadioGroup/RadioGroupItem");
var radioGroupImplementsCollectionShorthandProp = implementsCollectionShorthandProp_1.implementsCollectionShorthandProp(RadioGroup_1.RadioGroup);
var getShorthandItems = function (props) { return [
    {
        name: 'test-name',
        key: 'test-key1',
        label: 'test-label1',
        value: 'test-value1',
        'data-foo': 'something',
        onClick: jest.fn(),
        disabled: props && props.disabledItem === 0,
    },
    {
        name: 'test-name',
        key: 'test-key2',
        label: 'test-label2',
        value: 'test-value2',
        'data-foo': 'something',
        disabled: props && props.disabledItem === 1,
    },
    {
        name: 'test-name',
        key: 'test-key3',
        label: 'test-label3',
        value: 'test-value3',
        'data-foo': 'something',
        disabled: props && props.disabledItem === 2,
    },
]; };
describe('RadioGroup', function () {
    commonTests_1.isConformant(RadioGroup_1.RadioGroup, {
        testPath: __filename,
        constructorName: 'RadioGroup',
        autoControlledProps: ['checkedValue'],
    });
    describe('accessibility', function () {
        commonTests_1.handlesAccessibility(RadioGroup_1.RadioGroup, {
            defaultRootRole: 'radiogroup',
        });
        test('compliance', function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(RadioGroup_1.RadioGroup, { items: getShorthandItems() }))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); }); });
    });
    describe('implementsCollectionShorthandProp', function () {
        radioGroupImplementsCollectionShorthandProp('items', RadioGroupItem_1.RadioGroupItem, {
            mapsValueToProp: false,
        });
    });
    var itemsTest = function (getItems, isShorthandApiTest) {
        if (isShorthandApiTest === void 0) { isShorthandApiTest = true; }
        it('renders children', function () {
            var items = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems() })).find('RadioGroupItem');
            expect(items.length).toBe(3);
            expect(items.first().props().label).toBe('test-label1');
            expect(items.last().props().label).toBe('test-label3');
        });
        it('calls onClick handler for item', function () {
            var items = getItems();
            var radioGroupItems = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: items })).find('RadioGroupItem');
            radioGroupItems.first().find('div').first().simulate('click');
            var onClick = items[0].onClick || items[0].props.onClick;
            expect(onClick).toHaveBeenCalled();
        });
        it('calls onChange handler for item with updated checked state', function () {
            var onChange = jest.fn();
            var items = __spreadArray([
                {
                    name: 'test-name',
                    key: 'test-key0',
                    label: 'test-label0',
                    value: 'test-value0',
                    onChange: onChange,
                }
            ], getItems());
            var wrapper = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: items }));
            var radioGroupItems = wrapper.find('RadioGroupItem');
            radioGroupItems.first().simulate('click');
            expect(onChange).toHaveBeenCalledWith(undefined, expect.objectContaining({ checked: true }));
            radioGroupItems.last().simulate('click');
            expect(onChange).toHaveBeenCalledWith(undefined, expect.objectContaining({ checked: false }));
        });
        it('passes arbitrary props', function () {
            var radioGroupItems = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems() })).find('RadioGroupItem');
            expect(radioGroupItems.everyWhere(function (item) { return item.prop('data-foo') === 'something'; })).toBe(true);
        });
        describe('checkedValue', function () {
            it('should not be set and first item is focusable by default', function () {
                var radioGroupItems = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems() })).find('RadioGroupItem');
                expect(radioGroupItems.everyWhere(function (item) { return !item.is('[checked="true"]'); })).toBe(true);
                expect(radioGroupItems.at(0).props().tabIndex).toBe(0);
            });
        });
        if (isShorthandApiTest) {
            describe('click event handler', function () {
                it('should set "checked" when item is clicked', function () {
                    var onCheckedValueChange = jest.fn();
                    var wrapper = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems(), onCheckedValueChange: onCheckedValueChange }));
                    var radioGroupItems = wrapper.find('RadioGroupItem');
                    radioGroupItems.at(1).find('div').first().simulate('click');
                    var updatedItems = wrapper.find('RadioGroupItem');
                    expect(updatedItems.at(0).props().checked).toBe(false);
                    expect(updatedItems.at(1).props().checked).toBe(true);
                    expect(onCheckedValueChange).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({ value: 'test-value2' }));
                });
            });
        }
        it('should not call checkedValueChanged when index did not change', function () {
            var onCheckedValueChange = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems(), onCheckedValueChange: onCheckedValueChange, checkedValue: "test-value2" }));
            var radioGroupItems = wrapper.find('RadioGroupItem');
            radioGroupItems.at(1).find('div').first().simulate('click');
            expect(onCheckedValueChange).not.toHaveBeenCalled();
        });
        if (isShorthandApiTest) {
            it('should not set "checked" when disabled item is clicked', function () {
                var wrapper = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: getItems({ disabledItem: 1 }) }));
                var radioGroupItems = wrapper.find('RadioGroupItem');
                radioGroupItems.at(1).find('div').first().simulate('click');
                var updatedItems = wrapper.find('RadioGroupItem');
                expect(updatedItems.at(0).props().checked).toBe(false);
                expect(updatedItems.at(1).props().checked).toBe(false);
            });
        }
        describe('keyDown event handler', function () {
            var testKeyDown = function (testName, items, initialValue, keyCode, expectedValue) {
                it("keyDown test - " + testName, function () {
                    var onCheckedValueChange = jest.fn();
                    var wrapper = utils_1.mountWithProvider(React.createElement(RadioGroup_1.RadioGroup, { items: items, checkedValue: initialValue, onCheckedValueChange: onCheckedValueChange }));
                    wrapper
                        .find('div')
                        .first()
                        .simulate('keyDown', { preventDefault: function () { }, keyCode: keyCode, which: keyCode });
                    expect(onCheckedValueChange).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({ value: expectedValue }));
                });
            };
            testKeyDown('should check next value when right arrow is pressed', getItems(), 'test-value1', 39, 'test-value2');
            testKeyDown('should check previous value when left arrow is pressed', getItems(), 'test-value2', 37, 'test-value1');
            testKeyDown('should check first value when right arrow is pressed and last item was checked', getItems(), 'test-value3', 39, 'test-value1');
            testKeyDown('should check last value when left arrow is pressed and first item was checked', getItems(), 'test-value1', 37, 'test-value3');
            testKeyDown('should skip disabled when right arrow is pressed', getItems({ disabledItem: 1 }), 'test-value1', 39, 'test-value3');
            testKeyDown('should skip disabled when left arrow is pressed', getItems({ disabledItem: 1 }), 'test-value3', 37, 'test-value1');
        });
    };
    describe('shorthand API for items', function () {
        itemsTest(getShorthandItems);
    });
});
