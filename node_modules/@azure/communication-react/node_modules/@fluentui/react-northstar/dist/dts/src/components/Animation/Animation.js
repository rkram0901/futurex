"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Animation = void 0;
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var classnames_1 = require("classnames");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var react_transition_group_1 = require("react-transition-group");
var utils_1 = require("../../utils");
var useAnimationStyles_1 = require("./useAnimationStyles");
/**
 * An Animation provides animation effects to rendered elements.
 */
exports.Animation = React.forwardRef(function (props, ref) {
    var _a, _b, _c, _d;
    var context = react_bindings_1.useFluentContext();
    var _e = react_bindings_1.useTelemetry(exports.Animation.displayName, context.telemetry), setStart = _e.setStart, setEnd = _e.setEnd;
    setStart();
    var appear = props.appear, children = props.children, className = props.className, mountOnEnter = props.mountOnEnter, timeout = props.timeout, visible = props.visible, unmountOnExit = props.unmountOnExit;
    var handleAnimationEvent = function (event) { return function () {
        _.invoke(props, event, null, props);
    }; };
    var _f = useAnimationStyles_1.useAnimationStyles(exports.Animation.displayName, props), animationClasses = _f.className, animationDuration = _f.animationDuration, animationDelay = _f.animationDelay;
    var timeoutResult = timeout || react_bindings_1.unstable_calculateAnimationTimeout(animationDuration, animationDelay) || 0;
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Animation.handledProps, props);
    var nodeRef = React.useRef();
    var mergedRef = react_bindings_1.useMergedRefs(ref, nodeRef);
    if (_.isNil(children)) {
        setEnd();
        return null;
    }
    var isChildrenFunction = typeof children === 'function';
    var child = utils_1.childrenExist(children) && !isChildrenFunction && React.Children.only(children);
    var element = (React.createElement(react_transition_group_1.Transition, __assign({ nodeRef: nodeRef, in: visible, appear: appear, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit, timeout: timeoutResult, onEnter: handleAnimationEvent('onEnter'), onEntering: handleAnimationEvent('onEntering'), onEntered: handleAnimationEvent('onEntered'), onExit: handleAnimationEvent('onExit'), onExiting: handleAnimationEvent('onExiting'), onExited: handleAnimationEvent('onExited') }, unhandledProps, { className: !isChildrenFunction ? classnames_1.default(animationClasses, className, (_b = (_a = child) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.className) : '' }), isChildrenFunction ? (function (_a) {
        var _b, _c;
        var state = _a.state;
        var childWithClasses = children({
            classes: classnames_1.default(animationClasses, className, (_c = (_b = child) === null || _b === void 0 ? void 0 : _b.props) === null || _c === void 0 ? void 0 : _c.className),
            state: state,
        });
        return childWithClasses ? React.createElement(react_component_ref_1.Ref, { innerRef: mergedRef }, childWithClasses) : childWithClasses;
    }) : (React.createElement(react_component_ref_1.Ref, { innerRef: mergedRef }, React.cloneElement(child, { className: classnames_1.default(animationClasses, className, (_d = (_c = child) === null || _c === void 0 ? void 0 : _c.props) === null || _d === void 0 ? void 0 : _d.className) })))));
    setEnd();
    return element;
});
exports.Animation.displayName = 'Animation';
exports.Animation.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon({
    accessibility: false,
    as: false,
    content: false,
    children: false,
})), { children: PropTypes.oneOfType([PropTypes.func, PropTypes.element]), name: PropTypes.string, delay: PropTypes.string, direction: PropTypes.string, duration: PropTypes.string, fillMode: PropTypes.string, iterationCount: PropTypes.string, keyframeParams: PropTypes.object, playState: PropTypes.string, timingFunction: PropTypes.string, visible: PropTypes.bool, appear: PropTypes.bool, mountOnEnter: PropTypes.bool, unmountOnExit: PropTypes.bool, timeout: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.shape({
            appear: PropTypes.number,
            enter: PropTypes.number,
            exit: PropTypes.number,
        }),
    ]), onEnter: PropTypes.func, onEntering: PropTypes.func, onEntered: PropTypes.func, onExit: PropTypes.func, onExiting: PropTypes.func, onExited: PropTypes.func });
exports.Animation.handledProps = Object.keys(exports.Animation.propTypes);
