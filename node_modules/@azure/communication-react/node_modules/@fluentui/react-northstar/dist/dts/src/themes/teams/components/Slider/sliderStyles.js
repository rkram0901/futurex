"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sliderStyles = void 0;
var Slider_1 = require("../../../../components/Slider/Slider");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var selectors = {
    WEBKIT_THUMB: '::-webkit-slider-thumb',
    MOZ_THUMB: '::-moz-range-thumb',
    MS_FILL_LOWER: '::-ms-fill-lower',
    MS_FILL_UPPER: '::-ms-fill-upper',
    MS_THUMB: '::-ms-thumb',
};
var getCommonSlotStyles = function (p, v) { return ({
    cursor: 'pointer',
    pointerEvents: 'none',
    position: 'absolute',
    border: 0,
    height: v.railHeight,
    marginTop: "calc(" + v.height + " / 2 - " + v.railHeight + " / 2)",
}); };
// this selector is used to identify the thumb slot from a previous sibling
var thumbFromPreviousSiblingSelector = "&+ ." + Slider_1.sliderSlotClassNames.thumb;
var getFluidStyles = function (p) { return p.fluid && !p.vertical && { width: '100%' }; };
exports.sliderStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign(__assign(__assign({ height: v.height }, (p.disabled && { pointerEvents: 'none' })), (p.vertical && { height: v.length, width: v.height })), getFluidStyles(p)));
    },
    input: function (_a) {
        var _b, _c, _d, _e;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var activeThumbStyles = {
            height: v.activeThumbHeight,
            width: v.activeThumbWidth,
            background: v.activeThumbColor,
            marginTop: "calc(" + v.height + " / 2  - " + v.activeThumbHeight + " / 2)",
            marginLeft: "calc(-" + v.activeThumbWidth + " / 2)",
        };
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({
            variables: siteVariables,
            borderPadding: v.thumbBorderPadding,
        });
        var thumbStyles = { border: 0, width: '1px' };
        return __assign(__assign((_b = { WebkitAppearance: 'none', cursor: 'pointer', height: '100%', width: '100%', margin: 0, padding: 0, opacity: 0 }, _b[selectors.WEBKIT_THUMB] = __assign(__assign({}, thumbStyles), { '-webkit-appearance': 'none' }), _b[selectors.MOZ_THUMB] = thumbStyles, _b[selectors.MS_THUMB] = __assign(__assign({}, thumbStyles), { marginTop: "calc(-" + v.thumbHeight + " / 2)" }), _b[selectors.MS_FILL_LOWER] = { display: 'none' }, _b[selectors.MS_FILL_UPPER] = { display: 'none' }, _b), getFluidStyles(p)), { ':active': (_c = {}, _c[thumbFromPreviousSiblingSelector] = activeThumbStyles, _c), ':focus': (_d = {
                    outline: 0
                },
                _d[thumbFromPreviousSiblingSelector] = borderFocusStyles[':focus'],
                _d), ':focus-visible': (_e = {},
                _e[thumbFromPreviousSiblingSelector] = __assign(__assign({}, borderFocusStyles[':focus-visible']), activeThumbStyles),
                _e) });
    },
    inputWrapper: function (_a) {
        var p = _a.props, v = _a.variables;
        var transformOriginValue = "calc(" + v.length + " / 2)";
        return __assign(__assign({ position: 'relative', display: 'inline-block', height: v.height, width: v.length }, (p.vertical && {
            transform: 'rotate(-90deg)',
            transformOrigin: transformOriginValue + " " + transformOriginValue,
        })), getFluidStyles(p));
    },
    rail: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign(__assign({ width: '100%', background: v.railColor }, getCommonSlotStyles(p, v)), (p.disabled && { background: v.disabledRailColor })));
    },
    track: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign(__assign({ background: v.trackColor }, getCommonSlotStyles(p, v)), (p.disabled && { background: v.disabledTrackColor })));
    },
    thumb: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign({ border: 0, borderRadius: '100%', cursor: 'pointer', pointerEvents: 'none', position: 'absolute', background: v.thumbColor, height: v.thumbHeight, width: v.thumbWidth, marginTop: "calc(" + v.height + " / 2  - " + v.thumbHeight + " / 2)", marginLeft: "calc(-" + v.thumbWidth + " / 2)" }, (p.disabled && { background: v.disabledThumbColor })));
    },
};
