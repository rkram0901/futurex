"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.treeTitleStyles = void 0;
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var TreeTitle_1 = require("../../../../components/Tree/TreeTitle");
var utils_1 = require("../../../../utils");
var checkboxIndicatorUrl_1 = require("../Checkbox/checkboxIndicatorUrl");
var checkboxIndicatorIndeterminatedUrl_1 = require("./checkboxIndicatorIndeterminatedUrl");
exports.treeTitleStyles = {
    root: function (_a) {
        var _b, _c, _d;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables });
        return __assign(__assign(__assign({ padding: v.padding, cursor: 'pointer', color: v.color, position: 'relative', marginLeft: utils_1.pxToRem(1 + (p.level - 1) * 10), paddingRight: v.paddingRight, paddingLeft: v.paddingLeft, userSelect: 'none' }, (p.selectable && {
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
        })), { ':focus': __assign(__assign({}, (p.selectable && (_b = {},
                _b["> ." + TreeTitle_1.treeTitleSlotClassNames.indicator] = {
                    display: 'inline-block',
                },
                _b))), borderFocusStyles[':focus']), ':focus-visible': borderFocusStyles[':focus-visible'], ':hover': __assign({}, (p.selectable && (_c = {
                    background: v.hoverBackground
                },
                _c["> ." + TreeTitle_1.treeTitleSlotClassNames.indicator] = {
                    display: 'inline-block',
                },
                _c))) }), (p.showIndicator && (_d = {},
            _d["> ." + TreeTitle_1.treeTitleSlotClassNames.indicator] = {
                display: 'inline-block',
            },
            _d)));
    },
    selectionIndicator: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign(__assign(__assign(__assign({ display: 'none', float: 'right', verticalAlign: 'middle', boxShadow: 'unset', width: utils_1.pxToRem(16), height: utils_1.pxToRem(16), borderColor: v.borderColor, borderStyle: v.borderStyle, borderRadius: v.borderRadius, borderWidth: v.borderWidth, color: v.indicatorColor, margin: v.selectionIndicatorMargin, padding: v.padding, userSelect: 'none', backgroundImage: checkboxIndicatorUrl_1.checkboxIndicatorUrl(v.indicatorColor, v.background), backgroundPosition: 'center', backgroundRepeat: 'no-repeat' }, (p.selected && {
            borderColor: v.checkedBorderColor,
            backgroundImage: checkboxIndicatorUrl_1.checkboxIndicatorUrl(v.checkedIndicatorColor, v.checkedBackground),
        })), (p.indeterminate && {
            borderColor: v.checkedBorderColor,
            backgroundImage: checkboxIndicatorIndeterminatedUrl_1.checkboxIndicatorIndeterminatedUrl(v.checkedIndicatorColor, v.checkedBackground),
        })), (p.disabled && {
            background: v.disabledBackground,
            borderColor: v.disabledBorderColor,
        })), (p.disabled &&
            p.selected && {
            color: v.disabledCheckedIndicatorColor,
            borderColor: v.disabledBackgroundChecked,
            backgroundImage: checkboxIndicatorUrl_1.checkboxIndicatorUrl(v.disabledCheckedIndicatorColor, v.disabledBackgroundChecked),
        })));
    },
};
