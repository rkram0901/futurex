"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.chatMessageStylesCompact = void 0;
var ChatMessage_1 = require("../../../../components/Chat/ChatMessage");
var utils_1 = require("../../../../utils");
var accessibilityStyles_1 = require("../../../../utils/accessibility/Styles/accessibilityStyles");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
/** ChatMessage styles specific for the compact density. */
exports.chatMessageStylesCompact = {
    root: function (_a) {
        var _b, _c;
        var siteVariables = _a.theme.siteVariables, v = _a.variables;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({ borderRadius: 'inherit', variables: siteVariables });
        var highlight = (_b = {
                backgroundColor: v.compactHoverBackground,
                border: v.compactHoverBorder
            },
            _b["& ." + ChatMessage_1.chatMessageSlotClassNames.timestamp] = {
                opacity: 1,
            },
            _b);
        return __assign(__assign({ border: v.compactBorder, padding: v.paddingCompact, width: '100%' }, ((v.hasMention || v.isImportant) && (_c = {},
            _c["& ." + ChatMessage_1.chatMessageSlotClassNames.bar] = {
                backgroundColor: v.hasMention ? v.hasMentionColor : v.isImportantColor,
                position: 'absolute',
                borderRadius: utils_1.pxToRem(2),
                height: utils_1.pxToRem(20),
                left: utils_1.pxToRem(-56),
                top: v.paddingCompact,
                width: utils_1.pxToRem(2),
            },
            _c))), { ':focus-visible': __assign(__assign({}, borderFocusStyles[':focus-visible']), highlight), '&:hover': highlight });
    },
    author: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign(__assign({}, ((p.attached === 'bottom' || p.attached === true) && accessibilityStyles_1.screenReaderContainerStyles)), { color: p.mine ? v.authorColorMineCompact : v.contentColor, float: 'left', fontWeight: v.authorFontWeightCompact, marginRight: v.authorMarginRightCompact }));
    },
    badge: function (_a) {
        var v = _a.variables;
        return ({
            alignSelf: 'flex-start',
            flexShrink: 0,
            margin: utils_1.pxToRem(-2) + " " + utils_1.pxToRem(-2) + " " + utils_1.pxToRem(-2) + " " + v.compactSpacing,
        });
    },
    compactBody: function () { return ({
        display: 'flex',
        justifyContent: 'space-between',
        '& > div': {
            minWidth: 0,
        },
    }); },
    reactionGroup: function () { return ({
        display: 'flex',
        marginTop: utils_1.pxToRem(4),
    }); },
    timestamp: function (_a) {
        var v = _a.variables;
        return ({
            alignSelf: 'flex-start',
            flexShrink: 0,
            marginLeft: v.compactSpacing,
            marginTop: utils_1.pxToRem(2),
            opacity: 0,
        });
    },
};
