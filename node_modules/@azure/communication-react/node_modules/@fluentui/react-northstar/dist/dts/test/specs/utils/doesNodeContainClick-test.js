"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("src/utils");
var makeEvent = function (event) { return (__assign({ clientX: 0, clientY: 0 }, event)); };
var makeRect = function (rect) { return (__assign({ top: 0, bottom: 1, left: 0, right: 1 }, rect)); };
var makeNode = function (rect, node) { return (__assign({ contains: jest.fn(), offsetWidth: 1, offsetHeight: 1, getClientRects: jest.fn(function () { return ({ length: 1, 0: makeRect(rect) }); }) }, node)); };
describe('doesNodeContainClick', function () {
    describe('nil arguments', function () {
        test('returns false if the node is nil', function () {
            expect(utils_1.doesNodeContainClick(null, makeEvent())).toBe(false);
            expect(utils_1.doesNodeContainClick(undefined, makeEvent())).toBe(false);
        });
        test('returns false if the event is nil', function () {
            expect(utils_1.doesNodeContainClick(makeNode(), null)).toBe(false);
            expect(utils_1.doesNodeContainClick(makeNode(), undefined)).toBe(false);
        });
    });
    describe('e.target', function () {
        test('returns node.contains(e.target) if exists', function () {
            var node = document.createElement('div');
            var target = document.createElement('div');
            var event = makeEvent({ target: target });
            node.appendChild(target);
            document.body.appendChild(node);
            expect(utils_1.doesNodeContainClick(node, event)).toBe(true);
            document.body.removeChild(node);
        });
        test("does not call node.contains(e.target) if doesn't exist", function () {
            var node = document.createElement('div');
            var target = null;
            var event = makeEvent({ target: target });
            document.body.appendChild(node);
            expect(utils_1.doesNodeContainClick(node, event)).toBe(false);
            document.body.removeChild(node);
        });
    });
    describe('nil event properties', function () {
        test('returns false if the e.clientX is nil', function () {
            expect(utils_1.doesNodeContainClick(makeNode(), { clientX: null })).toBe(false);
            expect(utils_1.doesNodeContainClick(makeNode(), { clientX: undefined })).toBe(false);
        });
        test('returns false if the e.clientY is nil', function () {
            expect(utils_1.doesNodeContainClick(makeNode(), { clientY: null })).toBe(false);
            expect(utils_1.doesNodeContainClick(makeNode(), { clientY: undefined })).toBe(false);
        });
        test('does not call node.getClientRects if e.clientX is nil', function () {
            var node = makeNode();
            utils_1.doesNodeContainClick(node, { clientX: null });
            utils_1.doesNodeContainClick(node, { clientX: undefined });
            expect(node.getClientRects).not.toHaveBeenCalled();
        });
        test('does not call node.getClientRects if e.clientY is nil', function () {
            var node = makeNode();
            utils_1.doesNodeContainClick(node, { clientY: null });
            utils_1.doesNodeContainClick(node, { clientY: undefined });
            expect(node.getClientRects).not.toHaveBeenCalled();
        });
    });
    describe('invisible node', function () {
        test('returns false if there is no node.offsetWidth', function () {
            var e = makeEvent();
            expect(utils_1.doesNodeContainClick(makeNode(null, { offsetWidth: 0 }), e)).toBe(false);
            expect(utils_1.doesNodeContainClick(makeNode(null, { offsetWidth: null }), e)).toBe(false);
            expect(utils_1.doesNodeContainClick(makeNode(null, { offsetWidth: undefined }), e)).toBe(false);
        });
        test('returns false if there is no node.offsetHeight', function () {
            var e = makeEvent();
            expect(utils_1.doesNodeContainClick(makeNode(null, { offsetHeight: 0 }), e)).toBe(false);
            expect(utils_1.doesNodeContainClick(makeNode(null, { offsetHeight: null }), e)).toBe(false);
            expect(utils_1.doesNodeContainClick(makeNode(null, { offsetHeight: undefined }), e)).toBe(false);
        });
        test('returns false if there is node.getClientRects is empty', function () {
            var e = makeEvent();
            expect(utils_1.doesNodeContainClick(makeNode(null, { getClientRects: function () { return []; } }), e)).toBe(false);
            expect(utils_1.doesNodeContainClick(makeNode(null, { getClientRects: function () { return ({ length: 0 }); } }), e)).toBe(false);
            expect(utils_1.doesNodeContainClick(makeNode(null, { getClientRects: function () { return ({ length: null }); } }), e)).toBe(false);
            expect(utils_1.doesNodeContainClick(makeNode(null, { getClientRects: function () { return ({ length: undefined }); } }), e)).toBe(false);
        });
    });
    describe('nil node rect properties', function () {
        test('returns false if the node top is nil', function () {
            var nullNode = makeNode({ top: null });
            var undefNode = makeNode({ top: undefined });
            expect(utils_1.doesNodeContainClick(nullNode, makeEvent())).toBe(false);
            expect(utils_1.doesNodeContainClick(undefNode, makeEvent())).toBe(false);
        });
        test('returns false if the node bottom is nil', function () {
            var nullNode = makeNode({ bottom: null });
            var undefNode = makeNode({ bottom: undefined });
            expect(utils_1.doesNodeContainClick(nullNode, makeEvent())).toBe(false);
            expect(utils_1.doesNodeContainClick(undefNode, makeEvent())).toBe(false);
        });
        test('returns false if the node left is nil', function () {
            var nullNode = makeNode({ left: null });
            var undefNode = makeNode({ left: undefined });
            expect(utils_1.doesNodeContainClick(nullNode, makeEvent())).toBe(false);
            expect(utils_1.doesNodeContainClick(undefNode, makeEvent())).toBe(false);
        });
        test('returns false if the node right is nil', function () {
            var nullNode = makeNode({ right: null });
            var undefNode = makeNode({ right: undefined });
            expect(utils_1.doesNodeContainClick(nullNode, makeEvent())).toBe(false);
            expect(utils_1.doesNodeContainClick(undefNode, makeEvent())).toBe(false);
        });
    });
    describe('click outside node rect', function () {
        test('returns false if clientY < node top', function () {
            expect(utils_1.doesNodeContainClick(makeNode({ top: 1 }), makeEvent({ clientY: 0 }))).toBe(false);
        });
        test('returns false if clientY > node bottom', function () {
            expect(utils_1.doesNodeContainClick(makeNode({ bottom: 0 }), makeEvent({ clientY: 1 }))).toBe(false);
        });
        test('returns false if clientX < node left', function () {
            expect(utils_1.doesNodeContainClick(makeNode({ left: 1 }), makeEvent({ clientX: 0 }))).toBe(false);
        });
        test('returns false if clientX > node right', function () {
            expect(utils_1.doesNodeContainClick(makeNode({ right: 0 }), makeEvent({ clientX: 1 }))).toBe(false);
        });
    });
    describe('click inside of node rect', function () {
        test('returns true if clientY > node top && clientY < node bottom', function () {
            expect(utils_1.doesNodeContainClick(makeNode({ top: 1, bottom: 3 }), makeEvent({ clientY: 2 }))).toBe(true);
        });
        test('returns true if clientX > node left && clientX < node right', function () {
            expect(utils_1.doesNodeContainClick(makeNode({ left: 1, right: 3 }), makeEvent({ clientX: 2 }))).toBe(true);
        });
    });
    describe('click on node rect boundary', function () {
        test('returns true if clientY === node top', function () {
            expect(utils_1.doesNodeContainClick(makeNode({ top: 1, bottom: 3 }), makeEvent({ clientY: 1 }))).toBe(true);
        });
        test('returns true if clientY === node bottom', function () {
            expect(utils_1.doesNodeContainClick(makeNode({ top: 1, bottom: 3 }), makeEvent({ clientY: 3 }))).toBe(true);
        });
        test('returns true if clientX === node left', function () {
            expect(utils_1.doesNodeContainClick(makeNode({ left: 1, right: 3 }), makeEvent({ clientX: 1 }))).toBe(true);
        });
        test('returns true if clientX === node right', function () {
            expect(utils_1.doesNodeContainClick(makeNode({ left: 1, right: 3 }), makeEvent({ clientX: 3 }))).toBe(true);
        });
    });
    describe('decimal event and node rect values', function () {
        test('returns true when click is inside node rect', function () {
            var node = makeNode({ top: 0.1, bottom: 0.9, left: 0.1, right: 0.9 });
            var event = makeEvent({ clientX: 0.5, clientY: 0.5 });
            expect(utils_1.doesNodeContainClick(node, event)).toBe(true);
        });
        test('returns false when click is outside node rect', function () {
            var node = makeNode({ top: 0.1, bottom: 0.9, left: 0.1, right: 0.9 });
            var event = makeEvent({ clientX: 1.1, clientY: 1.1 });
            expect(utils_1.doesNodeContainClick(node, event)).toBe(false);
        });
    });
});
