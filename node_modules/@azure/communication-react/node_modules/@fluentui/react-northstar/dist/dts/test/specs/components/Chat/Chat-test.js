"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var Chat_1 = require("src/components/Chat/Chat");
var implementsCollectionShorthandProp_1 = require("../../commonTests/implementsCollectionShorthandProp");
var ChatItem_1 = require("src/components/Chat/ChatItem");
var chatImplementsCollectionShorthandProp = implementsCollectionShorthandProp_1.implementsCollectionShorthandProp(Chat_1.Chat);
describe('Chat', function () {
    commonTests_1.isConformant(Chat_1.Chat, {
        testPath: __filename,
        constructorName: 'Chat',
        skipAsPropTests: 'as-component',
    });
    chatImplementsCollectionShorthandProp('items', ChatItem_1.ChatItem, { mapsValueToProp: 'message' });
    describe('accessibility', function () {
        commonTests_1.handlesAccessibility(Chat_1.Chat);
    });
    describe('child behaviors', function () {
        var items = [
            {
                key: 'item-1',
                message: React.createElement(Chat_1.Chat.Message, { key: "message-1", content: "Hello", author: "Robert Tolbert", timestamp: "10:15 PM", mine: true }),
            },
        ];
        it('uses default when not overriden', function () {
            var chatMessage = utils_1.mountWithProvider(React.createElement(Chat_1.Chat, { items: items })).find('ChatMessage');
            expect(commonTests_1.getRenderedAttribute(chatMessage, 'role', '')).toBe(undefined);
        });
        it('uses child behavior for message', function () {
            var messageBehavior = function () { return ({
                attributes: {
                    root: {
                        role: 'button',
                    },
                },
            }); };
            var chatBehavior = function () { return ({
                childBehaviors: {
                    message: messageBehavior,
                },
            }); };
            var chatMessage = utils_1.mountWithProvider(React.createElement(Chat_1.Chat, { accessibility: chatBehavior, items: items })).find('ChatMessage');
            expect(commonTests_1.getRenderedAttribute(chatMessage, 'role', '')).toBe('button');
        });
    });
});
