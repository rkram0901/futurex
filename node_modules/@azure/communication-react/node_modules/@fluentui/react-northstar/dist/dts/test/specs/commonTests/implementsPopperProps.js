"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.implementsPopperProps = exports.positioningProps = void 0;
var React = require("react");
var positioner_1 = require("src/utils/positioner");
var utils_1 = require("test/utils");
exports.positioningProps = {
    align: 'bottom',
    flipBoundary: document.body,
    offset: [20, 20],
    overflowBoundary: document.body,
    position: 'above',
    positionFixed: true,
    unstable_disableTether: 'all',
    autoSize: true,
    unstable_pinned: true,
};
function implementsPopperProps(Component, options) {
    if (options === void 0) { options = {}; }
    describe('implements all positioning props for Popper', function () {
        Object.entries(exports.positioningProps).forEach(function (_a) {
            var positioningProp = _a[0], positioningValue = _a[1];
            test("\"" + positioningProp + "\" is passed to a Popper component", function () {
                var _a;
                var wrapper = utils_1.mountWithProvider(React.createElement(Component, __assign(__assign({}, options.requiredProps), (_a = {}, _a[positioningProp] = positioningValue, _a))));
                var popper = wrapper.find(positioner_1.Popper);
                expect(popper.prop(positioningProp)).toBe(positioningValue);
            });
        });
        test('popperRef is handled by Popper component', function () {
            var popperRef = jest.fn();
            utils_1.mountWithProvider(React.createElement(Component, __assign(__assign({}, options.requiredProps), { popperRef: popperRef })));
            expect(popperRef).toHaveBeenCalledWith({ updatePosition: expect.any(Function) });
        });
    });
}
exports.implementsPopperProps = implementsPopperProps;
