"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var utils_1 = require("test/utils");
var Portal_1 = require("src/components/Portal/Portal");
var PortalInner_1 = require("src/components/Portal/PortalInner");
var test_utils_1 = require("react-dom/test-utils");
describe('Portal', function () {
    var testPortalInnerIsOpen = function (rootWrapper, visible) {
        expect(rootWrapper.find(PortalInner_1.PortalInner).length).toBe(visible ? 1 : 0);
    };
    var testPortalOpenState = function (rootWrapper, content, isOpen) {
        var portalIsOpen = isOpen;
        testPortalInnerIsOpen(rootWrapper, portalIsOpen);
        expect(rootWrapper.contains(content)).toBe(portalIsOpen);
    };
    it('translates open prop to state', function () {
        var content = React.createElement("p", null);
        var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null) }));
        testPortalOpenState(wrapper, content, false);
        var openPortalWrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), open: true }));
        testPortalOpenState(openPortalWrapper, content, true);
    });
    describe('click', function () {
        it('opens the portal on trigger click when true', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), trigger: React.createElement("button", null, "button") }));
            testPortalInnerIsOpen(wrapper, false);
            wrapper.find('button').simulate('click');
            testPortalInnerIsOpen(wrapper, true);
        });
        it('closes the portal on click when set', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), defaultOpen: true, trigger: React.createElement("button", null, "button") }));
            testPortalInnerIsOpen(wrapper, true);
            wrapper.find('button').simulate('click');
            testPortalInnerIsOpen(wrapper, false);
        });
    });
    describe('document click', function () {
        it('closes the portal', function () { return __awaiter(void 0, void 0, void 0, function () {
            var wrapper;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), defaultOpen: true }));
                        testPortalInnerIsOpen(wrapper, true);
                        return [4 /*yield*/, utils_1.nextFrame()];
                    case 1:
                        _a.sent();
                        test_utils_1.act(function () {
                            utils_1.domEvent.click(document.body);
                        });
                        wrapper.update();
                        testPortalInnerIsOpen(wrapper, false);
                        return [2 /*return*/];
                }
            });
        }); });
        it('does not close on click inside', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", { id: "inner" }), defaultOpen: true }));
            testPortalInnerIsOpen(wrapper, true);
            test_utils_1.act(function () {
                utils_1.domEvent.click('#inner');
            });
            wrapper.update();
            testPortalInnerIsOpen(wrapper, true);
        });
    });
    describe('onMount', function () {
        it('called when portal opens', function () {
            var onMount = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), onMount: onMount }));
            wrapper.setProps({ open: true });
            expect(onMount).toHaveBeenCalledTimes(1);
        });
    });
    describe('onUnmount', function () {
        it('is called when portal closes', function () {
            var onUnmount = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), onUnmount: onUnmount, open: true }));
            wrapper.setProps({ open: false });
            expect(onUnmount).toHaveBeenCalledTimes(1);
        });
        it('is called only once when portal closes and then is unmounted', function () {
            var onUnmount = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), onUnmount: onUnmount, open: true }));
            wrapper.setProps({ open: false });
            wrapper.unmount();
            expect(onUnmount).toHaveBeenCalledTimes(1);
        });
        it('is called only once when directly unmounting', function () {
            var onUnmount = jest.fn();
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), onUnmount: onUnmount, open: true }));
            wrapper.unmount();
            expect(onUnmount).toHaveBeenCalledTimes(1);
        });
    });
    describe('triggerRef', function () {
        it('maintains ref on the trigger', function () {
            var triggerRef = jest.fn();
            var mountNode = document.createElement('div');
            document.body.appendChild(mountNode);
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), trigger: React.createElement("button", { id: "trigger" }), triggerRef: triggerRef }), {
                attachTo: mountNode,
            });
            var triggerElem = document.querySelector('#trigger');
            expect(triggerRef).toHaveBeenCalledTimes(1);
            expect(triggerRef).toHaveBeenCalledWith(triggerElem);
            wrapper.detach();
            document.body.removeChild(mountNode);
        });
    });
    describe('trigger', function () {
        it('renders null when not set', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null) }));
            expect(wrapper.html()).toEqual(null);
        });
        it('renders the trigger when set', function () {
            var text = 'open by click on me';
            var wrapper = utils_1.mountWithProvider(React.createElement(Portal_1.Portal, { content: React.createElement("p", null), trigger: React.createElement("button", null, text) }));
            expect(wrapper.find('button').length).toBe(1);
            expect(wrapper.text()).toEqual(text);
        });
    });
});
