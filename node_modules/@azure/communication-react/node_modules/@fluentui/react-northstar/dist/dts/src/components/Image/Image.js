"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = exports.imageClassName = void 0;
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
exports.imageClassName = 'ui-image';
/**
 * An Image is a graphic representation of something.
 *
 * @accessibility
 * If image should be visible to screen readers, textual representation needs to be provided in 'alt' property.
 *
 * Other considerations:
 *  - when alt property is empty, then Narrator in scan mode navigates to image and narrates it as empty paragraph.
 *  - when image has role='presentation' then screen readers navigate to the element in scan/virtual mode. To avoid this, the attribute "aria-hidden='true'" is applied by the default image behavior.
 *  - when alt property is used in combination with aria-label, arialabbeledby or title, additional screen readers verification is needed as each screen reader handles this combination differently.
 */
exports.Image = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Image.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, alt = props.alt, ariaLabel = props["aria-label"], avatar = props.avatar, circular = props.circular, className = props.className, design = props.design, fluid = props.fluid, styles = props.styles, variables = props.variables;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.Image.displayName,
        mapPropsToBehavior: function () { return ({
            alt: alt,
            'aria-label': ariaLabel,
        }); },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.Image.displayName, {
        className: exports.imageClassName,
        mapPropsToStyles: function () { return ({
            avatar: avatar,
            circular: circular,
            fluid: fluid,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Image.handledProps, props);
    var result = React.createElement(ElementType, __assign({}, getA11Props('root', __assign({ className: classes.root, ref: ref }, unhandledProps))));
    setEnd();
    return result;
});
exports.Image.displayName = 'Image';
exports.Image.defaultProps = {
    as: 'img',
    accessibility: accessibility_1.imageBehavior,
};
exports.Image.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon({
    children: false,
    content: false,
})), { avatar: PropTypes.bool, circular: PropTypes.bool, fluid: PropTypes.bool });
exports.Image.handledProps = Object.keys(exports.Image.propTypes);
exports.Image.create = utils_1.createShorthandFactory({ Component: exports.Image, mappedProp: 'src', allowsJSX: false });
