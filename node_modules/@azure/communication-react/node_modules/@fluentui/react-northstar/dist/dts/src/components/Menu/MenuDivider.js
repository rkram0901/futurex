"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuDivider = exports.menuDividerClassName = void 0;
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var menuContext_1 = require("./menuContext");
exports.menuDividerClassName = 'ui-menu__divider';
/**
 * A MenuDivider is non-actionable element that visually segments items of Menu.
 */
exports.MenuDivider = React.forwardRef(function (inputProps, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.MenuDivider.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var parentProps = react_bindings_1.useContextSelectors(menuContext_1.MenuContext, {
        variables: function (v) { return v.variables; },
        slotProps: function (v) { return v.slotProps.divider; },
        accessibility: function (v) { return v.behaviors.divider; },
    }); // TODO: we should improve typings for the useContextSelectors
    var props = __assign(__assign(__assign({}, parentProps.slotProps), { accessibility: parentProps.accessibility, variables: parentProps.variables }), inputProps);
    var _b = props.accessibility, accessibility = _b === void 0 ? accessibility_1.menuDividerBehavior : _b, children = props.children, content = props.content, vertical = props.vertical, inSubmenu = props.inSubmenu, pills = props.pills, pointing = props.pointing, primary = props.primary, className = props.className, design = props.design, styles = props.styles, secondary = props.secondary, variables = props.variables;
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.MenuDivider.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.MenuDivider.displayName, {
        className: exports.menuDividerClassName,
        mapPropsToStyles: function () { return ({
            hasContent: !!content || !!children,
            pills: pills,
            pointing: pointing,
            vertical: vertical,
            inSubmenu: inSubmenu,
            primary: primary,
            secondary: secondary,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: react_bindings_1.mergeVariablesOverrides(variables, parentProps.variables),
        }); },
        rtl: context.rtl,
        unstable_props: props,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.MenuDivider.handledProps, props);
    var element = (React.createElement(ElementType, __assign({}, getA11yProps('root', __assign(__assign(__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] })), unhandledProps), { ref: ref }))), utils_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
});
exports.MenuDivider.defaultProps = {
    as: 'li',
};
exports.MenuDivider.displayName = 'MenuDivider';
exports.MenuDivider.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon()), { primary: PropTypes.bool, secondary: PropTypes.bool, vertical: PropTypes.bool, inSubmenu: PropTypes.bool, pointing: PropTypes.oneOf(['start', 'end', true, false]) });
exports.MenuDivider.handledProps = Object.keys(exports.MenuDivider.propTypes);
exports.MenuDivider.shorthandConfig = {
    mappedProp: 'content',
};
exports.MenuDivider.create = utils_1.createShorthandFactory({ Component: exports.MenuDivider, mappedProp: 'content' });
