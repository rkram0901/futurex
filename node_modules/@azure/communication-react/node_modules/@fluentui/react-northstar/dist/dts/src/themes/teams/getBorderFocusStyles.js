"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBorderFocusStyles = void 0;
var defaultColor = 'transparent';
/**
 * Returns style object that can be used for styling components on focus state.
 * NOTE: the element where this is used needs to have relative positioning so that the
 * pseudo elements created on focus can be properly positioned.
 */
var getBorderFocusStyles = function (args) {
    var _a, _b, _c, _d;
    var sv = args.variables;
    var _e = args.borderRadius, borderRadius = _e === void 0 ? sv.focusBorderRadius || sv.borderRadius : _e, _f = args.focusInnerBorderColor, focusInnerBorderColor = _f === void 0 ? sv.focusInnerBorderColor || defaultColor : _f, _g = args.focusOuterBorderColor, focusOuterBorderColor = _g === void 0 ? sv.focusOuterBorderColor || defaultColor : _g, borderPadding = args.borderPadding, _h = args.focusInnerBorderWidth, focusInnerBorderWidth = _h === void 0 ? sv.focusInnerBorderWidth || sv.borderWidth : _h, _j = args.focusOuterBorderWidth, focusOuterBorderWidth = _j === void 0 ? sv.focusOuterBorderWidth || sv.borderWidth : _j;
    var defaultPreudoStyles = {
        content: '""',
        position: 'absolute',
        borderStyle: 'solid',
        pointerEvents: 'none',
        borderRadius: borderRadius,
    };
    var borderPaddingTop = ((_a = borderPadding) === null || _a === void 0 ? void 0 : _a.top) || borderPadding;
    var borderPaddingBottom = ((_b = borderPadding) === null || _b === void 0 ? void 0 : _b.bottom) || borderPadding;
    var borderPaddingLeft = ((_c = borderPadding) === null || _c === void 0 ? void 0 : _c.left) || borderPadding;
    var borderPaddingRight = ((_d = borderPadding) === null || _d === void 0 ? void 0 : _d.right) || borderPadding;
    return {
        ':focus': {
            outline: 'none',
        },
        ':focus-visible': {
            borderColor: 'transparent',
            ':before': __assign(__assign({}, defaultPreudoStyles), { borderWidth: focusInnerBorderWidth, zIndex: sv.zIndexes.foreground, borderColor: focusInnerBorderColor, top: borderPadding == null ? '0' : "-" + borderPaddingTop, bottom: borderPadding == null ? '0' : "-" + borderPaddingBottom, left: borderPadding == null ? '0' : "-" + borderPaddingLeft, right: borderPadding == null ? '0' : "-" + borderPaddingRight }),
            ':after': __assign(__assign({}, defaultPreudoStyles), { borderWidth: focusOuterBorderWidth, zIndex: sv.zIndexes.foreground, borderColor: focusOuterBorderColor, top: borderPadding == null
                    ? "-" + focusInnerBorderWidth
                    : "calc(0px - " + borderPaddingTop + " - " + focusInnerBorderWidth + ")", bottom: borderPadding == null
                    ? "-" + focusInnerBorderWidth
                    : "calc(0px - " + borderPaddingBottom + " - " + focusInnerBorderWidth + ")", left: borderPadding == null
                    ? "-" + focusInnerBorderWidth
                    : "calc(0px - " + borderPaddingLeft + " - " + focusInnerBorderWidth + ")", right: borderPadding == null
                    ? "-" + focusInnerBorderWidth
                    : "calc(0px - " + borderPaddingRight + " - " + focusInnerBorderWidth + ")" }),
        },
    };
};
exports.getBorderFocusStyles = getBorderFocusStyles;
