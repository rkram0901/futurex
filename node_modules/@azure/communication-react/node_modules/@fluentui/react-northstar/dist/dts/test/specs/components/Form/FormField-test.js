"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var Button_1 = require("src/components/Button/Button");
var RadioGroup_1 = require("src/components/RadioGroup/RadioGroup");
var Input_1 = require("src/components/Input/Input");
var Text_1 = require("src/components/Text/Text");
var FormField_1 = require("src/components/Form/FormField");
var Box_1 = require("src/components/Box/Box");
var react_icons_northstar_1 = require("@fluentui/react-icons-northstar");
var inputIconClassName = '.ui-input__icon';
var formFieldImplementsShorthandProp = commonTests_1.implementsShorthandProp(FormField_1.FormField);
var getFormField = function (control) {
    return utils_1.mountWithProvider(React.createElement(FormField_1.FormField, { control: { as: control }, name: "firstName" })).find('FormField');
};
describe('FormField', function () {
    commonTests_1.isConformant(FormField_1.FormField, { testPath: __filename, constructorName: 'FormField' });
    formFieldImplementsShorthandProp('label', Text_1.Text);
    formFieldImplementsShorthandProp('message', Text_1.Text);
    formFieldImplementsShorthandProp('control', Box_1.Box, { mapsValueToProp: 'children' });
    var testContainerInfo;
    afterEach(function () {
        if (testContainerInfo) {
            testContainerInfo.removeTestContainer();
            testContainerInfo = undefined;
        }
    });
    it('renders the component control provided in the control shorthand prop', function () {
        var controls = [Button_1.Button, Input_1.Input, RadioGroup_1.RadioGroup];
        controls.forEach(function (control) {
            var formField = getFormField(control);
            var controlElement = formField.find(control);
            expect(controlElement.length).toEqual(1);
        });
    });
    it('renders the primitive control provided in the control shorthand prop', function () {
        var formField = getFormField('input');
        var controlElement = formField.find('input');
        expect(controlElement.length).toEqual(1);
    });
    it('renders with icon and error message', function () {
        var formField = utils_1.mountWithProvider(React.createElement(FormField_1.FormField, __assign({}, {
            label: 'First name',
            name: 'firstName',
            id: 'first-name-shorthand',
            key: 'first-name',
            errorMessage: 'ERROR',
            required: true,
        })));
        expect(formField.find(inputIconClassName)).toBeDefined();
        expect(formField.find("." + FormField_1.formFieldMessageClassName).at(0).getDOMNode().textContent).toBe('ERROR');
    });
    it('renders satisfactory indicator', function () {
        testContainerInfo = utils_1.createTestContainer();
        var formField = utils_1.mountWithProvider(React.createElement(FormField_1.FormField, __assign({}, {
            label: 'First name',
            name: 'firstName',
            id: 'first-name-shorthand',
            key: 'first-name',
            required: true,
            control: {
                as: Input_1.Input,
                successIndicator: React.createElement(react_icons_northstar_1.PresenceAvailableIcon, null),
            },
        })), 
        // toBeVisible requires that the element be in the document
        { attachTo: testContainerInfo.testContainer });
        expect(formField.find('PresenceAvailableIcon').length).toBe(0);
        formField.find('input').simulate('change', { target: { value: 'abc' } });
        expect(formField.find('PresenceAvailableIcon').length).toBe(1);
        expect(formField.find('PresenceAvailableIcon').getDOMNode()).toBeVisible();
    });
    it('should pass id to control', function () {
        var id = 'first-name-shorthand';
        var formField = utils_1.mountWithProvider(React.createElement(FormField_1.FormField, __assign({}, {
            label: 'First name',
            name: 'firstName',
            id: id,
            key: 'first-name',
            required: true,
            control: {
                as: Input_1.Input,
                successIndicator: React.createElement(react_icons_northstar_1.PresenceAvailableIcon, null),
            },
        })));
        expect(formField.find('input').prop('id')).toBe(id);
    });
});
