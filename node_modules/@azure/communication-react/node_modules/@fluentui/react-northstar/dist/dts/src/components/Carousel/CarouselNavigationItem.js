"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CarouselNavigationItem = exports.carouselNavigationItemSlotClassNames = exports.carouselNavigationItemClassName = void 0;
var PropTypes = require("prop-types");
var React = require("react");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var accessibility_1 = require("@fluentui/accessibility");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.carouselNavigationItemClassName = 'ui-carousel__navigationitem';
exports.carouselNavigationItemSlotClassNames = {
    indicator: exports.carouselNavigationItemClassName + "__indicator",
    content: exports.carouselNavigationItemClassName + "__content",
};
/**
 * A CarouselItem is an actionable item within a Carousel.
 */
exports.CarouselNavigationItem = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.CarouselNavigationItem.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, thumbnails = props.thumbnails, vertical = props.vertical, active = props.active, content = props.content, iconOnly = props.iconOnly, primary = props.primary, indicator = props.indicator, className = props.className, design = props.design, styles = props.styles, variables = props.variables, disableClickableNav = props.disableClickableNav;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.CarouselNavigationItem.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.CarouselNavigationItem.displayName,
        actionHandlers: {
            performClick: function (event) { return !event.defaultPrevented && handleClick(event); },
        },
        mapPropsToBehavior: function () { return ({
            active: active,
        }); },
    });
    var _b = react_bindings_1.useStyles(exports.CarouselNavigationItem.displayName, {
        className: exports.carouselNavigationItemClassName,
        mapPropsToStyles: function () { return ({
            thumbnails: thumbnails,
            vertical: vertical,
            active: active,
            hasContent: !!content,
            iconOnly: iconOnly,
            primary: primary,
            hasIndicator: !!indicator,
            disableClickableNav: disableClickableNav,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var renderContent = function () {
        return content
            ? Box_1.Box.create(content, {
                defaultProps: function () { return ({
                    as: 'span',
                    className: exports.carouselNavigationItemSlotClassNames.content,
                    styles: resolvedStyles.content,
                }); },
            })
            : Box_1.Box.create(indicator, {
                defaultProps: function () { return ({
                    className: exports.carouselNavigationItemSlotClassNames.indicator,
                    styles: resolvedStyles.indicator,
                }); },
            });
    };
    var handleClick = function (e) {
        _.invoke(props, 'onClick', e, props);
    };
    var handleBlur = function (e) {
        _.invoke(props, 'onBlur', e, props);
    };
    var handleFocus = function (e) {
        _.invoke(props, 'onFocus', e, props);
    };
    var element = (React.createElement(ElementType, __assign({}, getA11yProps('root', __assign({ className: classes.root, onBlur: handleBlur, onFocus: handleFocus, onClick: handleClick, ref: ref }, unhandledProps)), utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), utils_1.childrenExist(children) ? children : renderContent()));
    setEnd();
    return element;
});
exports.CarouselNavigationItem.displayName = 'CarouselNavigationItem';
exports.CarouselNavigationItem.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon()), { active: PropTypes.bool, indicator: customPropTypes.shorthandAllowingChildren, iconOnly: PropTypes.bool, index: PropTypes.number, onClick: PropTypes.func, primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), vertical: PropTypes.bool, thumbnails: PropTypes.bool, disableClickableNav: PropTypes.bool });
exports.CarouselNavigationItem.handledProps = Object.keys(exports.CarouselNavigationItem.propTypes);
exports.CarouselNavigationItem.defaultProps = {
    accessibility: accessibility_1.tabBehavior,
    as: 'li',
    indicator: {},
};
exports.CarouselNavigationItem.create = utils_1.createShorthandFactory({
    Component: exports.CarouselNavigationItem,
    mappedArrayProp: 'content',
});
