"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var accessibility_1 = require("@fluentui/accessibility");
var Accordion_1 = require("src/components/Accordion/Accordion");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var AccordionTitle_1 = require("src/components/Accordion/AccordionTitle");
var AccordionContent_1 = require("src/components/Accordion/AccordionContent");
var panels = [
    {
        key: 'one',
        title: 'One',
        content: '2 3 4',
    },
    {
        key: 'two',
        title: 'Five',
        content: '6 7 8 9',
    },
    {
        key: 'three',
        title: "What's next?",
        content: '10',
    },
];
var getTitleButtonAtIndex = function (wrapper, index) {
    return wrapper
        .find("." + AccordionTitle_1.accordionTitleSlotClassNames.contentWrapper)
        .filterWhere(function (n) { return typeof n.type() === 'string'; })
        .at(index);
};
var getContentPanels = function (wrapper) {
    return utils_1.findIntrinsicElement(wrapper, "." + AccordionContent_1.accordionContentClassName);
};
var getExclusiveItemWithPropIndex = function (accordion, prop) {
    return accordion.find('AccordionTitle').filterWhere(function (accordionTitle) { return accordionTitle.prop(prop); });
};
var getNonExclusiveItemWithPropIndex = function (accordion, prop) {
    return accordion
        .find('AccordionTitle')
        .filterWhere(function (accordionTitle) { return accordionTitle.prop(prop); })
        .prop('index');
};
var getNonExclusiveItemWithPropArray = function (accordion, prop) {
    return accordion
        .find('AccordionTitle')
        .filterWhere(function (accordionTitle) { return accordionTitle.prop(prop); })
        .map(function (node) { return node.prop('index'); });
};
var getAccordionTitleAtIndex = function (accordion, index) {
    return utils_1.findIntrinsicElement(accordion, "." + AccordionTitle_1.accordionTitleSlotClassNames.contentWrapper).at(index).getDOMNode();
};
describe('Accordion', function () {
    commonTests_1.isConformant(Accordion_1.Accordion, {
        testPath: __filename,
        constructorName: 'Accordion',
        autoControlledProps: ['activeIndex'],
    });
    describe('activeIndex', function () {
        it('has no active item by default when exclusive', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels, exclusive: true }));
            expect(getExclusiveItemWithPropIndex(accordion, 'active')).toHaveLength(0);
        });
        it('is no active item by default in an non-exclusive accordion', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels }));
            expect(getExclusiveItemWithPropIndex(accordion, 'active')).toHaveLength(0);
        });
        it('is has the first element active by default in an exclusive expanded accordion', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels, exclusive: true, expanded: true }));
            expect(getNonExclusiveItemWithPropIndex(accordion, 'active')).toBe(0);
        });
        it('is has only the first element active by default in an non-exclusive expanded accordion', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels, expanded: true }));
            expect(getNonExclusiveItemWithPropIndex(accordion, 'active')).toBe(0);
        });
        it('is has the active elements corresponding to the prop defaultActiveIndex passed', function () {
            var defaultActiveIndex = [1, 2];
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels, defaultActiveIndex: defaultActiveIndex }));
            expect(getNonExclusiveItemWithPropArray(accordion, 'active')).toEqual(expect.arrayContaining(defaultActiveIndex));
        });
        it('actives the indexes clicked by the user if the panels were closed', function () {
            var accordion = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }));
            getTitleButtonAtIndex(accordion, 0).simulate('click');
            getTitleButtonAtIndex(accordion, 2).simulate('click');
            expect(getNonExclusiveItemWithPropArray(accordion, 'active')).toEqual(expect.arrayContaining([0, 2]));
        });
        it('actives the only one index clicked by the user if exclusive prop is passed', function () {
            var accordion = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels, exclusive: true }));
            getTitleButtonAtIndex(accordion, 0).simulate('click');
            expect(accordion
                .find('AccordionTitle')
                .filterWhere(function (accordionTitle) { return accordionTitle.prop('active'); })
                .prop('index')).toEqual(0);
            getTitleButtonAtIndex(accordion, 2).simulate('click');
            expect(accordion
                .find('AccordionTitle')
                .filterWhere(function (accordionTitle) { return accordionTitle.prop('active'); })
                .prop('index')).toEqual(2);
        });
        it('deactivate indexes removed when their panels are closed by the user', function () {
            var accordion = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels, defaultActiveIndex: [0, 1, 2] }));
            getTitleButtonAtIndex(accordion, 0).simulate('click');
            getTitleButtonAtIndex(accordion, 2).simulate('click');
            expect(getNonExclusiveItemWithPropArray(accordion, 'active')).toEqual(expect.arrayContaining([1]));
        });
        it('keeps the at least one panel open if expanded prop is passed', function () {
            var accordion = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels, defaultActiveIndex: [0], expanded: true }));
            getTitleButtonAtIndex(accordion, 0).simulate('click');
            expect(getNonExclusiveItemWithPropArray(accordion, 'active')).toEqual(expect.arrayContaining([0]));
        });
    });
    describe('focusedIndex', function () {
        var _a = utils_1.createTestContainer(), testContainer = _a.testContainer, removeTestContainer = _a.removeTestContainer;
        beforeEach(function () {
            removeTestContainer();
            var _a = utils_1.createTestContainer(), newTestContainer = _a.testContainer, newRemoveTestContainer = _a.removeTestContainer;
            testContainer = newTestContainer;
            removeTestContainer = newRemoveTestContainer;
        });
        it('is set at title click', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }), { attachTo: testContainer });
            var accordion = wrapper.find(Accordion_1.Accordion);
            getTitleButtonAtIndex(wrapper, 1).simulate('click');
            expect(getAccordionTitleAtIndex(accordion, 1)).toHaveFocus();
        });
        it('is changed by arrow key navigation', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }), { attachTo: testContainer });
            var accordion = wrapper.find(Accordion_1.Accordion);
            getTitleButtonAtIndex(wrapper, 1);
            getTitleButtonAtIndex(wrapper, 1).simulate('click');
            getTitleButtonAtIndex(wrapper, 1).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.ArrowUp,
                key: 'ArrowUp',
            });
            expect(getAccordionTitleAtIndex(accordion, 0)).toHaveFocus();
            getTitleButtonAtIndex(wrapper, 0).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.ArrowDown,
                key: 'ArrowDown',
            });
            expect(getAccordionTitleAtIndex(accordion, 1)).toHaveFocus();
        });
        it('is changed by arrow key navigation in a circular way', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }), { attachTo: testContainer });
            var accordion = wrapper.find(Accordion_1.Accordion);
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            getTitleButtonAtIndex(wrapper, 0).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.ArrowUp,
                key: 'ArrowUp',
            });
            expect(getAccordionTitleAtIndex(accordion, panels.length - 1)).toHaveFocus();
            getTitleButtonAtIndex(wrapper, panels.length - 1).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.ArrowDown,
                key: 'ArrowDown',
            });
            expect(getAccordionTitleAtIndex(accordion, 0)).toHaveFocus();
        });
        it('is changed to `0` at Home keydown', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }), { attachTo: testContainer });
            var accordion = wrapper.find(Accordion_1.Accordion);
            getTitleButtonAtIndex(wrapper, 2).simulate('click');
            getTitleButtonAtIndex(wrapper, 2).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.Home,
                key: 'Home',
            });
            expect(getAccordionTitleAtIndex(accordion, 0)).toHaveFocus();
        });
        it('is changed to last index at End keydown', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }), { attachTo: testContainer });
            var accordion = wrapper.find(Accordion_1.Accordion);
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            getTitleButtonAtIndex(wrapper, 0).simulate('keydown', {
                keyCode: accessibility_1.keyboardKey.End,
                key: 'End',
            });
            expect(getAccordionTitleAtIndex(accordion, panels.length - 1)).toHaveFocus();
        });
        it('focuses the button element when is changed via focus handler', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels }), { attachTo: testContainer });
            var title = getTitleButtonAtIndex(wrapper, 1);
            title.simulate('click');
            title.simulate('keydown', { keyCode: accessibility_1.keyboardKey.ArrowUp, key: 'ArrowUp' });
            expect(document.activeElement).toEqual(getTitleButtonAtIndex(wrapper, 0).getDOMNode());
        });
    });
    describe('panels', function () {
        it('when clicked call onClick and onTitleClick if provided by the user', function () {
            var onTitleClick = jest.fn();
            var panels = [
                {
                    key: 'one',
                    title: 'One',
                    content: '2 3 4',
                },
            ];
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.Accordion, { panels: panels, onTitleClick: onTitleClick }));
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            expect(onTitleClick).toBeCalledTimes(1);
        });
        it('renders just active panels', function () {
            var defaultActiveIndex = [1, 2];
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.Accordion, React.createElement(Accordion_1.Accordion, { panels: panels, defaultActiveIndex: defaultActiveIndex }));
            expect(getContentPanels(accordion).length).toBe(2);
        });
    });
    describe('accessibility', function () {
        commonTests_1.handlesAccessibility(Accordion_1.Accordion, { defaultRootRole: 'presentation' });
    });
    describe('HTML accessibility rules validation', function () {
        test('default Accordion', function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(Accordion_1.Accordion, { panels: panels }))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); }); });
    });
});
