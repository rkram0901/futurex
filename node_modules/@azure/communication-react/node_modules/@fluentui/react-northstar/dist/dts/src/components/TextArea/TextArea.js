"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextArea = exports.textAreaClassName = void 0;
var accessibility_1 = require("@fluentui/accessibility");
var _ = require("lodash");
var React = require("react");
var PropTypes = require("prop-types");
var utils_1 = require("../../utils");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.textAreaClassName = 'ui-textarea';
/**
 * A TextArea is a multi-line plan-text editing control.
 *
 * @accessibility
 * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.
 * When using maxlength attribute, provide the information about max length in label for screen reader.
 * @accessibilityIssues
 * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)
 * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)
 */
exports.TextArea = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.TextArea.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var disabled = props.disabled, accessibility = props.accessibility, inverted = props.inverted, resize = props.resize, fluid = props.fluid, className = props.className, design = props.design, styles = props.styles, variables = props.variables, error = props.error;
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultValue,
        value: props.value,
        initialValue: '',
    }), value = _b[0], setValue = _b[1];
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.TextArea.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.TextArea.displayName,
        mapPropsToBehavior: function () { return ({
            disabled: disabled,
        }); },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.TextArea.displayName, {
        className: exports.textAreaClassName,
        mapPropsToStyles: function () { return ({
            inverted: inverted,
            resize: resize,
            fluid: fluid,
            disabled: disabled,
            error: error,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var handleChange = function (e) {
        var newValue = _.get(e, 'target.value');
        _.invoke(props, 'onChange', e, __assign(__assign({}, props), { value: newValue }));
        setValue(newValue);
    };
    var element = (React.createElement(ElementType, __assign({}, getA11yProps('root', __assign({ className: classes.root, value: value, disabled: disabled, ref: ref, onChange: handleChange }, unhandledProps)))));
    setEnd();
    return element;
});
exports.TextArea.displayName = 'TextArea';
exports.TextArea.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { defaultValue: PropTypes.string, onChange: PropTypes.func, value: PropTypes.string, disabled: PropTypes.bool, inverted: PropTypes.bool, fluid: PropTypes.bool, error: PropTypes.bool, resize: PropTypes.oneOf(['none', 'both', 'horizontal', 'vertical']) });
exports.TextArea.defaultProps = {
    as: 'textarea',
    accessibility: accessibility_1.textAreaBehavior,
};
exports.TextArea.handledProps = Object.keys(exports.TextArea.propTypes);
exports.TextArea.create = utils_1.createShorthandFactory({
    Component: exports.TextArea,
});
