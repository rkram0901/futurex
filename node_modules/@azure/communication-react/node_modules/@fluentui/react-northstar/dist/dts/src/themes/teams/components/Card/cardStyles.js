"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cardStyles = void 0;
var CardExpandableBox_1 = require("../../../../components/Card/CardExpandableBox");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
exports.cardStyles = {
    root: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables, theme = _a.theme;
        var siteVariables = theme.siteVariables;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({
            variables: siteVariables,
            borderRadius: v.borderRadius,
        });
        return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ display: 'flex', flexDirection: 'column', position: 'relative', padding: v.padding, margin: v.margin, width: v.width, height: v.height, borderWidth: v.borderWidth, borderStyle: v.borderStyle, borderColor: v.borderColor, borderRadius: v.borderRadius, backgroundColor: v.backgroundColor }, (p.ghost && {
            backgroundColor: v.ghostBackgroundColor,
        })), (p.inverted && {
            backgroundColor: v.invertedBackgroundColor,
        })), (p.selected && {
            backgroundColor: v.selectedBackgroundColor,
        })), { boxShadow: v.boxShadow }), (p.elevated && {
            boxShadow: v.elevatedBoxShadow,
        })), { ':hover': __assign(__assign(__assign(__assign(__assign({ backgroundColor: v.backgroundColorHover }, (p.ghost && {
                backgroundColor: v.ghostBackgroundColorHover,
            })), (p.inverted && {
                backgroundColor: v.invertedBackgroundColorHover,
            })), (p.selected && {
                backgroundColor: v.selectedBackgroundColorHover,
            })), { borderColor: v.borderColorHover, boxShadow: v.boxShadowHover }), (p.elevated && {
                boxShadow: v.elevatedBoxShadowHover,
            })) }), borderFocusStyles), (p.actionable && {
            cursor: 'pointer',
            ':focus-visible': __assign(__assign(__assign(__assign(__assign(__assign({ backgroundColor: v.backgroundColorFocus }, (p.ghost && {
                backgroundColor: v.ghostBackgroundColorFocus,
            })), (p.inverted && {
                backgroundColor: v.invertedBackgroundColorFocus,
            })), (p.selected && {
                backgroundColor: v.selectedBackgroundColorFocus,
            })), { boxShadow: v.boxShadowFocus }), (p.elevated && {
                boxShadow: v.elevatedBoxShadowFocus,
            })), borderFocusStyles[':focus-visible']),
            ':active': __assign(__assign(__assign(__assign(__assign({ backgroundColor: v.backgroundColorPressed }, (p.ghost && {
                backgroundColor: v.ghostBackgroundColorPressed,
            })), (p.inverted && {
                backgroundColor: v.invertedBackgroundColorPressed,
            })), (p.selected && {
                backgroundColor: v.selectedBackgroundColorPressed,
            })), { borderColor: v.borderColorPressed, boxShadow: v.boxShadowPressed }), (p.elevated && {
                boxShadow: v.elevatedBoxShadowPressed,
            })),
        })), (p.size === 'small' && { width: v.sizeSmallWidth, height: v.sizeSmallHeight, padding: v.sizeSmallPadding })), (p.size === 'large' && { width: v.sizeLargeWidth, height: v.sizeLargeHeight, padding: v.sizeLargePadding })), (p.fluid && { width: v.fluidWidth, height: v.fluidHeight })), (p.horizontal && { flexDirection: 'row' })), (p.compact && { padding: v.compactPadding })), (p.centered && { alignItems: 'center' })), (p.disabled && __assign(__assign(__assign(__assign({ cursor: 'not-allowed', color: v.colorDisabled, backgroundColor: v.backgroundColorDisabled, borderColor: v.borderColorDisabled, boxShadow: v.boxShadowDisabled }, (p.inverted && {
            backgroundColor: v.invertedBackgroundColorDisabled,
        })), (p.ghost && {
            backgroundColor: v.ghostBackgroundColorDisabled,
        })), (p.selected && {
            backgroundColor: v.selectedBackgroundColorDisabled,
        })), { ':hover': {
                boxShadow: v.boxShadowDisabled,
            }, ':focus-visible': __assign({ boxShadow: v.boxShadowDisabled }, borderFocusStyles[':focus-visible']), ':active': {
                boxShadow: v.boxShadowDisabled,
            } }))), (p.expandable && (_b = {},
            _b["& ." + CardExpandableBox_1.cardExpandableBoxClassName] = {
                maxHeight: v.expandableBoxStartMaxHeight,
                transition: v.expandableBoxExpandTransition,
                overflow: 'hidden',
            },
            _b["&:hover ." + CardExpandableBox_1.cardExpandableBoxClassName] = {
                maxHeight: v.expandableBoxEndMaxHeight,
                transition: v.expandableBoxExpandTransition,
            },
            _b["&:focus ." + CardExpandableBox_1.cardExpandableBoxClassName] = {
                maxHeight: v.expandableBoxEndMaxHeight,
                transition: v.expandableBoxExpandTransition,
            },
            _b)));
    },
};
