"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.layoutStyles = void 0;
var debugStyles_1 = require("../../../../styles/debugStyles");
var countTrue = function (items) { return items.filter(Boolean).length; };
exports.layoutStyles = {
    root: function (_a) {
        var _b;
        var props = _a.props;
        var alignItems = props.alignItems, debug = props.debug, gap = props.gap, justifyItems = props.justifyItems, hasMain = props.hasMain, mainSize = props.mainSize, hasEnd = props.hasEnd, endSize = props.endSize, hasStart = props.hasStart, startSize = props.startSize, vertical = props.vertical;
        return __assign(__assign(__assign({}, (debug && debugStyles_1.debugRoot())), (_b = { justifyItems: justifyItems, alignItems: alignItems, display: 'grid' }, _b[vertical ? 'gridTemplateRows' : 'gridTemplateColumns'] = [
            // Heads up!
            // IE11 Doesn't support grid-gap, insert virtual columns instead
            hasStart && startSize,
            gap && hasStart && hasMain && gap,
            hasMain && mainSize,
            gap && (hasStart || hasMain) && hasEnd && gap,
            hasEnd && endSize,
        ]
            .filter(Boolean)
            .join(' '), _b)), (vertical && {
            gridAutoFlow: 'row',
            msGridColumns: '1fr',
        }));
    },
    gap: function (_a) {
        var props = _a.props;
        return (__assign({}, (props.debug && debugStyles_1.debugGap({ vertical: props.vertical }))));
    },
    start: function (_a) {
        var _b;
        var p = _a.props;
        return (__assign(__assign({}, (p.debug && debugStyles_1.debugArea())), (_b = { alignItems: 'center', display: 'inline-flex' }, _b[p.vertical ? 'msGridRow' : 'msGridColumn'] = '1', _b)));
    },
    main: function (_a) {
        var _b;
        var p = _a.props;
        return (__assign(__assign({}, (p.debug && debugStyles_1.debugArea())), (_b = { alignItems: 'center', display: 'grid' }, _b[p.vertical ? 'msGridRow' : 'msGridColumn'] = countTrue([p.hasStart, p.hasStart && p.gap, p.hasMain]), _b)));
    },
    end: function (_a) {
        var _b;
        var p = _a.props;
        return (__assign(__assign({}, (p.debug && debugStyles_1.debugArea())), (_b = { alignItems: 'center', display: 'inline-flex' }, _b[p.vertical ? 'msGridRow' : 'msGridColumn'] = countTrue([p.hasStart, p.hasStart && p.gap, p.hasMain && p.gap]), _b)));
    },
};
