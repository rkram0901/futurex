"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pillStyles = void 0;
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
exports.pillStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ display: 'inline-flex', width: 'fit-content', position: 'relative', height: v.height, maxHeight: v.height, borderRadius: v.borderRadius, background: v.background, margin: v.margin, minWidth: v.minWidth, ':hover': {
                background: v.backgroundHover,
            } }, (p.rectangular && __assign({ borderRadius: v.roundedBorderRadius }, ((p.size === 'small' || p.size === 'smaller') && {
            borderRadius: v.smallerRoundedBorderRadius,
        })))), (p.size === 'smaller' && {
            minWidth: v.smallerMinWidth,
            margin: v.smallerMargin,
            height: v.smallerHeight,
            maxHeight: v.smallerHeight,
        })), (p.size === 'small' && {
            minWidth: v.smallMinWidth,
            margin: v.smallMargin,
            height: v.smallHeight,
            maxHeight: v.smallHeight,
        })), (p.disabled && {
            pointerEvents: 'none',
            cursor: 'not-allowed',
            background: v.disabledBackground,
            color: v.disabledColor,
            ':hover': {
                background: v.disabledBackground,
            },
        })), (p.appearance === 'outline' && __assign({ borderWidth: '1px', borderStyle: 'solid', background: v.outlineBackground, borderColor: v.outlineBorderColor, ':hover': {
                background: v.outlineBackground,
            } }, (p.disabled && {
            borderColor: v.outlineDisabledborder,
        })))), (p.appearance === 'inverted' && __assign({ background: v.invertedBackground, ':hover': {
                background: v.invertedBackground,
            } }, (p.disabled && {
            background: v.disabledBackground,
        })))), (p.selectable && __assign({ cursor: 'pointer' }, (p.selected && {
            background: 'transparent',
            boxShadow: "inset " + v.selectedIconColor + " 0px 0px 0px 1px",
        })))), getBorderFocusStyles_1.getBorderFocusStyles({ variables: siteVariables }));
    },
};
