"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccordionContent = exports.accordionContentClassName = void 0;
var accessibility_1 = require("@fluentui/accessibility");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var utils_1 = require("../../utils");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.accordionContentClassName = 'ui-accordion__content';
/**
 * An AccordionContent displays content hosted in an Accordion.
 */
exports.AccordionContent = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.AccordionContent.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, content = props.content, accordionTitleId = props.accordionTitleId, active = props.active, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.AccordionContent.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.AccordionContent.displayName,
        mapPropsToBehavior: function () { return ({
            accordionTitleId: accordionTitleId,
        }); },
        rtl: context.rtl,
    });
    var handleClick = function (e) {
        _.invoke(props, 'onClick', e, props);
    };
    var classes = react_bindings_1.useStyles(exports.AccordionContent.displayName, {
        className: exports.accordionContentClassName,
        mapPropsToStyles: function () { return ({
            active: active,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var element = (React.createElement(ElementType, __assign({}, getA11yProps('root', __assign({ className: classes.root, onClick: handleClick, ref: ref }, unhandledProps)), utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] })), utils_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
});
exports.AccordionContent.displayName = 'AccordionContent';
exports.AccordionContent.shorthandConfig = {
    mappedProp: 'content',
};
exports.AccordionContent.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon()), { accordionTitleId: PropTypes.string, active: PropTypes.bool, onClick: PropTypes.func });
exports.AccordionContent.defaultProps = {
    accessibility: accessibility_1.accordionContentBehavior,
    as: 'div',
};
exports.AccordionContent.handledProps = Object.keys(exports.AccordionContent.propTypes);
exports.AccordionContent.create = utils_1.createShorthandFactory({
    Component: exports.AccordionContent,
    mappedProp: 'content',
});
