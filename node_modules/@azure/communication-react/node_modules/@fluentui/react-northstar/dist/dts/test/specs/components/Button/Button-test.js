"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var accessibility_1 = require("@fluentui/accessibility");
var Button_1 = require("src/components/Button/Button");
var a11y_testing_1 = require("@fluentui/a11y-testing");
describe('Button', function () {
    commonTests_1.isConformant(Button_1.Button, {
        testPath: __filename,
        constructorName: 'Button',
    });
    describe('accessibility', function () {
        describe('button', function () {
            commonTests_1.handlesAccessibility(Button_1.Button, {
                defaultRootRole: undefined,
            });
        });
        describe('div Button', function () {
            commonTests_1.handlesAccessibility(Button_1.Button, {
                requiredProps: { as: 'div' },
                defaultRootRole: 'button',
            });
        });
        describe('HTML accessibility rules validation', function () {
            describe('icon button must have textual representation for screen readers', function () {
                test('with title', function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(Button_1.Button, { icon: "books", title: "testing button" }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); });
                test('with aria-label attribute', function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(Button_1.Button, { icon: "books", "aria-label": "testing button" }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); });
                test('with aria-labelledby attribute', function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement("div", null,
                                    React.createElement(Button_1.Button, { icon: "books", "aria-labelledby": "tstBtn" }),
                                    React.createElement("span", { id: "tstBtn" }, "testing button")))];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); });
            });
            describe('different buttons variants', function () {
                test('button', function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(Button_1.Button, null, "Simple test button"))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); });
                test('button with text and icon', function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, commonTests_1.htmlIsAccessibilityCompliant(React.createElement(Button_1.Button, { icon: "test", content: "Simple test button" }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); });
            });
        });
        describe('ToggleButton behavior', function () {
            describe('role button', function () {
                test('is not defined, if compoenent is button', function () {
                    var renderedComponent = utils_1.mountWithProviderAndGetComponent(Button_1.Button, React.createElement(Button_1.Button, { accessibility: accessibility_1.toggleButtonBehavior }));
                    expect(commonTests_1.getRenderedAttribute(renderedComponent, 'role', '')).toBe(undefined);
                });
                test('is defined, if compoenent is not button', function () {
                    var renderedComponent = utils_1.mountWithProviderAndGetComponent(Button_1.Button, React.createElement(Button_1.Button, { as: "div", accessibility: accessibility_1.toggleButtonBehavior }));
                    expect(commonTests_1.getRenderedAttribute(renderedComponent, 'role', '')).toBe('button');
                });
            });
        });
    });
    describe('circular', function () {
        var circularProp = 'circular';
        test('is not set by default', function () {
            var btnCircular = utils_1.mountWithProviderAndGetComponent(Button_1.Button, React.createElement(Button_1.Button, null)).prop(circularProp);
            expect(btnCircular).toBeUndefined();
        });
        test('can be set to true', function () {
            var btnCircular = utils_1.mountWithProviderAndGetComponent(Button_1.Button, React.createElement(Button_1.Button, { circular: true })).prop(circularProp);
            expect(btnCircular).toEqual(true);
        });
    });
    describe('onClick', function () {
        test('does not call onClick when the button is disabled', function () {
            var onClick = jest.fn();
            var button = utils_1.mountWithProvider(React.createElement(Button_1.Button, { disabled: true, onClick: onClick })).find('Button');
            button.simulate('click');
            expect(onClick).not.toHaveBeenCalled();
        });
        test('is called with (e, props) on a click', function () {
            var onClick = jest.fn();
            var button = utils_1.mountWithProviderAndGetComponent(Button_1.Button, React.createElement(Button_1.Button, { onClick: onClick }));
            button.simulate('click');
            expect(onClick).toHaveBeenCalledTimes(1);
            expect(onClick).toHaveBeenCalledWith(expect.objectContaining({ type: 'click' }), expect.objectContaining({ onClick: onClick }));
        });
    });
    describe('ButtonBehavior', function () {
        var testFacade = new a11y_testing_1.ComponentTestFacade(Button_1.Button, {});
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.buttonBehaviorDefinition, testFacade);
        expect(errors).toEqual([]);
    });
    describe('ButtonToggleBehavior', function () {
        var testFacade = new a11y_testing_1.ComponentTestFacade(Button_1.Button, { accessibility: accessibility_1.toggleButtonBehavior });
        var errors = a11y_testing_1.validateBehavior(a11y_testing_1.toggleButtonBehaviorDefinition, testFacade);
        expect(errors).toEqual([]);
    });
});
