"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listItemStyles = void 0;
var accessibilityStyles_1 = require("../../../../utils/accessibility/Styles/accessibilityStyles");
var ListItemContent_1 = require("../../../../components/List/ListItemContent");
var ListItemContentMedia_1 = require("../../../../components/List/ListItemContentMedia");
var ListItemEndMedia_1 = require("../../../../components/List/ListItemEndMedia");
var ListItemHeader_1 = require("../../../../components/List/ListItemHeader");
var ListItemHeaderMedia_1 = require("../../../../components/List/ListItemHeaderMedia");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var selectableHoverStyle = function (p, v) {
    var _a;
    return (_a = {
            background: v.selectableFocusHoverBackgroundColor,
            color: v.selectableFocusHoverColor,
            cursor: 'pointer'
        },
        _a["& ." + ListItemHeader_1.listItemHeaderClassName] = { color: 'inherit' },
        _a["& ." + ListItemContent_1.listItemContentClassName] = { color: 'inherit' },
        // hide the header media and content media on hover
        _a["& ." + ListItemHeaderMedia_1.listItemHeaderMediaClassName] = __assign(__assign({}, accessibilityStyles_1.screenReaderContainerStyles), { color: 'inherit' }),
        _a["& ." + ListItemContentMedia_1.listItemContentMediaClassName] = { display: 'none', color: 'inherit' },
        // show the end media on hover
        _a["& ." + ListItemEndMedia_1.listItemEndMediaClassName] = { display: 'block', color: 'inherit' },
        _a);
};
var selectedStyle = function (variables) { return ({
    background: variables.selectedBackgroundColor,
    color: variables.selectedColor,
}); };
exports.listItemStyles = {
    root: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({
            variables: siteVariables,
        });
        return __assign(__assign({ display: 'flex', alignItems: 'center', minHeight: v.minHeight, padding: v.rootPadding }, ((p.selectable || p.navigable) && __assign((_b = { position: 'relative', userSelect: 'none' }, _b["& ." + ListItemEndMedia_1.listItemEndMediaClassName] = { display: 'none' }, _b['&:hover'] = selectableHoverStyle(p, v), _b[':focus'] = borderFocusStyles[':focus'], _b[':focus-visible'] = __assign(__assign({}, borderFocusStyles[':focus-visible']), { zIndex: v.zIndex }), _b), (p.selected && selectedStyle(v))))), (p.important && {
            fontWeight: v.importantFontWeight,
        }));
    },
    headerWrapper: function () { return ({
        display: 'flex',
    }); },
    contentWrapper: function () { return ({
        display: 'flex',
    }); },
    main: function () { return ({
        display: 'flex',
        flexDirection: 'column',
        flexGrow: 1,
        minWidth: 0, // needed for the truncate styles to work
    }); },
};
