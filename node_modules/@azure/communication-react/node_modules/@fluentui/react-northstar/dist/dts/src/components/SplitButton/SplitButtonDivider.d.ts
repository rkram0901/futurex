import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Accessibility } from '@fluentui/accessibility';
import { UIComponentProps, ChildrenComponentProps, ColorComponentProps, ContentComponentProps } from '../../utils';
import { FluentComponentStaticProps } from '../../types';
export interface SplitButtonDividerProps extends UIComponentProps, ChildrenComponentProps, ColorComponentProps, ContentComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     */
    accessibility?: Accessibility<never>;
    /** A split button divider can be formatted to show different levels of emphasis. */
    primary?: boolean;
}
export declare type SplitButtonDividerStylesProps = Required<Pick<SplitButtonDividerProps, 'primary'>>;
export declare const SplitButtonDividerClassName = "ui-splitButtonDivider";
/**
 * A SplitButtonDivider visually segments content.
 */
export declare const SplitButtonDivider: (<TExtendedElementType extends React.ElementType<any> = "div">(props: React.RefAttributes<HTMLDivElement> & Omit<import("@fluentui/react-bindings").PropsOfElement<TExtendedElementType>, "as" | keyof SplitButtonDividerProps> & {
    as?: TExtendedElementType;
} & SplitButtonDividerProps) => JSX.Element) & {
    propTypes?: React.WeakValidationMap<SplitButtonDividerProps> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
    contextTypes?: PropTypes.ValidationMap<any>;
    defaultProps?: Partial<SplitButtonDividerProps & {
        as: "div";
    }>;
    displayName?: string;
    readonly __PRIVATE_PROPS?: React.RefAttributes<HTMLDivElement> & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>> & {
        ref?: React.Ref<HTMLDivElement>;
    }, "as" | keyof SplitButtonDividerProps> & {
        as?: "div";
    } & SplitButtonDividerProps;
} & FluentComponentStaticProps<SplitButtonDividerProps>;
