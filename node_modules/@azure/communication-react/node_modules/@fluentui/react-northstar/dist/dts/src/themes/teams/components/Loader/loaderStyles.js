"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loaderStyles = void 0;
var utils_1 = require("../../../../utils");
var rootFlexDirections = {
    above: 'column-reverse',
    below: 'column',
    start: 'row-reverse',
    end: 'row',
};
exports.loaderStyles = {
    root: function (_a) {
        var p = _a.props;
        return ({
            alignItems: 'center',
            display: p.inline ? 'inline-flex' : 'flex',
            justifyContent: 'center',
            flexDirection: rootFlexDirections[p.labelPosition],
        });
    },
    indicator: function (_a) {
        var p = _a.props, v = _a.variables;
        return ({
            height: v.containerHeights[p.size],
            width: v.containerWidths[p.size],
            overflow: 'hidden',
        });
    },
    svg: function (_a) {
        var p = _a.props, t = _a.theme, v = _a.variables;
        var outerAnimation = {
            animationName: {
                to: {
                    opacity: 1,
                },
            },
            animationDelay: '1.5s',
            animationDirection: 'normal',
            animationDuration: '.3s',
            animationFillMode: 'both',
            animationIterationCount: '1',
            animationPlayState: 'running',
            animationTimingFunction: 'ease-out',
            display: 'block',
            overflow: 'hidden',
            position: 'relative',
        };
        var svgAnimation = {
            animationName: {
                to: {
                    transform: "translate3d(0, " + v.svgTranslatePosition[p.size] + ", 0)",
                },
            },
            animationDelay: '0s',
            animationDirection: 'normal',
            animationDuration: '2s',
            animationFillMode: 'both',
            animationPlayState: 'running',
            animationTimingFunction: 'steps(60, end)',
            animationIterationCount: 'infinite',
        };
        return __assign(__assign({}, outerAnimation), { ':before': __assign(__assign({}, svgAnimation), { backgroundImage: p.secondary ? v.secondarySvgContent : v.svgContent, content: '" "', display: 'block', overflow: 'hidden', height: v.svgHeights[p.size], width: v.svgWidths[p.size] }) });
    },
    label: function () { return ({
        margin: utils_1.pxToRem(10),
    }); },
};
