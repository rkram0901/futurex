"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tooltipContentStyles = void 0;
var getPointerStyles_1 = require("../../getPointerStyles");
var pointerSvgUrl_1 = require("../../pointerSvgUrl");
exports.tooltipContentStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign(__assign({ display: 'none', position: 'absolute', maxWidth: v.maxWidth, zIndex: v.zIndex }, (p.pointing && __assign({ pointerEvents: 'all' }, getPointerStyles_1.getContainerStyles({
            placement: p.basePlacement,
            padding: v.pointerMargin,
        })))), (p.open && {
            display: 'block',
        })));
    },
    pointer: function (_a) {
        var p = _a.props, v = _a.variables, rtl = _a.rtl;
        return (__assign({ display: 'block', position: 'absolute', width: v.pointerWidth, height: v.pointerHeight }, getPointerStyles_1.getPointerStyles({
            backgroundColor: p.subtle ? v.subtleBackgroundColor : v.backgroundColor,
            borderSize: v.borderSize,
            borderColor: p.subtle ? v.subtleBorderColor : 'transparent',
            gap: v.pointerGap,
            padding: v.pointerMargin,
            height: v.pointerHeight,
            width: v.pointerWidth,
            placement: p.basePlacement,
            rtl: rtl,
            svg: pointerSvgUrl_1.pointerSvgUrl(p.subtle ? v.subtleBackgroundColor : v.backgroundColor),
        })));
    },
    content: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign(__assign({ display: 'block', padding: v.padding, textAlign: 'left', color: v.color, background: v.backgroundColor, borderRadius: v.borderRadius, boxShadow: v.boxShadow }, (p.subtle && {
            background: v.subtleBackgroundColor,
            color: v.subtleForegroundColor,
            borderStyle: 'solid',
            borderWidth: v.borderSize,
            borderColor: v.subtleBorderColor,
        })), (p.pointing && {
            pointerEvents: 'all',
        })));
    },
};
