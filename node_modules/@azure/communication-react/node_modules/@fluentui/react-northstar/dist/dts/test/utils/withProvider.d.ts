import { Telemetry } from '@fluentui/react-bindings';
import { Renderer } from '@fluentui/react-northstar-styles-renderer';
import { ThemePrepared } from '@fluentui/styles';
import { MountRendererProps, ComponentType } from 'enzyme';
import * as React from 'react';
export declare const EmptyThemeProvider: React.FunctionComponent<{
    disableAnimations?: boolean;
    telemetry?: Telemetry;
    renderer?: Renderer;
    theme?: ThemePrepared;
    rtl?: boolean;
}>;
/**
 * Creates a dummy container to be passed as an `attachTo` option into enzyme's `mount` function.
 * Enables actual JSDOM introspection.
 * Make sure you call `removeTestContainer` at the end of your test to clean up after yourself.
 */
export declare function createTestContainer(): {
    testContainer: HTMLDivElement;
    removeTestContainer: () => void;
};
export declare const mountWithProvider: <C extends React.Component<{}, {}, any>, P = C["props"], S = C["state"]>(node: React.ReactElement<P, string | React.JSXElementConstructor<any>>, options?: MountRendererProps) => import("enzyme").ReactWrapper<P, Readonly<{}>, React.Component<{}, {}, any>>;
export declare const mountWithProviderAndGetComponent: <C extends React.Component<{}, {}, any>, P = C["props"], S = C["state"]>(Component: ComponentType<P>, elementToMount: React.ReactElement<P, string | React.JSXElementConstructor<any>>, options?: MountRendererProps) => import("enzyme").ReactWrapper<P, any, React.Component<{}, {}, any>>;
