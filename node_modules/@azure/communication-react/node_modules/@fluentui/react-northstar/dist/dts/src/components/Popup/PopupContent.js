"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PopupContent = exports.popupContentSlotClassNames = exports.popupContentClassName = void 0;
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var classnames_1 = require("classnames");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var positioner_1 = require("../../utils/positioner");
exports.popupContentClassName = 'ui-popup__content';
exports.popupContentSlotClassNames = {
    content: exports.popupContentClassName + "__content",
};
/**
 * A PopupContent displays the content of a Popup component.
 */
exports.PopupContent = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.PopupContent.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, autoFocus = props.autoFocus, children = props.children, className = props.className, content = props.content, design = props.design, placement = props.placement, pointing = props.pointing, pointerRef = props.pointerRef, styles = props.styles, trapFocus = props.trapFocus, variables = props.variables, autoSize = props.autoSize;
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.PopupContent.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.PopupContent.displayName, {
        className: exports.popupContentClassName,
        mapPropsToStyles: function () { return ({
            basePlacement: positioner_1.getBasePlacement(placement, context.rtl),
            pointing: pointing,
            autoSize: autoSize,
        }); },
        mapPropsToInlineStyles: function () { return ({ className: className, design: design, styles: styles, variables: variables }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.PopupContent.handledProps, props);
    var handleMouseEnter = function (e) {
        _.invoke(props, 'onMouseEnter', e, props);
    };
    var handleMouseLeave = function (e) {
        _.invoke(props, 'onMouseLeave', e, props);
    };
    var popupContentProps = getA11yProps('root', __assign(__assign(__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] })), unhandledProps), { onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave }));
    var popupContent = (React.createElement(React.Fragment, null,
        pointing && React.createElement("div", { className: classes.pointer, ref: pointerRef }),
        React.createElement("div", { className: classnames_1.default(exports.popupContentSlotClassNames.content, classes.content) }, utils_1.childrenExist(children) ? children : content)));
    var element;
    if (trapFocus) {
        var focusTrapZoneProps = __assign(__assign(__assign({}, popupContentProps), (_.keys(trapFocus).length && trapFocus)), { as: ElementType });
        element = (React.createElement(react_bindings_1.FocusTrapZone, __assign({ innerRef: ref }, focusTrapZoneProps), popupContent));
    }
    else if (autoFocus) {
        var autoFocusZoneProps = __assign(__assign(__assign({}, popupContentProps), (_.keys(autoFocus).length && autoFocus)), { as: ElementType });
        element = (React.createElement(react_bindings_1.AutoFocusZone, __assign({ innerRef: ref }, autoFocusZoneProps), popupContent));
    }
    else {
        element = (React.createElement(ElementType, __assign({ ref: ref }, popupContentProps), popupContent));
    }
    setEnd();
    return element;
});
exports.PopupContent.displayName = 'PopupContent';
exports.PopupContent.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon()), { placement: PropTypes.oneOf([
        'auto-start',
        'auto',
        'auto-end',
        'top-start',
        'top',
        'top-end',
        'right-start',
        'right',
        'right-end',
        'bottom-end',
        'bottom',
        'bottom-start',
        'left-end',
        'left',
        'left-start',
    ]), pointing: PropTypes.bool, onMouseEnter: PropTypes.func, onMouseLeave: PropTypes.func, pointerRef: customPropTypes.ref, trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]), autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]), autoSize: PropTypes.oneOf(positioner_1.AUTOSIZES) });
exports.PopupContent.handledProps = Object.keys(exports.PopupContent.propTypes);
exports.PopupContent.create = utils_1.createShorthandFactory({ Component: exports.PopupContent, mappedProp: 'content' });
