"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reaction = exports.reactionSlotClassNames = exports.reactionClassName = void 0;
var customPropTypes = require("@fluentui/react-proptypes");
var React = require("react");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var ReactionGroup_1 = require("./ReactionGroup");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.reactionClassName = 'ui-reaction';
exports.reactionSlotClassNames = {
    icon: exports.reactionClassName + "__icon",
    content: exports.reactionClassName + "__content",
};
/**
 * A Reaction indicates user's emotion or perception.
 * Used to display user's reaction for entity in Chat (e.g. message).
 */
exports.Reaction = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.Reaction.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, icon = props.icon, content = props.content, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Reaction.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.Reaction.displayName,
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(exports.Reaction.displayName, {
        className: exports.reactionClassName,
        mapPropsToStyles: function () { return ({
            hasContent: !!content,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var element = (React.createElement(ElementType, __assign({}, getA11yProps('root', __assign({ className: classes.root, ref: ref }, unhandledProps)), utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), utils_1.childrenExist(children) ? (children) : (React.createElement(React.Fragment, null,
        Box_1.Box.create(icon, {
            defaultProps: function () {
                return getA11yProps('icon', {
                    className: exports.reactionSlotClassNames.icon,
                    styles: resolvedStyles.icon,
                });
            },
        }),
        Box_1.Box.create(content, {
            defaultProps: function () {
                return getA11yProps('content', {
                    className: exports.reactionSlotClassNames.content,
                    styles: resolvedStyles.content,
                });
            },
        })))));
    setEnd();
    return element;
});
exports.Reaction.displayName = 'Reaction';
exports.Reaction.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon({
    content: 'shorthand',
})), { icon: customPropTypes.shorthandAllowingChildren });
exports.Reaction.defaultProps = {
    as: 'span',
};
exports.Reaction.handledProps = Object.keys(exports.Reaction.propTypes);
exports.Reaction.Group = ReactionGroup_1.ReactionGroup;
exports.Reaction.create = utils_1.createShorthandFactory({ Component: exports.Reaction, mappedProp: 'content' });
