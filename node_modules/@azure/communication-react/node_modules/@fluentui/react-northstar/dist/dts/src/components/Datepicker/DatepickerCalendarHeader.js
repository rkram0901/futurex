"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatepickerCalendarHeader = exports.datepickerCalendarHeaderClassName = void 0;
var _ = require("lodash");
var React = require("react");
var accessibility_1 = require("@fluentui/accessibility");
var date_time_utilities_1 = require("../../utils/date-time-utilities");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var utils_1 = require("../../utils");
var DatepickerCalendarHeaderAction_1 = require("./DatepickerCalendarHeaderAction");
var Text_1 = require("../Text/Text");
exports.datepickerCalendarHeaderClassName = 'ui-datepicker__calendarheader';
/**
 * A DatepickerCalendarHeader is used to display header block above calendar grid.
 */
exports.DatepickerCalendarHeader = React.forwardRef(function (props, ref) {
    var context = react_bindings_1.useFluentContext();
    var _a = react_bindings_1.useTelemetry(exports.DatepickerCalendarHeader.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var className = props.className, design = props.design, styles = props.styles, variables = props.variables, label = props.label, nextButton = props.nextButton, previousButton = props.previousButton, onPreviousClick = props.onPreviousClick, onNextClick = props.onNextClick;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.DatepickerCalendarHeader.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.DatepickerCalendarHeader.displayName,
        actionHandlers: {},
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.DatepickerCalendarHeader.displayName, {
        className: exports.datepickerCalendarHeaderClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var element = (React.createElement(ElementType, __assign({}, getA11yProps('root', __assign({ className: classes.root, ref: ref }, unhandledProps))),
        utils_1.createShorthand(Text_1.Text, label, {
            defaultProps: function () {
                return getA11yProps('label', {
                    className: classes.label,
                });
            },
        }),
        utils_1.createShorthand(DatepickerCalendarHeaderAction_1.DatepickerCalendarHeaderAction, previousButton, {
            defaultProps: function () {
                return getA11yProps('previousButton', {
                    title: props.prevMonthAriaLabel,
                    direction: 'previous',
                    'aria-disabled': props.disabledPreviousButton,
                    disabledNavigatableButton: props.disabledPreviousButton,
                });
            },
            overrideProps: function (predefinedProps) { return ({
                onClick: function (e, data) {
                    if (!props.disabledPreviousButton) {
                        onPreviousClick(e, data);
                        _.invoke(predefinedProps, 'onClick', e, data);
                    }
                },
            }); },
        }),
        utils_1.createShorthand(DatepickerCalendarHeaderAction_1.DatepickerCalendarHeaderAction, nextButton, {
            defaultProps: function () {
                return getA11yProps('nextButton', {
                    title: props.nextMonthAriaLabel,
                    direction: 'next',
                    'aria-disabled': props.disabledNextButton,
                    disabledNavigatableButton: props.disabledNextButton,
                });
            },
            overrideProps: function (predefinedProps) { return ({
                onClick: function (e, data) {
                    if (!props.disabledNextButton) {
                        onNextClick(e, data);
                        _.invoke(predefinedProps, 'onClick', e, data);
                    }
                },
            }); },
        })));
    setEnd();
    return element;
});
exports.DatepickerCalendarHeader.displayName = 'DatepickerCalendarHeader';
exports.DatepickerCalendarHeader.propTypes = __assign(__assign({}, utils_1.commonPropTypes.createCommon()), { label: customPropTypes.itemShorthand, nextButton: customPropTypes.itemShorthand, previousButton: customPropTypes.itemShorthand, onPreviousClick: PropTypes.func, onNextClick: PropTypes.func, disabledNextButton: PropTypes.bool, disabledPreviousButton: PropTypes.bool, prevMonthAriaLabel: PropTypes.string, nextMonthAriaLabel: PropTypes.string });
exports.DatepickerCalendarHeader.defaultProps = {
    accessibility: accessibility_1.datepickerCalendarHeaderBehavior,
    nextButton: {},
    previousButton: {},
    label: {},
    prevMonthAriaLabel: date_time_utilities_1.DEFAULT_CALENDAR_STRINGS.prevMonthAriaLabel,
    nextMonthAriaLabel: date_time_utilities_1.DEFAULT_CALENDAR_STRINGS.nextMonthAriaLabel,
};
exports.DatepickerCalendarHeader.handledProps = Object.keys(exports.DatepickerCalendarHeader.propTypes);
exports.DatepickerCalendarHeader.create = utils_1.createShorthandFactory({ Component: exports.DatepickerCalendarHeader });
