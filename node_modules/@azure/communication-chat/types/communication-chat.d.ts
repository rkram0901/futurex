/// <reference lib="esnext.asynciterable" />

import { ChatMessageDeletedEvent } from '@azure/communication-signaling';
import { ChatMessageEditedEvent } from '@azure/communication-signaling';
import { ChatMessageReceivedEvent } from '@azure/communication-signaling';
import { ChatThreadCreatedEvent } from '@azure/communication-signaling';
import { ChatThreadDeletedEvent } from '@azure/communication-signaling';
import { ChatThreadPropertiesUpdatedEvent } from '@azure/communication-signaling';
import { CommonClientOptions } from '@azure/core-client';
import { CommunicationIdentifier } from '@azure/communication-common';
import { CommunicationIdentifierKind } from '@azure/communication-common';
import { CommunicationTokenCredential } from '@azure/communication-common';
import * as coreClient from '@azure/core-client';
import { OperationOptions } from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { ParticipantsAddedEvent } from '@azure/communication-signaling';
import { ParticipantsRemovedEvent } from '@azure/communication-signaling';
import { ReadReceiptReceivedEvent } from '@azure/communication-signaling';
import { TypingIndicatorReceivedEvent } from '@azure/communication-signaling';

/** Result of the add chat participants operation. */
export declare interface AddChatParticipantsResult {
    /**
     * The participants that failed to be added to the chat thread.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invalidParticipants?: ChatError[];
}

/**
 * Options to add a chat participant.
 */
export declare type AddParticipantsOptions = OperationOptions;

/** Participants to be added to the thread. */
export declare interface AddParticipantsRequest {
    /** Participants to add to a chat thread. */
    participants: ChatParticipant[];
}

/**
 * The client to do chat operations
 */
export declare class ChatClient {
    private readonly endpoint;
    private readonly tokenCredential;
    private readonly clientOptions;
    private readonly client;
    private readonly signalingClient;
    private readonly emitter;
    private isRealtimeNotificationsStarted;
    /**
     * Creates an instance of the ChatClient for a given resource and user.
     *
     * @param endpoint - The url of the Communication Services resource.
     * @param credential - The token credential. Use AzureCommunicationTokenCredential from \@azure/communication-common to create a credential.
     * @param options - Additional client options.
     */
    constructor(endpoint: string, credential: CommunicationTokenCredential, options?: ChatClientOptions);
    /**
     * Returns ChatThreadClient with the specific thread id.
     * @param threadId - Thread ID for the ChatThreadClient
     */
    getChatThreadClient(threadId: string): ChatThreadClient;
    /**
     * Creates a chat thread.
     * Returns thread client with the id of the created thread.
     * @param request - Request for creating a chat thread.
     * @param options - Operation options.
     */
    createChatThread(request: CreateChatThreadRequest, options?: CreateChatThreadOptions): Promise<CreateChatThreadResult>;
    private listChatThreadsPage;
    private listChatThreadsAll;
    /**
     * Gets the list of chat threads of a user.
     * @param options - List chat threads options.
     */
    listChatThreads(options?: ListChatThreadsOptions): PagedAsyncIterableIterator<ChatThreadItem>;
    /**
     * Deletes a chat thread.
     * @param threadId - The ID of the thread to delete.
     * @param options -  Operation options.
     */
    deleteChatThread(threadId: string, options?: DeleteChatThreadOptions): Promise<void>;
    /**
     * Start receiving realtime notifications.
     * Call this function before subscribing to any event.
     */
    startRealtimeNotifications(): Promise<void>;
    /**
     * Stop receiving realtime notifications.
     * This function would unsubscribe to all events.
     */
    stopRealtimeNotifications(): Promise<void>;
    /**
     * Subscribe function for chatMessageReceived.
     * The initial sender will also receive this event.
     * You need to call startRealtimeNotifications before subscribing to any event.
     * @param event - The ChatMessageReceivedEvent.
     * @param listener - The listener to handle the event.
     */
    on(event: "chatMessageReceived", listener: (e: ChatMessageReceivedEvent) => void): void;
    /**
     * Subscribe function for chatMessageEdited.
     * The initial sender will also receive this event.
     * @param event - The ChatMessageEditedEvent.
     * @param listener - The listener to handle the event.
     */
    on(event: "chatMessageEdited", listener: (e: ChatMessageEditedEvent) => void): void;
    /**
     * Subscribe function for chatMessageDeleted.
     * The initial sender will also receive this event.
     * @param event - The ChatMessageDeletedEvent.
     * @param listener - The listener to handle the event.
     */
    on(event: "chatMessageDeleted", listener: (e: ChatMessageDeletedEvent) => void): void;
    /**
     * Subscribe function for typingIndicatorReceived.
     * The initial sender will also receive this event.
     * @param event - The TypingIndicatorReceivedEvent.
     * @param listener - The listener to handle the event.
     */
    on(event: "typingIndicatorReceived", listener: (e: TypingIndicatorReceivedEvent) => void): void;
    /**
     * Subscribe function for readReceiptReceived.
     * @param event - The ReadReceiptReceivedEvent.
     * @param listener - The listener to handle the event.
     */
    on(event: "readReceiptReceived", listener: (e: ReadReceiptReceivedEvent) => void): void;
    /**
     * Subscribe function for chatThreadCreated.
     * @param event - The ChatThreadCreatedEvent.
     * @param listener - The listener to handle the event.
     */
    on(event: "chatThreadCreated", listener: (e: ChatThreadCreatedEvent) => void): void;
    /**
     * Subscribe function for chatThreadDeleted.
     * @param event - The ChatThreadDeletedEvent.
     * @param listener - The listener to handle the event.
     */
    on(event: "chatThreadDeleted", listener: (e: ChatThreadDeletedEvent) => void): void;
    /**
     * Subscribe function for chatThreadPropertiesUpdated.
     * @param event - The ChatThreadPropertiesUpdatedEvent.
     * @param listener - The listener to handle the event.
     */
    on(event: "chatThreadPropertiesUpdated", listener: (e: ChatThreadPropertiesUpdatedEvent) => void): void;
    /**
     * Subscribe function for participantsAdded.
     * @param event - The ParticipantsAddedEvent.
     * @param listener - The listener to handle the event.
     */
    on(event: "participantsAdded", listener: (e: ParticipantsAddedEvent) => void): void;
    /**
     * Subscribe function for participantsRemoved.
     * @param event - The ParticipantsRemovedEvent.
     * @param listener - The listener to handle the event.
     */
    on(event: "participantsRemoved", listener: (e: ParticipantsRemovedEvent) => void): void;
    /**
     * Subscribe function for realTimeNotificationConnected.
     * @param event - The realTimeNotificationConnected Event
     * @param listener - The listener to handle the event.
     */
    on(event: "realTimeNotificationConnected", listener: () => void): void;
    /**
     * Subscribe function for realTimeNotificationDisconnected.
     * @param event - The realTimeNotificationDisconnected Event
     * @param listener - The listener to handle the event.
     */
    on(event: "realTimeNotificationDisconnected", listener: () => void): void;
    /**
     * Unsubscribe from chatMessageReceived.
     * @param event - The ChatMessageReceivedEvent.
     * @param listener - The listener to handle the event.
     */
    off(event: "chatMessageReceived", listener: (e: ChatMessageReceivedEvent) => void): void;
    /**
     * Unsubscribe from chatMessageEdited.
     * @param event - The ChatMessageEditedEvent.
     * @param listener - The listener to handle the event.
     */
    off(event: "chatMessageEdited", listener: (e: ChatMessageEditedEvent) => void): void;
    /**
     * Unsubscribe from chatMessageDeleted.
     * @param event - The ChatMessageDeletedEvent.
     * @param listener - The listener to handle the event.
     */
    off(event: "chatMessageDeleted", listener: (e: ChatMessageDeletedEvent) => void): void;
    /**
     * Unsubscribe from typingIndicatorReceived.
     * @param event - The TypingIndicatorReceivedEvent.
     * @param listener - The listener to handle the event.
     */
    off(event: "typingIndicatorReceived", listener: (e: TypingIndicatorReceivedEvent) => void): void;
    /**
     * Unsubscribe from readReceiptReceived.
     * @param event - The ReadReceiptReceivedEvent.
     * @param listener - The listener to handle the event.
     */
    off(event: "readReceiptReceived", listener: (e: ReadReceiptReceivedEvent) => void): void;
    /**
     *  Unsubscribe from chatThreadCreated.
     * @param event - The ChatThreadCreatedEvent.
     * @param listener - The listener to handle the event.
     */
    off(event: "chatThreadCreated", listener: (e: ChatThreadCreatedEvent) => void): void;
    /**
     *  Unsubscribe from chatThreadDeleted.
     * @param event - The ChatThreadDeletedEvent.
     * @param listener - The listener to handle the event.
     */
    off(event: "chatThreadDeleted", listener: (e: ChatThreadDeletedEvent) => void): void;
    /**
     * Unsubscribe from chatThreadPropertiesUpdated.
     * @param event - The ChatThreadPropertiesUpdatedEvent.
     * @param listener - The listener to handle the event.
     */
    off(event: "chatThreadPropertiesUpdated", listener: (e: ChatThreadPropertiesUpdatedEvent) => void): void;
    /**
     * Unsubscribe from participantsAdded.
     * @param event - The ParticipantsAddedEvent.
     * @param listener - The listener to handle the event.
     */
    off(event: "participantsAdded", listener: (e: ParticipantsAddedEvent) => void): void;
    /**
     * Unsubscribe from participantsRemoved.
     * @param event - The ParticipantsRemovedEvent.
     * @param listener - The listener to handle the event.
     */
    off(event: "participantsRemoved", listener: (e: ParticipantsRemovedEvent) => void): void;
    private subscribeToSignalingEvents;
}

/**
 * Options to create chat client.
 */
export declare interface ChatClientOptions extends CommonClientOptions {
}

/** The Communication Services error. */
export declare interface ChatError {
    /** The error code. */
    code: string;
    /** The error message. */
    message: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * Further details about specific errors that led to this error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ChatError[];
    /**
     * The inner error if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly innerError?: ChatError;
}

export declare type ChatEventId = "chatMessageReceived" | "chatMessageEdited" | "chatMessageDeleted" | "typingIndicatorReceived" | "readReceiptReceived" | "chatThreadCreated" | "chatThreadDeleted" | "chatThreadPropertiesUpdated" | "participantsAdded" | "participantsRemoved" | "realTimeNotificationConnected" | "realTimeNotificationDisconnected";

/** Chat message. */
export declare interface ChatMessage {
    /** The id of the chat message. This id is server generated. */
    id: string;
    /** The chat message type. */
    type: ChatMessageType;
    /** Sequence of the chat message in the conversation. */
    sequenceId: string;
    /** Version of the chat message. */
    version: string;
    /** Content of a chat message. */
    content?: ChatMessageContent;
    /** The display name of the chat message sender. This property is used to populate sender name for push notifications. */
    senderDisplayName?: string;
    /** The timestamp when the chat message arrived at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    createdOn: Date;
    /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */
    sender?: CommunicationIdentifierKind;
    /** The timestamp (if applicable) when the message was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    deletedOn?: Date;
    /** The last timestamp (if applicable) when the message was edited. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    editedOn?: Date;
    /** metadata */
    metadata?: Record<string, string>;
}

/** Content of a chat message. */
export declare interface ChatMessageContent {
    /** Chat message content for messages of types text or html. */
    message?: string;
    /** Chat message content for messages of type topicUpdated. */
    topic?: string;
    /** Chat message content for messages of types participantAdded or participantRemoved. */
    participants?: ChatParticipant[];
    /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */
    initiator?: CommunicationIdentifierKind;
}

export { ChatMessageDeletedEvent }

export { ChatMessageEditedEvent }

/** A chat message read receipt indicates the time a chat message was read by a recipient. */
export declare interface ChatMessageReadReceipt {
    /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */
    sender: CommunicationIdentifierKind;
    /** Id of the chat message that has been read. This id is generated by the server. */
    chatMessageId: string;
    /** The time at which the message was read. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    readOn: Date;
}

export { ChatMessageReceivedEvent }

/** Defines values for ChatMessageType. */
export declare type ChatMessageType = "text" | "html" | "topicUpdated" | "participantAdded" | "participantRemoved";

/** A participant of the chat thread. */
export declare interface ChatParticipant {
    /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */
    id: CommunicationIdentifier;
    /** Display name for the chat participant. */
    displayName?: string;
    /** Time from which the chat history is shared with the participant. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    shareHistoryTime?: Date;
}

/**
 * The client to do chat operations
 */
export declare class ChatThreadClient {
    private readonly endpoint;
    /**
     * Thread ID of the ChatThreadClient
     */
    readonly threadId: string;
    private readonly tokenCredential;
    private readonly client;
    private timeOfLastTypingRequest;
    constructor(endpoint: string, threadId: string, credential: CommunicationTokenCredential, options?: ChatThreadClientOptions);
    /**
     * Gets a chat thread.
     * Returns the chat thread.
     * @param options -  Operation options.
     */
    getProperties(options?: GetPropertiesOptions): Promise<ChatThreadProperties>;
    /**
     * Updates a thread's topic.
     * @param topic - The topic needs to be updated to.
     * @param options - Operation options.
     */
    updateTopic(topic: string, options?: UpdateTopicOptions): Promise<void>;
    /**
     * Sends a chat message to a thread identified by threadId.
     * Returns the id of the created message.
     * @param request - Request for sending a message.
     * @param options - Operation options.
     */
    sendMessage(request: SendMessageRequest, options?: SendMessageOptions): Promise<SendChatMessageResult>;
    /**
     * Gets a chat message identified by messageId.
     * Returns the specific message.
     * @param messageId - The message id of the message.
     * @param options - Operation options.
     */
    getMessage(messageId: string, options?: GetMessageOptions): Promise<ChatMessage>;
    private listMessagesPage;
    private listMessagesAll;
    /**
     * Gets a list of message from a thread identified by threadId.
     * Returns the list of the messages.
     * @param options - Get messages options.
     */
    listMessages(options?: ListMessagesOptions): PagedAsyncIterableIterator<ChatMessage>;
    /**
     * Deletes a message identified by threadId and messageId
     * @param messageId - The message id of the message.
     * @param options - Operation options.
     */
    deleteMessage(messageId: string, options?: DeleteMessageOptions): Promise<void>;
    /**
     * Updates a message identified by threadId and messageId
     * @param messageId - The message id of the message.
     * @param options - Operation options.
     */
    updateMessage(messageId: string, options?: UpdateMessageOptions): Promise<void>;
    /**
     * Adds the details of chat participants belonging to the thread identified by threadId.
     * @param request - Thread participants' details to add in the thread roster
     * @param options - Operation options.
     */
    addParticipants(request: AddParticipantsRequest, options?: AddParticipantsOptions): Promise<AddChatParticipantsResult>;
    private listParticipantsPage;
    private listParticipantsAll;
    /**
     * Gets the participants of the thread identified by threadId.
     * Returns the lists of the participants.
     * @param options - Operation options.
     */
    listParticipants(options?: ListParticipantsOptions): PagedAsyncIterableIterator<ChatParticipant>;
    /**
     * Removes participant from the thread identified by threadId.
     * @param participant - Thread participant to remove from the thread roster
     * @param options - Operation options.
     */
    removeParticipant(participant: CommunicationIdentifier, options?: RemoveParticipantOptions): Promise<void>;
    /**
     * Sends a typing notification to the thread.
     * Doesn't attempt to send if the time since last notification is smaller than the minimum typing interval
     * @param options - - Operation options
     * @returns True if the typing message notification could be sent, otherwise false.
     */
    sendTypingNotification(options?: SendTypingNotificationOptions): Promise<boolean>;
    /**
     * Sends a read receipt to the thread identified by threadId.
     * @param messageId - The message id of the message that user latest read.
     * @param request - Request for sending a read receipt
     * @param options - Operation options.
     */
    sendReadReceipt(request: SendReadReceiptRequest, options?: SendReadReceiptOptions): Promise<void>;
    private listReadReceiptsPage;
    private listReadReceiptsAll;
    /**
     * Gets a list of read receipt from a thread identified by threadId.
     * Returns the list of the messages.
     * @param options - Get messages options.
     */
    listReadReceipts(options?: ListReadReceiptsOptions): PagedAsyncIterableIterator<ChatMessageReadReceipt>;
    private canPostTypingNotification;
}

/**
 * Options to create chat thread client.
 */
export declare interface ChatThreadClientOptions extends ChatClientOptions {
}

export { ChatThreadCreatedEvent }

export { ChatThreadDeletedEvent }

/** Summary information of a chat thread. */
export declare interface ChatThreadItem {
    /** Chat thread id. */
    id: string;
    /** Chat thread topic. */
    topic: string;
    /** The timestamp when the chat thread was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    deletedOn?: Date;
    /**
     * The timestamp when the last message arrived at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastMessageReceivedOn?: Date;
}

/** Chat thread. */
export declare interface ChatThreadProperties {
    /** Chat thread id. */
    id: string;
    /** Chat thread topic. */
    topic: string;
    /** The timestamp when the chat thread was created. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    createdOn: Date;
    /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */
    readonly createdBy?: CommunicationIdentifierKind;
    /** The timestamp when the chat thread was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    deletedOn?: Date;
}

export { ChatThreadPropertiesUpdatedEvent }

/**
 * Options to create a chat thread.
 */
export declare interface CreateChatThreadOptions extends OperationOptions {
    /** Participants to be added to the chat thread. */
    participants?: ChatParticipant[];
    /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Idempotency-Token and get back an appropriate response without the server executing the request multiple times. The value of the Idempotency-Token is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. */
    idempotencyToken?: string;
}

/** Request payload for creating a chat thread. */
export declare interface CreateChatThreadRequest {
    /** The chat thread topic. */
    topic: string;
}

/** Result of the create chat thread operation. */
export declare interface CreateChatThreadResult {
    /** Chat thread. */
    chatThread?: ChatThreadProperties;
    /**
     * The participants that failed to be added to the chat thread.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invalidParticipants?: ChatError[];
}

/**
 * Options to delete a chat thread.
 */
export declare type DeleteChatThreadOptions = OperationOptions;

/**
 * Options to delete a chat message.
 */
export declare type DeleteMessageOptions = OperationOptions;

/**
 * Options to get a chat message.
 */
export declare type GetMessageOptions = OperationOptions;

/**
 * Options to get a chat thread.
 */
export declare type GetPropertiesOptions = OperationOptions;

/**
 * Options to get chat threads.
 */
export declare type ListChatThreadsOptions = RestListChatThreadsOptions;

/**
 * Options to list chat messages.
 */
export declare type ListMessagesOptions = RestListMessagesOptions;

/**
 * Arguments for retrieving the next page of search results.
 */
export declare interface ListPageSettings {
    /**
     * A token used for retrieving the next page of results when the server
     * enforces pagination.
     */
    continuationToken?: string;
}

/**
 * Options to list chat participants.
 */
export declare type ListParticipantsOptions = RestListParticipantsOptions;

/**
 * Options to list read receipts.
 */
export declare type ListReadReceiptsOptions = RestListReadReceiptsOptions;

export { ParticipantsAddedEvent }

export { ParticipantsRemovedEvent }

export { ReadReceiptReceivedEvent }

/**
 * Options to remove a chat participant.
 */
export declare type RemoveParticipantOptions = OperationOptions;

/** Optional parameters. */
export declare interface RestListChatThreadsOptions extends coreClient.OperationOptions {
    /** The maximum number of chat threads returned per page. */
    maxPageSize?: number;
    /** The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    startTime?: Date;
}

/** Optional parameters. */
export declare interface RestListMessagesOptions extends coreClient.OperationOptions {
    /** The maximum number of messages to be returned per page. The limit can be found from https://docs.microsoft.com/en-us/azure/communication-services/concepts/service-limits.*/
    maxPageSize?: number;
    /** The earliest point in time to get messages up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    startTime?: Date;
}

/** Optional parameters. */
export declare interface RestListParticipantsOptions extends coreClient.OperationOptions {
    /** The maximum number of participants to be returned per page. */
    maxPageSize?: number;
    /** Skips participants up to a specified position in response. */
    skip?: number;
}

/** Optional parameters. */
export declare interface RestListReadReceiptsOptions extends coreClient.OperationOptions {
    /** The maximum number of chat message read receipts to be returned per page. */
    maxPageSize?: number;
    /** Skips chat message read receipts up to a specified position in response. */
    skip?: number;
}

/** Result of the send message operation. */
export declare interface SendChatMessageResult {
    /** A server-generated message id. */
    id: string;
}

/**
 * Options to send a chat message.
 */
export declare interface SendMessageOptions extends OperationOptions {
    /** The display name of the chat message sender. This property is used to populate sender name for push notifications. */
    senderDisplayName?: string;
    /** The chat message type. */
    type?: ChatMessageType;
    /** Message metadata. */
    metadata?: Record<string, string>;
}

/** Details of the message to send. */
export declare interface SendMessageRequest {
    /** Chat message content. */
    content: string;
}

/**
 * Options to send read receipt.
 */
export declare type SendReadReceiptOptions = OperationOptions;

/** Request payload for sending a read receipt. */
export declare interface SendReadReceiptRequest {
    /** Id of the latest chat message read by the user. */
    chatMessageId: string;
}

/**
 * Options to send typing notifications.
 */
export declare interface SendTypingNotificationOptions extends OperationOptions {
    /** The display name of the typing notification sender. This property is used to populate sender name for push notifications. */
    senderDisplayName?: string;
}

export { TypingIndicatorReceivedEvent }

/**
 * Options to update a chat message.
 */
export declare interface UpdateMessageOptions extends OperationOptions {
    /** Chat message content. */
    content?: string;
    /** Message metadata. */
    metadata?: Record<string, string>;
}

/**
 * Options to update a chat thread.
 */
export declare interface UpdateTopicOptions extends OperationOptions {
}

export { }
