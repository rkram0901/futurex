{"ast":null,"code":"import { keyboardKey, SpacebarKey, EnterKey } from '../../keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { treeTitleBehavior } from './treeTitleBehavior';\n/**\n * @description\n * Triggers 'performClick' action with 'Spacebar' on 'root', when tree item is selectable and has no subtree. In other cases 'performClick' is triggered with 'Spacebar' or 'Enter'.\n * Triggers 'performSelection' action with 'Spacebar' on 'root', when has a opened subtree.\n * Adds attribute 'aria-checked=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property true. Does not set anything if false or undefined.\n *\n * @specification\n * Adds attribute 'aria-expanded=true' based on the property 'expanded' if the component has 'hasSubtree' property.\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'expandSiblings' action with '*' on 'root'.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has no subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\n\nexport var treeItemBehavior = function treeItemBehavior(props) {\n  var _Object$assign;\n  var definition = {\n    attributes: {\n      root: Object.assign({\n        role: 'none'\n      }, props.hasSubtree && Object.assign((_Object$assign = {\n        'aria-expanded': props.expanded,\n        tabIndex: -1\n      }, _Object$assign[IS_FOCUSABLE_ATTRIBUTE] = true, _Object$assign.role = 'treeitem', _Object$assign['aria-setsize'] = props.treeSize, _Object$assign['aria-posinset'] = props.index, _Object$assign['aria-level'] = props.level, _Object$assign), props.selectable && {\n        'aria-checked': props.indeterminate ? 'mixed' : !!props.selected\n      }))\n    },\n    keyActions: {\n      root: Object.assign({\n        performClick: {\n          keyCombinations: [{\n            keyCode: EnterKey\n          }, {\n            keyCode: SpacebarKey\n          }]\n        }\n      }, props.hasSubtree ? props.expanded ? {\n        collapse: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        },\n        focusFirstChild: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }]\n        }\n      } : {\n        expand: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }]\n        },\n        focusParent: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        }\n      } : {\n        focusParent: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        }\n      }, {\n        expandSiblings: {\n          keyCombinations: [{\n            keyCode: keyboardKey['*']\n          }]\n        }\n      }, props.selectable && {\n        performClick: {\n          keyCombinations: props.hasSubtree ? [{\n            keyCode: keyboardKey.Enter\n          }] : [{\n            keyCode: SpacebarKey\n          }]\n        },\n        performSelection: {\n          keyCombinations: [{\n            keyCode: SpacebarKey\n          }]\n        }\n      })\n    },\n    childBehaviors: {\n      title: treeTitleBehavior\n    }\n  };\n  if (process.env.NODE_ENV !== 'production' && !props.hasSubtree) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'SingleTreeItem';\n  }\n  return definition;\n};","map":{"version":3,"names":["keyboardKey","SpacebarKey","EnterKey","IS_FOCUSABLE_ATTRIBUTE","treeTitleBehavior","treeItemBehavior","props","_Object$assign","definition","attributes","root","Object","assign","role","hasSubtree","expanded","tabIndex","treeSize","index","level","selectable","indeterminate","selected","keyActions","performClick","keyCombinations","keyCode","collapse","ArrowLeft","focusFirstChild","ArrowRight","expand","focusParent","expandSiblings","Enter","performSelection","childBehaviors","title","process","env","NODE_ENV"],"sources":["C:\\Users\\Administrator\\frontendapp\\communicationapp\\node_modules\\@fluentui\\accessibility\\dist\\es\\behaviors\\Tree\\behaviors\\Tree\\treeItemBehavior.ts"],"sourcesContent":["import { keyboardKey, SpacebarKey, EnterKey } from '../../keyboard-key';\nimport { Accessibility, AriaRole } from '../../types';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { treeTitleBehavior } from './treeTitleBehavior';\n\n/**\n * @description\n * Triggers 'performClick' action with 'Spacebar' on 'root', when tree item is selectable and has no subtree. In other cases 'performClick' is triggered with 'Spacebar' or 'Enter'.\n * Triggers 'performSelection' action with 'Spacebar' on 'root', when has a opened subtree.\n * Adds attribute 'aria-checked=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property true. Does not set anything if false or undefined.\n *\n * @specification\n * Adds attribute 'aria-expanded=true' based on the property 'expanded' if the component has 'hasSubtree' property.\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'expandSiblings' action with '*' on 'root'.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has no subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nexport const treeItemBehavior: Accessibility<TreeItemBehaviorProps> = props => {\n  const definition = {\n    attributes: {\n      root: {\n        role: 'none',\n        ...(props.hasSubtree && {\n          'aria-expanded': props.expanded,\n          tabIndex: -1,\n          [IS_FOCUSABLE_ATTRIBUTE]: true,\n          role: 'treeitem' as AriaRole,\n          'aria-setsize': props.treeSize,\n          'aria-posinset': props.index,\n          'aria-level': props.level,\n          ...(props.selectable && {\n            'aria-checked': props.indeterminate ? ('mixed' as const) : !!props.selected,\n          }),\n        }),\n      },\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{ keyCode: EnterKey }, { keyCode: SpacebarKey }],\n        },\n        ...(props.hasSubtree\n          ? props.expanded\n            ? {\n                collapse: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n                },\n                focusFirstChild: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n                },\n              }\n            : {\n                expand: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n                },\n                focusParent: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n                },\n              }\n          : {\n              focusParent: {\n                keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n              },\n            }),\n        expandSiblings: {\n          keyCombinations: [{ keyCode: keyboardKey['*'] }],\n        },\n        ...(props.selectable && {\n          performClick: {\n            keyCombinations: props.hasSubtree ? [{ keyCode: keyboardKey.Enter }] : [{ keyCode: SpacebarKey }],\n          },\n          performSelection: {\n            keyCombinations: [{ keyCode: SpacebarKey }],\n          },\n        }),\n      },\n    },\n    childBehaviors: {\n      title: treeTitleBehavior,\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production' && !props.hasSubtree) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'SingleTreeItem';\n  }\n\n  return definition;\n};\n\nexport type TreeItemBehaviorProps = {\n  /** If item is a subtree, it indicates if it's expanded. */\n  expanded?: boolean;\n  level?: number;\n  index?: number;\n  hasSubtree?: boolean;\n  treeSize?: number;\n  selectable?: boolean;\n  selected?: boolean;\n  indeterminate?: boolean;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}