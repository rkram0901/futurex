{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nvar getClassNames = classNamesFunction();\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nvar MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\nvar NO_COLUMNS = [];\nvar DetailsHeaderBase = /** @class */function (_super) {\n  __extends(DetailsHeaderBase, _super);\n  function DetailsHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._rootElement = React.createRef();\n    _this._rootComponent = React.createRef();\n    _this._draggedColumnIndex = -1;\n    _this._dropHintDetails = {};\n    _this._updateDroppingState = function (newValue, event) {\n      if (_this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n        _this._resetDropHints();\n      }\n    };\n    _this._onDragOver = function (item, event) {\n      if (_this._draggedColumnIndex >= 0) {\n        event.stopPropagation();\n        _this._computeDropHintToBeShown(event.clientX);\n      }\n    };\n    _this._onDrop = function (item, event) {\n      // Safe to assume this is defined since we're handling a drop event\n      var columnReorderProps = _this._getColumnReorderProps();\n      // Target index will not get changed if draggeditem is after target item.\n      if (_this._draggedColumnIndex >= 0 && event) {\n        var targetIndex = _this._draggedColumnIndex > _this._currentDropHintIndex ? _this._currentDropHintIndex : _this._currentDropHintIndex - 1;\n        var isValidDrop = _this._isValidCurrentDropHintIndex();\n        event.stopPropagation();\n        if (isValidDrop) {\n          _this._onDropIndexInfo.sourceIndex = _this._draggedColumnIndex;\n          _this._onDropIndexInfo.targetIndex = targetIndex;\n          if (columnReorderProps.onColumnDrop) {\n            var dragDropDetails = {\n              draggedIndex: _this._draggedColumnIndex,\n              targetIndex: targetIndex\n            };\n            columnReorderProps.onColumnDrop(dragDropDetails);\n            /* eslint-disable deprecation/deprecation */\n          } else if (columnReorderProps.handleColumnReorder) {\n            columnReorderProps.handleColumnReorder(_this._draggedColumnIndex, targetIndex);\n            /* eslint-enable deprecation/deprecation */\n          }\n        }\n      }\n\n      _this._resetDropHints();\n      _this._dropHintDetails = {};\n      _this._draggedColumnIndex = -1;\n    };\n    _this._updateDragInfo = function (props, event) {\n      // Safe to assume this is defined since we're handling a drag event\n      var columnReorderProps = _this._getColumnReorderProps();\n      var itemIndex = props.itemIndex;\n      if (itemIndex >= 0) {\n        // Column index is set based on the checkbox\n        _this._draggedColumnIndex = _this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n        _this._getDropHintPositions();\n        if (columnReorderProps.onColumnDragStart) {\n          columnReorderProps.onColumnDragStart(true);\n        }\n      } else if (event && _this._draggedColumnIndex >= 0) {\n        _this._resetDropHints();\n        _this._draggedColumnIndex = -1;\n        _this._dropHintDetails = {};\n        if (columnReorderProps.onColumnDragEnd) {\n          var columnDragEndLocation = _this._isEventOnHeader(event);\n          columnReorderProps.onColumnDragEnd({\n            dropLocation: columnDragEndLocation\n          }, event);\n        }\n      }\n    };\n    _this._getDropHintPositions = function () {\n      var _a = _this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      var columnReorderProps = _this._getColumnReorderProps();\n      var prevX = 0;\n      var prevMid = 0;\n      var prevRef;\n      var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n      for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n        if (_this._rootElement.current) {\n          var dropHintElement = _this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0];\n          if (dropHintElement) {\n            if (i === frozenColumnCountFromStart) {\n              prevX = dropHintElement.offsetLeft;\n              prevMid = dropHintElement.offsetLeft;\n              prevRef = dropHintElement;\n            } else {\n              var newMid = (dropHintElement.offsetLeft + prevX) / 2;\n              _this._dropHintDetails[i - 1] = {\n                originX: prevX,\n                startX: prevMid,\n                endX: newMid,\n                dropHintElementRef: prevRef\n              };\n              prevMid = newMid;\n              prevRef = dropHintElement;\n              prevX = dropHintElement.offsetLeft;\n              if (i === columns.length - frozenColumnCountFromEnd) {\n                _this._dropHintDetails[i] = {\n                  originX: prevX,\n                  startX: prevMid,\n                  endX: dropHintElement.offsetLeft,\n                  dropHintElementRef: prevRef\n                };\n              }\n            }\n          }\n        }\n      }\n    };\n    /**\n     * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n     */\n    _this._computeDropHintToBeShown = function (clientX) {\n      var isRtl = getRTL(_this.props.theme);\n      if (_this._rootElement.current) {\n        var clientRect = _this._rootElement.current.getBoundingClientRect();\n        var headerOriginX = clientRect.left;\n        var eventXRelativePosition = clientX - headerOriginX;\n        var currentDropHintIndex = _this._currentDropHintIndex;\n        if (_this._isValidCurrentDropHintIndex()) {\n          if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {\n            return;\n          }\n        }\n        var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a;\n        // Safe to assume this is defined since we're handling a drag/drop event\n        var columnReorderProps = _this._getColumnReorderProps();\n        var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n        var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n        var currentIndex = frozenColumnCountFromStart;\n        var lastValidColumn = columns.length - frozenColumnCountFromEnd;\n        var indexToUpdate = -1;\n        if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {\n          indexToUpdate = currentIndex;\n        } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {\n          indexToUpdate = lastValidColumn;\n        } else if (_this._isValidCurrentDropHintIndex()) {\n          if (_this._dropHintDetails[currentDropHintIndex + 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {\n            indexToUpdate = currentDropHintIndex + 1;\n          } else if (_this._dropHintDetails[currentDropHintIndex - 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {\n            indexToUpdate = currentDropHintIndex - 1;\n          }\n        }\n        if (indexToUpdate === -1) {\n          var startIndex = frozenColumnCountFromStart;\n          var endIndex = lastValidColumn;\n          while (startIndex < endIndex) {\n            var middleIndex = Math.ceil((endIndex + startIndex) / 2);\n            if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {\n              indexToUpdate = middleIndex;\n              break;\n            } else if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              endIndex = middleIndex;\n            } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              startIndex = middleIndex;\n            }\n          }\n        }\n        if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {\n          if (_this._isValidCurrentDropHintIndex()) {\n            _this._resetDropHints();\n          }\n        } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n          _this._resetDropHints();\n          _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n          _this._currentDropHintIndex = indexToUpdate;\n        }\n      }\n    };\n    _this._renderColumnSizer = function (_a) {\n      var _b;\n      var columnIndex = _a.columnIndex;\n      var _c = _this.props.columns,\n        columns = _c === void 0 ? NO_COLUMNS : _c;\n      var column = columns[columnIndex];\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      var classNames = _this._classNames;\n      return column.isResizable ? React.createElement(\"div\", {\n        key: column.key + \"_sizer\",\n        \"aria-hidden\": true,\n        role: \"button\",\n        \"data-is-focusable\": false,\n        onClick: _stopPropagation,\n        \"data-sizer-index\": columnIndex,\n        onBlur: _this._onSizerBlur,\n        className: css(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_b = {}, _b[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex, _b)),\n        onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex)\n      }) : null;\n    };\n    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {\n      return React.createElement(\"span\", {\n        className: tooltipHostProps.hostClassName\n      }, tooltipHostProps.children);\n    };\n    /**\n     * Called when the select all toggle is clicked.\n     */\n    _this._onSelectAllClicked = function () {\n      var selection = _this.props.selection;\n      if (selection) {\n        selection.toggleAllSelected();\n      }\n    };\n    _this._onRootMouseDown = function (ev) {\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n      var columnIndex = Number(columnIndexAttr);\n      var _a = _this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n      if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n        // Ignore anything except the primary button.\n        return;\n      }\n      _this.setState({\n        columnResizeDetails: {\n          columnIndex: columnIndex,\n          columnMinWidth: columns[columnIndex].calculatedWidth,\n          originX: ev.clientX\n        }\n      });\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n    _this._onRootMouseMove = function (ev) {\n      var _a = _this.state,\n        columnResizeDetails = _a.columnResizeDetails,\n        isSizing = _a.isSizing;\n      if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n        _this.setState({\n          isSizing: true\n        });\n      }\n    };\n    _this._onRootKeyDown = function (ev) {\n      var _a = _this.state,\n        columnResizeDetails = _a.columnResizeDetails,\n        isSizing = _a.isSizing;\n      var _b = _this.props,\n        _c = _b.columns,\n        columns = _c === void 0 ? NO_COLUMNS : _c,\n        onColumnResized = _b.onColumnResized;\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n      if (!columnIndexAttr || isSizing) {\n        return;\n      }\n      var columnIndex = Number(columnIndexAttr);\n      if (!columnResizeDetails) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: {\n              columnIndex: columnIndex,\n              columnMinWidth: columns[columnIndex].calculatedWidth\n            }\n          });\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      } else {\n        var increment = void 0;\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: undefined\n          });\n          ev.preventDefault();\n          ev.stopPropagation();\n          // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.left) {\n          increment = getRTL(_this.props.theme) ? 1 : -1;\n          // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.right) {\n          increment = getRTL(_this.props.theme) ? -1 : 1;\n        }\n        if (increment) {\n          if (!ev.shiftKey) {\n            increment *= 10;\n          }\n          _this.setState({\n            columnResizeDetails: __assign(__assign({}, columnResizeDetails), {\n              columnMinWidth: columnResizeDetails.columnMinWidth + increment\n            })\n          });\n          if (onColumnResized) {\n            onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n          }\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    };\n    /**\n     * mouse move event handler in the header\n     * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n     *\n     * @param ev - mouse move event\n     */\n    _this._onSizerMouseMove = function (ev) {\n      var\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = ev.buttons;\n      var _a = _this.props,\n        onColumnIsSizingChanged = _a.onColumnIsSizingChanged,\n        onColumnResized = _a.onColumnResized,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n        // cancel mouse down event and return early when the primary button is not pressed\n        _this._onSizerMouseUp(ev);\n        return;\n      }\n      if (ev.clientX !== columnResizeDetails.originX) {\n        if (onColumnIsSizingChanged) {\n          onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);\n        }\n      }\n      if (onColumnResized) {\n        var movement = ev.clientX - columnResizeDetails.originX;\n        if (getRTL(_this.props.theme)) {\n          movement = -movement;\n        }\n        onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);\n      }\n    };\n    _this._onSizerBlur = function (ev) {\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      if (columnResizeDetails) {\n        _this.setState({\n          columnResizeDetails: undefined,\n          isSizing: false\n        });\n      }\n    };\n    /**\n     * mouse up event handler in the header\n     * clear the resize related state.\n     * This is to ensure we can catch double click event\n     *\n     * @param ev - mouse up event\n     */\n    _this._onSizerMouseUp = function (ev) {\n      var _a = _this.props,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b,\n        onColumnIsSizingChanged = _a.onColumnIsSizingChanged;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      _this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false\n      });\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);\n      }\n    };\n    _this._onToggleCollapseAll = function () {\n      var onToggleCollapseAll = _this.props.onToggleCollapseAll;\n      var newCollapsed = !_this.state.isAllCollapsed;\n      _this.setState({\n        isAllCollapsed: newCollapsed\n      });\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(newCollapsed);\n      }\n    };\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: _this.props.isAllCollapsed,\n      isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected()\n    };\n    _this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1\n    };\n    _this._id = getId('header');\n    _this._currentDropHintIndex = -1;\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    _this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: function () {\n          return;\n        }\n      },\n      minimumPixelsForDrag: _this.props.minimumPixelsForDrag\n    });\n    return _this;\n  }\n  DetailsHeaderBase.prototype.componentDidMount = function () {\n    var selection = this.props.selection;\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    }\n  };\n  DetailsHeaderBase.prototype.componentDidUpdate = function (prevProps) {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      var _a = prevProps.columns,\n        previousColumns = _a === void 0 ? NO_COLUMNS : _a;\n      var _b = this.props.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1\n        };\n      }\n    }\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({\n        isAllCollapsed: this.props.isAllCollapsed\n      });\n    }\n  };\n  DetailsHeaderBase.prototype.componentWillUnmount = function () {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n    this._dragDropHelper.dispose();\n    this._events.dispose();\n  };\n  DetailsHeaderBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      _b = _a.columns,\n      columns = _b === void 0 ? NO_COLUMNS : _b,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelForToggleAllGroupsButton = _a.ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox,\n      selectAllVisibility = _a.selectAllVisibility,\n      ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn,\n      indentWidth = _a.indentWidth,\n      onColumnClick = _a.onColumnClick,\n      onColumnContextMenu = _a.onColumnContextMenu,\n      _c = _a.onRenderColumnHeaderTooltip,\n      onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c,\n      styles = _a.styles,\n      selectionMode = _a.selectionMode,\n      theme = _a.theme,\n      onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox,\n      groupNestingDepth = _a.groupNestingDepth,\n      useFastIcons = _a.useFastIcons,\n      checkboxVisibility = _a.checkboxVisibility,\n      className = _a.className;\n    var _d = this.state,\n      isAllSelected = _d.isAllSelected,\n      columnResizeDetails = _d.columnResizeDetails,\n      isSizing = _d.isSizing,\n      isAllCollapsed = _d.isAllCollapsed;\n    var showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    var isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    var isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n    var columnReorderProps = this._getColumnReorderProps();\n    var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;\n    var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isAllSelected: isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing: isSizing,\n      isAllCollapsed: isAllCollapsed,\n      isCheckboxHidden: isCheckboxHidden,\n      className: className\n    });\n    var classNames = this._classNames;\n    var IconComponent = useFastIcons ? FontIcon : Icon;\n    var showGroupExpander = groupNestingDepth > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible;\n    var columnIndexOffset = 1 + (showCheckbox ? 1 : 0) + (showGroupExpander ? 1 : 0);\n    var isRTL = getRTL(theme);\n    return React.createElement(FocusZone, {\n      role: \"row\",\n      \"aria-label\": ariaLabel,\n      className: classNames.root,\n      componentRef: this._rootComponent,\n      elementRef: this._rootElement,\n      onMouseMove: this._onRootMouseMove,\n      \"data-automationid\": \"DetailsHeader\",\n      direction: FocusZoneDirection.horizontal\n    }, showCheckbox ? [React.createElement(\"div\", {\n      key: \"__checkbox\",\n      className: classNames.cellIsCheck,\n      \"aria-labelledby\": this._id + \"-checkTooltip\",\n      onClick: !isCheckboxHidden ? this._onSelectAllClicked : undefined,\n      role: 'columnheader'\n    }, onRenderColumnHeaderTooltip({\n      hostClassName: classNames.checkTooltip,\n      id: this._id + \"-checkTooltip\",\n      setAriaDescribedBy: false,\n      content: ariaLabelForSelectAllCheckbox,\n      children: React.createElement(DetailsRowCheck, {\n        id: this._id + \"-check\",\n        \"aria-label\": selectionMode === SelectionMode.multiple ? ariaLabelForSelectAllCheckbox : ariaLabelForSelectionColumn,\n        \"data-is-focusable\": !isCheckboxHidden || undefined,\n        isHeader: true,\n        selected: isAllSelected,\n        anySelected: false,\n        canSelect: !isCheckboxHidden,\n        className: classNames.check,\n        onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n        useFastIcons: useFastIcons,\n        isVisible: isCheckboxAlwaysVisible\n      })\n    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectAllCheckbox) : ariaLabelForSelectionColumn && isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectionColumn) : null : null] : null, showGroupExpander ? React.createElement(\"div\", {\n      className: classNames.cellIsGroupExpander,\n      onClick: this._onToggleCollapseAll,\n      \"data-is-focusable\": true,\n      \"aria-label\": ariaLabelForToggleAllGroupsButton,\n      \"aria-expanded\": !isAllCollapsed,\n      role: \"columnheader\"\n    }, React.createElement(IconComponent, {\n      className: classNames.collapseButton,\n      iconName: isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'\n    }), React.createElement(\"span\", {\n      className: classNames.accessibleLabel\n    }, ariaLabelForToggleAllGroupsButton)) : null, React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth - 1\n    }), columns.map(function (column, columnIndex) {\n      var _isDraggable = columnReorderProps ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd : false;\n      return [columnReorderProps && (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) && _this._renderDropHint(columnIndex), React.createElement(DetailsColumn, {\n        column: column,\n        styles: column.styles,\n        key: column.key,\n        columnIndex: columnIndexOffset + columnIndex,\n        parentId: _this._id,\n        isDraggable: _isDraggable,\n        updateDragInfo: _this._updateDragInfo,\n        dragDropHelper: _this._dragDropHelper,\n        onColumnClick: onColumnClick,\n        onColumnContextMenu: onColumnContextMenu,\n        // Do not render tooltips by default, but allow for override via props.\n        onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip,\n        isDropped: _this._onDropIndexInfo.targetIndex === columnIndex,\n        cellStyleProps: _this.props.cellStyleProps,\n        useFastIcons: useFastIcons\n      }), _this._renderColumnDivider(columnIndex)];\n    }), columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length), isSizing && React.createElement(Layer, null, React.createElement(\"div\", {\n      className: classNames.sizingOverlay,\n      onMouseMove: this._onSizerMouseMove,\n      onMouseUp: this._onSizerMouseUp\n    })));\n  };\n  /** Set focus to the active thing in the focus area. */\n  DetailsHeaderBase.prototype.focus = function () {\n    var _a;\n    return !!((_a = this._rootComponent.current) === null || _a === void 0 ? void 0 : _a.focus());\n  };\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  DetailsHeaderBase.prototype._getColumnReorderProps = function () {\n    var _a = this.props,\n      columnReorderOptions = _a.columnReorderOptions,\n      columnReorderProps = _a.columnReorderProps;\n    return columnReorderProps || columnReorderOptions && __assign(__assign({}, columnReorderOptions), {\n      onColumnDragEnd: undefined\n    });\n  };\n  DetailsHeaderBase.prototype._getHeaderDragDropOptions = function () {\n    var options = {\n      selectionIndex: 1,\n      context: {\n        data: this,\n        index: 0\n      },\n      canDrag: function () {\n        return false;\n      },\n      canDrop: function () {\n        return true;\n      },\n      onDragStart: function () {\n        return undefined;\n      },\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: function () {\n        return undefined;\n      },\n      onDragOver: this._onDragOver\n    };\n    return options;\n  };\n  DetailsHeaderBase.prototype._isValidCurrentDropHintIndex = function () {\n    return this._currentDropHintIndex >= 0;\n  };\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  DetailsHeaderBase.prototype._isCheckboxColumnHidden = function () {\n    var _a = this.props,\n      selectionMode = _a.selectionMode,\n      checkboxVisibility = _a.checkboxVisibility;\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  };\n  DetailsHeaderBase.prototype._resetDropHints = function () {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  };\n  DetailsHeaderBase.prototype._updateDropHintElement = function (element, displayProperty) {\n    element.childNodes[1].style.display = displayProperty;\n    element.childNodes[0].style.display = displayProperty;\n  };\n  DetailsHeaderBase.prototype._isEventOnHeader = function (event) {\n    if (this._rootElement.current) {\n      var clientRect = this._rootElement.current.getBoundingClientRect();\n      if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  };\n  DetailsHeaderBase.prototype._renderColumnDivider = function (columnIndex) {\n    var _a = this.props.columns,\n      columns = _a === void 0 ? NO_COLUMNS : _a;\n    var column = columns[columnIndex];\n    var onRenderDivider = column.onRenderDivider;\n    return onRenderDivider ? onRenderDivider({\n      column: column,\n      columnIndex: columnIndex\n    }, this._renderColumnSizer) : this._renderColumnSizer({\n      column: column,\n      columnIndex: columnIndex\n    });\n  };\n  DetailsHeaderBase.prototype._renderDropHint = function (dropHintIndex) {\n    var classNames = this._classNames;\n    var IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return React.createElement(\"div\", {\n      key: 'dropHintKey',\n      className: classNames.dropHintStyle,\n      id: \"columnDropHint_\" + dropHintIndex\n    }, React.createElement(\"div\", {\n      role: \"presentation\",\n      key: \"dropHintCircleKey\",\n      className: classNames.dropHintCaretStyle,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      \"aria-hidden\": true\n    }, React.createElement(IconComponent, {\n      iconName: 'CircleShapeSolid'\n    })), React.createElement(\"div\", {\n      key: \"dropHintLineKey\",\n      \"aria-hidden\": true,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      className: classNames.dropHintLineStyle\n    }));\n  };\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  DetailsHeaderBase.prototype._onSizerDoubleClick = function (columnIndex, ev) {\n    var _a = this.props,\n      onColumnAutoResized = _a.onColumnAutoResized,\n      _b = _a.columns,\n      columns = _b === void 0 ? NO_COLUMNS : _b;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  };\n  DetailsHeaderBase.prototype._onSelectionChanged = function () {\n    var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected\n      });\n    }\n  };\n  DetailsHeaderBase.defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true\n  };\n  return DetailsHeaderBase;\n}(React.Component);\nexport { DetailsHeaderBase };\nfunction _liesBetween(rtl, target, left, right) {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl, a, b) {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl, a, b) {\n  return rtl ? a <= b : a >= b;\n}\nfunction _stopPropagation(ev) {\n  ev.stopPropagation();\n}","map":{"version":3,"names":["React","initializeComponentRef","EventGroup","css","getRTL","getId","KeyCodes","classNamesFunction","ColumnDragEndLocation","CheckboxVisibility","FocusZone","FocusZoneDirection","Icon","FontIcon","Layer","GroupSpacer","CollapseAllVisibility","DetailsRowCheck","SelectionMode","SELECTION_CHANGE","DragDropHelper","DetailsColumn","SelectAllVisibility","getClassNames","MOUSEDOWN_PRIMARY_BUTTON","MOUSEMOVE_PRIMARY_BUTTON","NO_COLUMNS","DetailsHeaderBase","_super","__extends","props","_this","call","_rootElement","createRef","_rootComponent","_draggedColumnIndex","_dropHintDetails","_updateDroppingState","newValue","event","type","_resetDropHints","_onDragOver","item","stopPropagation","_computeDropHintToBeShown","clientX","_onDrop","columnReorderProps","_getColumnReorderProps","targetIndex","_currentDropHintIndex","isValidDrop","_isValidCurrentDropHintIndex","_onDropIndexInfo","sourceIndex","onColumnDrop","dragDropDetails","draggedIndex","handleColumnReorder","_updateDragInfo","itemIndex","_isCheckboxColumnHidden","_getDropHintPositions","onColumnDragStart","onColumnDragEnd","columnDragEndLocation","_isEventOnHeader","dropLocation","_a","columns","prevX","prevMid","prevRef","frozenColumnCountFromStart","frozenColumnCountFromEnd","i","length","current","dropHintElement","querySelectorAll","offsetLeft","newMid","originX","startX","endX","dropHintElementRef","isRtl","theme","clientRect","getBoundingClientRect","headerOriginX","left","eventXRelativePosition","currentDropHintIndex","_liesBetween","currentIndex","lastValidColumn","indexToUpdate","_isBefore","_isAfter","startIndex","endIndex","middleIndex","Math","ceil","_updateDropHintElement","_renderColumnSizer","columnIndex","_c","column","columnResizeDetails","state","classNames","_classNames","isResizable","createElement","key","role","onClick","_stopPropagation","onBlur","_onSizerBlur","className","cellSizer","cellSizerStart","cellSizerEnd","_b","cellIsResizing","onDoubleClick","_onSizerDoubleClick","bind","_onRenderColumnHeaderTooltip","tooltipHostProps","hostClassName","children","_onSelectAllClicked","selection","toggleAllSelected","_onRootMouseDown","ev","columnIndexAttr","target","getAttribute","Number","button","setState","columnMinWidth","calculatedWidth","preventDefault","_onRootMouseMove","isSizing","_onRootKeyDown","onColumnResized","which","enter","increment","undefined","right","shiftKey","__assign","_onSizerMouseMove","buttons","onColumnIsSizingChanged","_onSizerMouseUp","movement","_onToggleCollapseAll","onToggleCollapseAll","newCollapsed","isAllCollapsed","_events","isAllSelected","_id","_dragDropHelper","getSelection","minimumPixelsForDrag","prototype","componentDidMount","on","_onSelectionChanged","_subscriptionObject","subscribe","_getHeaderDragDropOptions","componentDidUpdate","prevProps","dispose","previousColumns","componentWillUnmount","render","ariaLabel","ariaLabelForToggleAllGroupsButton","ariaLabelForSelectAllCheckbox","selectAllVisibility","ariaLabelForSelectionColumn","indentWidth","onColumnClick","onColumnContextMenu","onRenderColumnHeaderTooltip","styles","selectionMode","onRenderDetailsCheckbox","groupNestingDepth","useFastIcons","checkboxVisibility","_d","showCheckbox","none","isCheckboxHidden","hidden","isCheckboxAlwaysVisible","always","isSelectAllHidden","isResizingColumn","IconComponent","showGroupExpander","collapseAllVisibility","visible","columnIndexOffset","isRTL","root","componentRef","elementRef","onMouseMove","direction","horizontal","cellIsCheck","checkTooltip","id","setAriaDescribedBy","content","multiple","isHeader","selected","anySelected","canSelect","check","isVisible","accessibleLabel","cellIsGroupExpander","collapseButton","iconName","count","map","_isDraggable","_renderDropHint","parentId","isDraggable","updateDragInfo","dragDropHelper","isDropped","cellStyleProps","_renderColumnDivider","sizingOverlay","onMouseUp","focus","columnReorderOptions","options","selectionIndex","context","data","index","canDrag","canDrop","onDragStart","updateDropState","onDrop","onDragEnd","onDragOver","element","displayProperty","childNodes","style","display","clientY","top","bottom","header","onRenderDivider","dropHintIndex","dropHintStyle","dropHintCaretStyle","dropHintLineStyle","onColumnAutoResized","defaultProps","Component","rtl","a","b"],"sources":["C:\\Users\\Administrator\\frontendapp\\communicationapp\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\DetailsList\\DetailsHeader.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn, IDetailsHeaderBaseProps, IColumnDragDropDetails } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { ITooltipHostProps } from '../../Tooltip';\nimport type { ISelection } from '../../Selection';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\nimport type {\n  IDropHintDetails,\n  IColumnReorderHeaderProps,\n  IDetailsHeaderState,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n  IDetailsHeader,\n} from './DetailsHeader.types';\n\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsHeaderBase\n  extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\n  implements IDetailsHeader {\n  public static defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true,\n  };\n\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\n  private _rootElement = React.createRef<HTMLElement>();\n  private _events: EventGroup;\n  private _rootComponent = React.createRef<IFocusZone>();\n  private _id: string;\n  private _draggedColumnIndex = -1;\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\n  private _dragDropHelper: DragDropHelper;\n  private _currentDropHintIndex: number;\n  private _subscriptionObject?: IDisposable;\n  private _onDropIndexInfo: {\n    sourceIndex: number;\n    targetIndex: number;\n  };\n\n  constructor(props: IDetailsHeaderBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: this.props.isAllCollapsed,\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\n    };\n\n    this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1,\n    };\n    this._id = getId('header');\n    this._currentDropHintIndex = -1;\n\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: () => {\n          return;\n        },\n      } as ISelection,\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\n    });\n  }\n\n  public componentDidMount(): void {\n    const { selection } = this.props;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\n      const { columns = NO_COLUMNS } = this.props;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1,\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      columns = NO_COLUMNS,\n      ariaLabel,\n      ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox,\n      selectAllVisibility,\n      ariaLabelForSelectionColumn,\n      indentWidth,\n      onColumnClick,\n      onColumnContextMenu,\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\n      styles,\n      selectionMode,\n      theme,\n      onRenderDetailsCheckbox,\n      groupNestingDepth,\n      useFastIcons,\n      checkboxVisibility,\n      className,\n    } = this.props;\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    const columnReorderProps = this._getColumnReorderProps();\n    const frozenColumnCountFromStart =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\n        ? columnReorderProps.frozenColumnCountFromStart\n        : 0;\n    const frozenColumnCountFromEnd =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\n        ? columnReorderProps.frozenColumnCountFromEnd\n        : 0;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing,\n      isAllCollapsed,\n      isCheckboxHidden,\n      className,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n    const showGroupExpander =\n      groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible;\n    const columnIndexOffset = 1 + (showCheckbox ? 1 : 0) + (showGroupExpander ? 1 : 0);\n\n    const isRTL = getRTL(theme);\n    return (\n      <FocusZone\n        role=\"row\"\n        aria-label={ariaLabel}\n        className={classNames.root}\n        componentRef={this._rootComponent}\n        elementRef={this._rootElement}\n        onMouseMove={this._onRootMouseMove}\n        data-automationid=\"DetailsHeader\"\n        direction={FocusZoneDirection.horizontal}\n      >\n        {showCheckbox\n          ? [\n              <div\n                key=\"__checkbox\"\n                className={classNames.cellIsCheck}\n                aria-labelledby={`${this._id}-checkTooltip`}\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\n                role={'columnheader'}\n              >\n                {onRenderColumnHeaderTooltip(\n                  {\n                    hostClassName: classNames.checkTooltip,\n                    id: `${this._id}-checkTooltip`,\n                    setAriaDescribedBy: false,\n                    content: ariaLabelForSelectAllCheckbox,\n                    children: (\n                      <DetailsRowCheck\n                        id={`${this._id}-check`}\n                        aria-label={\n                          selectionMode === SelectionMode.multiple\n                            ? ariaLabelForSelectAllCheckbox\n                            : ariaLabelForSelectionColumn\n                        }\n                        data-is-focusable={!isCheckboxHidden || undefined}\n                        isHeader={true}\n                        selected={isAllSelected}\n                        anySelected={false}\n                        canSelect={!isCheckboxHidden}\n                        className={classNames.check}\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\n                        useFastIcons={useFastIcons}\n                        isVisible={isCheckboxAlwaysVisible}\n                      />\n                    ),\n                  },\n                  this._onRenderColumnHeaderTooltip,\n                )}\n              </div>,\n              !this.props.onRenderColumnHeaderTooltip ? (\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectAllCheckbox}\n                  </label>\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectionColumn}\n                  </label>\n                ) : null\n              ) : null,\n            ]\n          : null}\n        {showGroupExpander ? (\n          <div\n            className={classNames.cellIsGroupExpander}\n            onClick={this._onToggleCollapseAll}\n            data-is-focusable={true}\n            aria-label={ariaLabelForToggleAllGroupsButton}\n            aria-expanded={!isAllCollapsed}\n            role=\"columnheader\"\n          >\n            <IconComponent\n              className={classNames.collapseButton}\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\n            />\n            {/* Use this span in addition to aria-label, otherwise VoiceOver ignores the column */}\n            <span className={classNames.accessibleLabel}>{ariaLabelForToggleAllGroupsButton}</span>\n          </div>\n        ) : null}\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\n        {columns.map((column: IColumn, columnIndex: number) => {\n          const _isDraggable = columnReorderProps\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\n            : false;\n          return [\n            columnReorderProps &&\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\n              this._renderDropHint(columnIndex),\n            <DetailsColumn\n              column={column}\n              styles={column.styles}\n              key={column.key}\n              columnIndex={columnIndexOffset + columnIndex}\n              parentId={this._id}\n              isDraggable={_isDraggable}\n              updateDragInfo={this._updateDragInfo}\n              dragDropHelper={this._dragDropHelper}\n              onColumnClick={onColumnClick}\n              onColumnContextMenu={onColumnContextMenu}\n              // Do not render tooltips by default, but allow for override via props.\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\n              cellStyleProps={this.props.cellStyleProps}\n              useFastIcons={useFastIcons}\n            />,\n            this._renderColumnDivider(columnIndex),\n          ];\n        })}\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\n        {isSizing && (\n          <Layer>\n            <div\n              className={classNames.sizingOverlay}\n              onMouseMove={this._onSizerMouseMove}\n              onMouseUp={this._onSizerMouseUp}\n            />\n          </Layer>\n        )}\n      </FocusZone>\n    );\n  }\n\n  /** Set focus to the active thing in the focus area. */\n  public focus(): boolean {\n    return !!this._rootComponent.current?.focus();\n  }\n\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\n    const { columnReorderOptions, columnReorderProps } = this.props;\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\n  }\n\n  private _getHeaderDragDropOptions(): IDragDropOptions {\n    const options = {\n      selectionIndex: 1,\n      context: { data: this, index: 0 },\n      canDrag: () => false,\n      canDrop: () => true,\n      onDragStart: () => undefined,\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: () => undefined,\n      onDragOver: this._onDragOver,\n    };\n    return options;\n  }\n\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n      this._resetDropHints();\n    }\n  };\n\n  private _isValidCurrentDropHintIndex() {\n    return this._currentDropHintIndex >= 0;\n  }\n\n  private _onDragOver = (item: any, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0) {\n      event.stopPropagation();\n      this._computeDropHintToBeShown(event.clientX);\n    }\n  };\n\n  private _onDrop = (item?: any, event?: DragEvent): void => {\n    // Safe to assume this is defined since we're handling a drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n\n    // Target index will not get changed if draggeditem is after target item.\n    if (this._draggedColumnIndex >= 0 && event) {\n      const targetIndex =\n        this._draggedColumnIndex > this._currentDropHintIndex\n          ? this._currentDropHintIndex\n          : this._currentDropHintIndex - 1;\n      const isValidDrop = this._isValidCurrentDropHintIndex();\n      event.stopPropagation();\n      if (isValidDrop) {\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\n        this._onDropIndexInfo.targetIndex = targetIndex;\n\n        if (columnReorderProps.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: this._draggedColumnIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderProps.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderProps.handleColumnReorder) {\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n\n    this._resetDropHints();\n    this._dropHintDetails = {};\n    this._draggedColumnIndex = -1;\n  };\n\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  private _isCheckboxColumnHidden(): boolean {\n    const { selectionMode, checkboxVisibility } = this.props;\n\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  }\n\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\n    // Safe to assume this is defined since we're handling a drag event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    const itemIndex = props.itemIndex;\n    if (itemIndex >= 0) {\n      // Column index is set based on the checkbox\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n      this._getDropHintPositions();\n      if (columnReorderProps.onColumnDragStart) {\n        columnReorderProps.onColumnDragStart(true);\n      }\n    } else if (event && this._draggedColumnIndex >= 0) {\n      this._resetDropHints();\n      this._draggedColumnIndex = -1;\n      this._dropHintDetails = {};\n      if (columnReorderProps.onColumnDragEnd) {\n        const columnDragEndLocation = this._isEventOnHeader(event);\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\n      }\n    }\n  };\n\n  private _resetDropHints(): void {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  }\n\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\n  }\n\n  private _getDropHintPositions = (): void => {\n    const { columns = NO_COLUMNS } = this.props;\n    // Safe to assume this is defined since we're handling a drag/drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    let prevX = 0;\n    let prevMid = 0;\n    let prevRef: HTMLElement;\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n      if (this._rootElement.current) {\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\n        if (dropHintElement) {\n          if (i === frozenColumnCountFromStart) {\n            prevX = dropHintElement.offsetLeft;\n            prevMid = dropHintElement.offsetLeft;\n            prevRef = dropHintElement;\n          } else {\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\n            this._dropHintDetails[i - 1] = {\n              originX: prevX,\n              startX: prevMid!,\n              endX: newMid,\n              dropHintElementRef: prevRef!,\n            };\n            prevMid = newMid;\n            prevRef = dropHintElement;\n            prevX = dropHintElement.offsetLeft;\n            if (i === columns.length - frozenColumnCountFromEnd) {\n              this._dropHintDetails[i] = {\n                originX: prevX,\n                startX: prevMid!,\n                endX: dropHintElement.offsetLeft,\n                dropHintElementRef: prevRef,\n              };\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n   */\n  private _computeDropHintToBeShown = (clientX: number): void => {\n    const isRtl = getRTL(this.props.theme);\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      const headerOriginX = clientRect.left;\n      const eventXRelativePosition = clientX - headerOriginX;\n      const currentDropHintIndex = this._currentDropHintIndex;\n      if (this._isValidCurrentDropHintIndex()) {\n        if (\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex!].startX,\n            this._dropHintDetails[currentDropHintIndex!].endX,\n          )\n        ) {\n          return;\n        }\n      }\n      const { columns = NO_COLUMNS } = this.props;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      const columnReorderProps = this._getColumnReorderProps()!;\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      const currentIndex: number = frozenColumnCountFromStart;\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\n      let indexToUpdate = -1;\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\n        indexToUpdate = currentIndex;\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\n        indexToUpdate = lastValidColumn;\n      } else if (this._isValidCurrentDropHintIndex()) {\n        if (\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! + 1;\n        } else if (\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! - 1;\n        }\n      }\n      if (indexToUpdate === -1) {\n        let startIndex = frozenColumnCountFromStart;\n        let endIndex = lastValidColumn;\n        while (startIndex < endIndex) {\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\n          if (\n            _liesBetween(\n              isRtl,\n              eventXRelativePosition,\n              this._dropHintDetails[middleIndex].startX,\n              this._dropHintDetails[middleIndex].endX,\n            )\n          ) {\n            indexToUpdate = middleIndex;\n            break;\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            endIndex = middleIndex;\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            startIndex = middleIndex;\n          }\n        }\n      }\n\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\n        if (this._isValidCurrentDropHintIndex()) {\n          this._resetDropHints();\n        }\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n        this._resetDropHints();\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n        this._currentDropHintIndex = indexToUpdate;\n      }\n    }\n  };\n\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      if (\n        event.clientX > clientRect.left &&\n        event.clientX < clientRect.right &&\n        event.clientY > clientRect.top &&\n        event.clientY < clientRect.bottom\n      ) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  }\n\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { columnResizeDetails } = this.state;\n    const classNames = this._classNames;\n\n    return column.isResizable ? (\n      <div\n        key={`${column.key}_sizer`}\n        aria-hidden={true}\n        role=\"button\"\n        data-is-focusable={false}\n        onClick={_stopPropagation}\n        data-sizer-index={columnIndex}\n        onBlur={this._onSizerBlur}\n        className={css(\n          classNames.cellSizer,\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\n          {\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\n          },\n        )}\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\n      />\n    ) : null;\n  };\n\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { onRenderDivider } = column;\n    return onRenderDivider\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\n      : this._renderColumnSizer({ column, columnIndex });\n  }\n\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\n    const classNames = this._classNames;\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return (\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\n        <div\n          role=\"presentation\"\n          key={`dropHintCircleKey`}\n          className={classNames.dropHintCaretStyle}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          aria-hidden={true}\n        >\n          <IconComponent iconName={'CircleShapeSolid'} />\n        </div>\n        <div\n          key={`dropHintLineKey`}\n          aria-hidden={true}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          className={classNames.dropHintLineStyle}\n        />\n      </div>\n    );\n  }\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  }\n\n  /**\n   * Called when the select all toggle is clicked.\n   */\n  private _onSelectAllClicked = (): void => {\n    const { selection } = this.props;\n\n    if (selection) {\n      selection.toggleAllSelected();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n    const columnIndex = Number(columnIndexAttr);\n    const { columns = NO_COLUMNS } = this.props;\n\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    this.setState({\n      columnResizeDetails: {\n        columnIndex: columnIndex,\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\n        originX: ev.clientX,\n      },\n    });\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n      this.setState({ isSizing: true });\n    }\n  };\n\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\n\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n\n    if (!columnIndexAttr || isSizing) {\n      return;\n    }\n\n    const columnIndex = Number(columnIndexAttr);\n\n    if (!columnResizeDetails) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: {\n            columnIndex: columnIndex,\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\n          },\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      let increment: number | undefined;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: undefined,\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.left) {\n        increment = getRTL(this.props.theme) ? 1 : -1;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.right) {\n        increment = getRTL(this.props.theme) ? -1 : 1;\n      }\n\n      if (increment) {\n        if (!ev.shiftKey) {\n          increment *= 10;\n        }\n\n        this.setState({\n          columnResizeDetails: {\n            ...columnResizeDetails,\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\n          },\n        });\n\n        if (onColumnResized) {\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  /**\n   * mouse move event handler in the header\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n   *\n   * @param ev - mouse move event\n   */\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const {\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons,\n    } = ev;\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onSizerMouseUp(ev);\n      return;\n    }\n\n    if (ev.clientX !== columnResizeDetails!.originX) {\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\n      }\n    }\n\n    if (onColumnResized) {\n      let movement = ev.clientX - columnResizeDetails!.originX!;\n\n      if (getRTL(this.props.theme)) {\n        movement = -movement;\n      }\n\n      onColumnResized(\n        columns[columnResizeDetails!.columnIndex],\n        columnResizeDetails!.columnMinWidth + movement,\n        columnResizeDetails!.columnIndex,\n      );\n    }\n  };\n\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { columnResizeDetails } = this.state;\n\n    if (columnResizeDetails) {\n      this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false,\n      });\n    }\n  };\n\n  /**\n   * mouse up event handler in the header\n   * clear the resize related state.\n   * This is to ensure we can catch double click event\n   *\n   * @param ev - mouse up event\n   */\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    this.setState({\n      columnResizeDetails: undefined,\n      isSizing: false,\n    });\n\n    if (onColumnIsSizingChanged) {\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\n    }\n  };\n\n  private _onSelectionChanged(): void {\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected,\n      });\n    }\n  }\n\n  private _onToggleCollapseAll = (): void => {\n    const { onToggleCollapseAll } = this.props;\n    const newCollapsed = !this.state.isAllCollapsed;\n    this.setState({\n      isAllCollapsed: newCollapsed,\n    });\n    if (onToggleCollapseAll) {\n      onToggleCollapseAll(newCollapsed);\n    }\n  };\n}\n\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\n  ev.stopPropagation();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}