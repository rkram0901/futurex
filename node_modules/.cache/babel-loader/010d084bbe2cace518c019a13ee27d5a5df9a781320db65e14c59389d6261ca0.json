{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { getIdentifierKind } from '@azure/communication-common';\nimport { nanoid } from 'nanoid';\nimport { createDecoratedListMessages } from './iterators/createDecoratedListMessages';\nimport { createDecoratedListReadReceipts } from './iterators/createDecoratedListReadReceipts';\nimport { createDecoratedListParticipants } from './iterators/createDecoratedListParticipants';\nimport { convertChatMessage } from './convertChatMessage';\nclass ProxyChatThreadClient {\n  constructor(context) {\n    this._context = context;\n  }\n  get(chatThreadClient, prop) {\n    var _this = this;\n    switch (prop) {\n      case 'listMessages':\n        {\n          return createDecoratedListMessages(chatThreadClient, this._context);\n        }\n      case 'getMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return __awaiter(_this, void 0, void 0, function* () {\n              const message = yield chatThreadClient.getMessage(...args);\n              this._context.setChatMessage(chatThreadClient.threadId, convertChatMessage(message));\n              return message;\n            });\n          }, 'ChatThreadClient.getMessage');\n        }\n      case 'sendMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            return __awaiter(_this, void 0, void 0, function* () {\n              // Retry logic?\n              const [request, options] = args;\n              const {\n                content\n              } = request;\n              const clientMessageId = nanoid(); // Generate a local short uuid for message\n              const newMessage = {\n                content: {\n                  message: content\n                },\n                clientMessageId,\n                id: '',\n                type: 'text',\n                sequenceId: '',\n                version: '',\n                createdOn: new Date(),\n                status: 'sending',\n                senderDisplayName: this._context.getState().displayName,\n                sender: this._context.getState().userId,\n                metadata: options === null || options === void 0 ? void 0 : options.metadata\n              };\n              this._context.setChatMessage(chatThreadClient.threadId, newMessage);\n              let result = undefined;\n              try {\n                result = yield chatThreadClient.sendMessage(...args);\n              } catch (e) {\n                this._context.setChatMessage(chatThreadClient.threadId, Object.assign(Object.assign({}, newMessage), {\n                  status: 'failed'\n                }));\n                throw e;\n              }\n              if (result === null || result === void 0 ? void 0 : result.id) {\n                this._context.batch(() => {\n                  if (!result) {\n                    return;\n                  }\n                  this._context.setChatMessage(chatThreadClient.threadId, Object.assign(Object.assign({}, newMessage), {\n                    clientMessageId: undefined,\n                    status: 'delivered',\n                    id: result.id\n                  }));\n                  this._context.deleteLocalMessage(chatThreadClient.threadId, clientMessageId);\n                });\n              }\n              return result;\n            });\n          }, 'ChatThreadClient.sendMessage');\n        }\n      case 'addParticipants':\n        {\n          return this._context.withAsyncErrorTeedToState(function () {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n            return __awaiter(_this, void 0, void 0, function* () {\n              const result = yield chatThreadClient.addParticipants(...args);\n              const [addRequest] = args;\n              const participantsToAdd = addRequest.participants;\n              this._context.setParticipants(chatThreadClient.threadId, participantsToAdd);\n              return result;\n            });\n          }, 'ChatThreadClient.addParticipants');\n        }\n      case 'deleteMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(function () {\n            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              args[_key4] = arguments[_key4];\n            }\n            return __awaiter(_this, void 0, void 0, function* () {\n              // DeleteMessage is able to either delete local one(for failed message) or synced message\n              const [messageId] = args;\n              if (this._context.deleteLocalMessage(chatThreadClient.threadId, messageId)) {\n                return {};\n              }\n              const result = yield chatThreadClient.deleteMessage(...args);\n              this._context.deleteMessage(chatThreadClient.threadId, messageId);\n              return result;\n            });\n          }, 'ChatThreadClient.deleteMessage');\n        }\n      case 'listParticipants':\n        {\n          return createDecoratedListParticipants(chatThreadClient, this._context);\n        }\n      case 'listReadReceipts':\n        {\n          return createDecoratedListReadReceipts(chatThreadClient, this._context);\n        }\n      case 'sendTypingNotification':\n        {\n          return this._context.withAsyncErrorTeedToState(function () {\n            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              args[_key5] = arguments[_key5];\n            }\n            return __awaiter(_this, void 0, void 0, function* () {\n              return yield chatThreadClient.sendTypingNotification(...args);\n            });\n          }, 'ChatThreadClient.sendTypingNotification');\n        }\n      case 'removeParticipant':\n        {\n          return this._context.withAsyncErrorTeedToState(function () {\n            for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n              args[_key6] = arguments[_key6];\n            }\n            return __awaiter(_this, void 0, void 0, function* () {\n              const result = yield chatThreadClient.removeParticipant(...args);\n              const [removeIdentifier] = args;\n              this._context.deleteParticipant(chatThreadClient.threadId, getIdentifierKind(removeIdentifier));\n              return result;\n            });\n          }, 'ChatThreadClient.removeParticipant');\n        }\n      case 'updateMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(function () {\n            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n              args[_key7] = arguments[_key7];\n            }\n            return __awaiter(_this, void 0, void 0, function* () {\n              const result = yield chatThreadClient.updateMessage(...args);\n              const [messageId, updateOption] = args;\n              this._context.updateChatMessageContent(chatThreadClient.threadId, messageId, updateOption === null || updateOption === void 0 ? void 0 : updateOption.content);\n              return result;\n            });\n          }, 'ChatThreadClient.updateMessage');\n        }\n      case 'updateTopic':\n        {\n          return this._context.withAsyncErrorTeedToState(function () {\n            for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n              args[_key8] = arguments[_key8];\n            }\n            return __awaiter(_this, void 0, void 0, function* () {\n              const result = yield chatThreadClient.updateTopic(...args);\n              const [topic] = args;\n              this._context.updateThreadTopic(chatThreadClient.threadId, topic);\n              return result;\n            });\n          }, 'ChatThreadClient.updateTopic');\n        }\n      case 'getProperties':\n        {\n          return this._context.withAsyncErrorTeedToState(function () {\n            for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n              args[_key9] = arguments[_key9];\n            }\n            return __awaiter(_this, void 0, void 0, function* () {\n              const result = yield chatThreadClient.getProperties(...args);\n              this._context.updateThread(chatThreadClient.threadId, result);\n              return result;\n            });\n          }, 'ChatThreadClient.getProperties');\n        }\n      default:\n        return Reflect.get(chatThreadClient, prop);\n    }\n  }\n}\n/**\n * @private\n */\nexport const chatThreadClientDeclaratify = (chatThreadClient, context) => {\n  context.createThreadIfNotExist(chatThreadClient.threadId);\n  return new Proxy(chatThreadClient, new ProxyChatThreadClient(context));\n};","map":{"version":3,"names":["getIdentifierKind","nanoid","createDecoratedListMessages","createDecoratedListReadReceipts","createDecoratedListParticipants","convertChatMessage","ProxyChatThreadClient","constructor","context","_context","get","chatThreadClient","prop","_this","withAsyncErrorTeedToState","_len","arguments","length","args","Array","_key","__awaiter","message","getMessage","setChatMessage","threadId","_len2","_key2","request","options","content","clientMessageId","newMessage","id","type","sequenceId","version","createdOn","Date","status","senderDisplayName","getState","displayName","sender","userId","metadata","result","undefined","sendMessage","e","Object","assign","batch","deleteLocalMessage","_len3","_key3","addParticipants","addRequest","participantsToAdd","participants","setParticipants","_len4","_key4","messageId","deleteMessage","_len5","_key5","sendTypingNotification","_len6","_key6","removeParticipant","removeIdentifier","deleteParticipant","_len7","_key7","updateMessage","updateOption","updateChatMessageContent","_len8","_key8","updateTopic","topic","updateThreadTopic","_len9","_key9","getProperties","updateThread","Reflect","chatThreadClientDeclaratify","createThreadIfNotExist","Proxy"],"sources":["C:\\Users\\Administrator\\frontendapp\\communicationapp\\node_modules\\@azure\\communication-react\\preprocess-dist\\chat-stateful-client\\src\\StatefulChatThreadClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ChatThreadClient, SendChatMessageResult } from '@azure/communication-chat';\nimport { getIdentifierKind } from '@azure/communication-common';\nimport { ChatMessageWithStatus } from './types/ChatMessageWithStatus';\nimport { ChatContext } from './ChatContext';\nimport { nanoid } from 'nanoid';\nimport { createDecoratedListMessages } from './iterators/createDecoratedListMessages';\nimport { createDecoratedListReadReceipts } from './iterators/createDecoratedListReadReceipts';\nimport { createDecoratedListParticipants } from './iterators/createDecoratedListParticipants';\nimport { convertChatMessage } from './convertChatMessage';\nclass ProxyChatThreadClient implements ProxyHandler<ChatThreadClient> {\n  private _context: ChatContext;\n  constructor(context: ChatContext) {\n    this._context = context;\n  }\n  public get<P extends keyof ChatThreadClient>(chatThreadClient: ChatThreadClient, prop: P): any {\n    switch (prop) {\n      case 'listMessages':\n        {\n          return createDecoratedListMessages(chatThreadClient, this._context);\n        }\n      case 'getMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['getMessage']>) => {\n            const message = await chatThreadClient.getMessage(...args);\n            this._context.setChatMessage(chatThreadClient.threadId, convertChatMessage(message));\n            return message;\n          }, 'ChatThreadClient.getMessage');\n        }\n      case 'sendMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['sendMessage']>) => {\n            // Retry logic?\n            const [request, options] = args;\n            const {\n              content\n            } = request;\n            const clientMessageId = nanoid(); // Generate a local short uuid for message\n            const newMessage: ChatMessageWithStatus = {\n              content: {\n                message: content\n              },\n              clientMessageId,\n              id: '',\n              type: 'text',\n              sequenceId: '',\n              version: '',\n              createdOn: new Date(),\n              status: 'sending',\n              senderDisplayName: this._context.getState().displayName,\n              sender: this._context.getState().userId,\n              metadata: options?.metadata\n            };\n            this._context.setChatMessage(chatThreadClient.threadId, newMessage);\n            let result: SendChatMessageResult | undefined = undefined;\n            try {\n              result = await chatThreadClient.sendMessage(...args);\n            } catch (e) {\n              this._context.setChatMessage(chatThreadClient.threadId, {\n                ...newMessage,\n                status: 'failed'\n              });\n              throw e;\n            }\n            if (result?.id) {\n              this._context.batch(() => {\n                if (!result) {\n                  return;\n                }\n                this._context.setChatMessage(chatThreadClient.threadId, {\n                  ...newMessage,\n                  clientMessageId: undefined,\n                  status: 'delivered',\n                  id: result.id\n                });\n                this._context.deleteLocalMessage(chatThreadClient.threadId, clientMessageId);\n              });\n            }\n            return result;\n          }, 'ChatThreadClient.sendMessage');\n        }\n      case 'addParticipants':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['addParticipants']>) => {\n            const result = await chatThreadClient.addParticipants(...args);\n            const [addRequest] = args;\n            const participantsToAdd = addRequest.participants;\n            this._context.setParticipants(chatThreadClient.threadId, participantsToAdd);\n            return result;\n          }, 'ChatThreadClient.addParticipants');\n        }\n      case 'deleteMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['deleteMessage']>) => {\n            // DeleteMessage is able to either delete local one(for failed message) or synced message\n            const [messageId] = args;\n            if (this._context.deleteLocalMessage(chatThreadClient.threadId, messageId)) {\n              return {};\n            }\n            const result = await chatThreadClient.deleteMessage(...args);\n            this._context.deleteMessage(chatThreadClient.threadId, messageId);\n            return result;\n          }, 'ChatThreadClient.deleteMessage');\n        }\n      case 'listParticipants':\n        {\n          return createDecoratedListParticipants(chatThreadClient, this._context);\n        }\n      case 'listReadReceipts':\n        {\n          return createDecoratedListReadReceipts(chatThreadClient, this._context);\n        }\n      case 'sendTypingNotification':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['sendTypingNotification']>) => {\n            return await chatThreadClient.sendTypingNotification(...args);\n          }, 'ChatThreadClient.sendTypingNotification');\n        }\n      case 'removeParticipant':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['removeParticipant']>) => {\n            const result = await chatThreadClient.removeParticipant(...args);\n            const [removeIdentifier] = args;\n            this._context.deleteParticipant(chatThreadClient.threadId, getIdentifierKind(removeIdentifier));\n            return result;\n          }, 'ChatThreadClient.removeParticipant');\n        }\n      case 'updateMessage':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['updateMessage']>) => {\n            const result = await chatThreadClient.updateMessage(...args);\n            const [messageId, updateOption] = args;\n            this._context.updateChatMessageContent(chatThreadClient.threadId, messageId, updateOption?.content);\n            return result;\n          }, 'ChatThreadClient.updateMessage');\n        }\n      case 'updateTopic':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['updateTopic']>) => {\n            const result = await chatThreadClient.updateTopic(...args);\n            const [topic] = args;\n            this._context.updateThreadTopic(chatThreadClient.threadId, topic);\n            return result;\n          }, 'ChatThreadClient.updateTopic');\n        }\n      case 'getProperties':\n        {\n          return this._context.withAsyncErrorTeedToState(async (...args: Parameters<ChatThreadClient['getProperties']>) => {\n            const result = await chatThreadClient.getProperties(...args);\n            this._context.updateThread(chatThreadClient.threadId, result);\n            return result;\n          }, 'ChatThreadClient.getProperties');\n        }\n      default:\n        return Reflect.get(chatThreadClient, prop);\n    }\n  }\n}\n\n/**\n * @private\n */\nexport const chatThreadClientDeclaratify = (chatThreadClient: ChatThreadClient, context: ChatContext): ChatThreadClient => {\n  context.createThreadIfNotExist(chatThreadClient.threadId);\n  return (new Proxy(chatThreadClient, new ProxyChatThreadClient(context)) as ChatThreadClient);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}