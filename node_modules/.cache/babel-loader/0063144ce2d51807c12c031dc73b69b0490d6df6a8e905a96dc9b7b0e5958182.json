{"ast":null,"code":"import _slicedToArray from \"C:/Users/Administrator/frontendapp/communicationapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Layer, Stack } from '@fluentui/react';\nimport React, { useMemo } from 'react';\nimport { _DrawerMenu } from './Drawer';\nimport { StreamMedia } from './StreamMedia';\nimport { drawerMenuWrapperStyles, remoteVideoTileWrapperStyle } from './VideoGallery/styles/RemoteVideoTile.styles';\nimport { useRemoteVideoStreamLifecycleMaintainer } from './VideoGallery/useVideoStreamLifecycleMaintainer';\nimport { useVideoTileContextualMenuProps } from './VideoGallery/useVideoTileContextualMenuProps';\nimport { VideoTile } from './VideoTile';\n/**\n * A memoized version of VideoTile for rendering remote participants. React.memo is used for a performance\n * boost by memoizing the same rendered component to avoid rerendering a VideoTile when its position in the\n * array changes causing a rerender in the parent component. https://reactjs.org/docs/react-api.html#reactmemo\n *\n * @internal\n */\nexport var _RemoteVideoTile = React.memo(function (props) {\n  var isAvailable = props.isAvailable,\n    _props$isReceiving = props.isReceiving,\n    isReceiving = _props$isReceiving === void 0 ? true : _props$isReceiving,\n    isScreenSharingOn = props.isScreenSharingOn,\n    onCreateRemoteStreamView = props.onCreateRemoteStreamView,\n    onDisposeRemoteStreamView = props.onDisposeRemoteStreamView,\n    remoteVideoViewOptions = props.remoteVideoViewOptions,\n    renderElement = props.renderElement,\n    userId = props.userId,\n    onRenderAvatar = props.onRenderAvatar,\n    showMuteIndicator = props.showMuteIndicator,\n    remoteParticipant = props.remoteParticipant,\n    participantState = props.participantState,\n    _props$showRemoteVide = props.showRemoteVideoTileContextualMenu,\n    showRemoteVideoTileContextualMenu = _props$showRemoteVide === void 0 ? true : _props$showRemoteVide,\n    isPinned = props.isPinned,\n    onPinParticipant = props.onPinParticipant,\n    onUnpinParticipant = props.onUnpinParticipant;\n  var remoteVideoStreamProps = useMemo(function () {\n    return {\n      isMirrored: remoteVideoViewOptions === null || remoteVideoViewOptions === void 0 ? void 0 : remoteVideoViewOptions.isMirrored,\n      isScreenSharingOn: isScreenSharingOn,\n      isStreamAvailable: isAvailable,\n      isStreamReceiving: isReceiving,\n      onCreateRemoteStreamView: onCreateRemoteStreamView,\n      onDisposeRemoteStreamView: onDisposeRemoteStreamView,\n      remoteParticipantId: userId,\n      renderElementExists: !!renderElement,\n      scalingMode: remoteVideoViewOptions === null || remoteVideoViewOptions === void 0 ? void 0 : remoteVideoViewOptions.scalingMode\n    };\n  }, [isAvailable, isReceiving, isScreenSharingOn, onCreateRemoteStreamView, onDisposeRemoteStreamView, remoteVideoViewOptions === null || remoteVideoViewOptions === void 0 ? void 0 : remoteVideoViewOptions.isMirrored, remoteVideoViewOptions === null || remoteVideoViewOptions === void 0 ? void 0 : remoteVideoViewOptions.scalingMode, renderElement, userId]);\n  // Handle creating, destroying and updating the video stream as necessary\n  var createVideoStreamResult = useRemoteVideoStreamLifecycleMaintainer(remoteVideoStreamProps);\n  var contextualMenuProps = useVideoTileContextualMenuProps({\n    remoteParticipant: remoteParticipant,\n    view: createVideoStreamResult === null || createVideoStreamResult === void 0 ? void 0 : createVideoStreamResult.view,\n    isPinned: isPinned,\n    onPinParticipant: onPinParticipant,\n    onUnpinParticipant: onUnpinParticipant\n  });\n  var videoTileContextualMenuProps = useMemo(function () {\n    if (!showRemoteVideoTileContextualMenu) {\n      return {};\n    }\n    return videoTileContextualMenuPropsTrampoline(contextualMenuProps);\n  }, [contextualMenuProps, showRemoteVideoTileContextualMenu]);\n  var showLoadingIndicator = isAvailable && isReceiving === false && participantState !== 'Disconnected';\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    drawerMenuItemProps = _React$useState2[0],\n    setDrawerMenuItemProps = _React$useState2[1];\n  var renderVideoStreamElement = useMemo(function () {\n    // Checking if renderElement is well defined or not as calling SDK has a number of video streams limitation which\n    // implies that, after their threshold, all streams have no child (blank video)\n    if (!renderElement || !renderElement.childElementCount) {\n      // Returning `undefined` results in the placeholder with avatar being shown\n      return undefined;\n    }\n    return React.createElement(StreamMedia, {\n      videoStreamElement: renderElement,\n      loadingState: showLoadingIndicator ? 'loading' : 'none'\n    });\n  }, [renderElement, showLoadingIndicator]);\n  return React.createElement(Stack, {\n    style: remoteVideoTileWrapperStyle\n  }, React.createElement(VideoTile, Object.assign({\n    key: userId,\n    userId: userId,\n    renderElement: renderVideoStreamElement,\n    displayName: remoteParticipant.displayName,\n    onRenderPlaceholder: onRenderAvatar,\n    isMuted: remoteParticipant.isMuted,\n    isSpeaking: remoteParticipant.isSpeaking,\n    showMuteIndicator: showMuteIndicator,\n    personaMinSize: props.personaMinSize,\n    showLabel: props.showLabel\n  }, videoTileContextualMenuProps)), drawerMenuItemProps.length > 0 && React.createElement(Layer, {\n    hostId: props.drawerMenuHostId\n  }, React.createElement(Stack, {\n    styles: drawerMenuWrapperStyles\n  }, React.createElement(_DrawerMenu, {\n    onLightDismiss: function onLightDismiss() {\n      return setDrawerMenuItemProps([]);\n    },\n    items: drawerMenuItemProps\n  }))));\n});\nvar videoTileContextualMenuPropsTrampoline = function videoTileContextualMenuPropsTrampoline(contextualMenuProps) {\n  if (!contextualMenuProps) {\n    return {};\n  }\n  return {};\n};","map":{"version":3,"names":["Layer","Stack","React","useMemo","_DrawerMenu","StreamMedia","drawerMenuWrapperStyles","remoteVideoTileWrapperStyle","useRemoteVideoStreamLifecycleMaintainer","useVideoTileContextualMenuProps","VideoTile","_RemoteVideoTile","memo","props","isAvailable","_props$isReceiving","isReceiving","isScreenSharingOn","onCreateRemoteStreamView","onDisposeRemoteStreamView","remoteVideoViewOptions","renderElement","userId","onRenderAvatar","showMuteIndicator","remoteParticipant","participantState","_props$showRemoteVide","showRemoteVideoTileContextualMenu","isPinned","onPinParticipant","onUnpinParticipant","remoteVideoStreamProps","isMirrored","isStreamAvailable","isStreamReceiving","remoteParticipantId","renderElementExists","scalingMode","createVideoStreamResult","contextualMenuProps","view","videoTileContextualMenuProps","videoTileContextualMenuPropsTrampoline","showLoadingIndicator","_React$useState","useState","_React$useState2","_slicedToArray","drawerMenuItemProps","setDrawerMenuItemProps","renderVideoStreamElement","childElementCount","undefined","createElement","videoStreamElement","loadingState","style","Object","assign","key","displayName","onRenderPlaceholder","isMuted","isSpeaking","personaMinSize","showLabel","length","hostId","drawerMenuHostId","styles","onLightDismiss","items"],"sources":["C:\\Users\\Administrator\\frontendapp\\communicationapp\\node_modules\\@azure\\communication-react\\preprocess-dist\\react-components\\src\\components\\RemoteVideoTile.tsx"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { IContextualMenuProps, Layer, Stack } from '@fluentui/react';\nimport React, { useMemo } from 'react';\nimport { CreateVideoStreamViewResult, OnRenderAvatarCallback, ParticipantState, VideoGalleryRemoteParticipant, VideoStreamOptions } from '../types';\nimport { _DrawerMenu, _DrawerMenuItemProps } from './Drawer';\nimport { StreamMedia } from './StreamMedia';\nimport { VideoGalleryStrings } from './VideoGallery';\nimport { drawerMenuWrapperStyles, remoteVideoTileWrapperStyle } from './VideoGallery/styles/RemoteVideoTile.styles';\nimport { RemoteVideoStreamLifecycleMaintainerProps, useRemoteVideoStreamLifecycleMaintainer } from './VideoGallery/useVideoStreamLifecycleMaintainer';\nimport { useVideoTileContextualMenuProps } from './VideoGallery/useVideoTileContextualMenuProps';\nimport { VideoTile } from './VideoTile';\n\n/**\n * A memoized version of VideoTile for rendering remote participants. React.memo is used for a performance\n * boost by memoizing the same rendered component to avoid rerendering a VideoTile when its position in the\n * array changes causing a rerender in the parent component. https://reactjs.org/docs/react-api.html#reactmemo\n *\n * @internal\n */\nexport const _RemoteVideoTile = React.memo((props: {\n  userId: string;\n  remoteParticipant: VideoGalleryRemoteParticipant;\n  onCreateRemoteStreamView?: (userId: string, options?: VideoStreamOptions) => Promise<void | CreateVideoStreamViewResult>;\n  onDisposeRemoteStreamView?: (userId: string) => Promise<void>;\n  isAvailable?: boolean;\n  isReceiving?: boolean;\n  isScreenSharingOn?: boolean; // TODO: Remove this once onDisposeRemoteStreamView no longer disposes of screen share stream\n  renderElement?: HTMLElement;\n  remoteVideoViewOptions?: VideoStreamOptions;\n  onRenderAvatar?: OnRenderAvatarCallback;\n  showMuteIndicator?: boolean;\n  showLabel?: boolean;\n  personaMinSize?: number;\n  strings?: VideoGalleryStrings;\n  participantState?: ParticipantState;\n  showRemoteVideoTileContextualMenu?: boolean;\n  drawerMenuHostId?: string;\n  onPinParticipant?: (userId: string) => void;\n  onUnpinParticipant?: (userId: string) => void;\n  isPinned?: boolean;\n}) => {\n  const {\n    isAvailable,\n    isReceiving = true,\n    // default to true to prevent any breaking change\n    isScreenSharingOn,\n    onCreateRemoteStreamView,\n    onDisposeRemoteStreamView,\n    remoteVideoViewOptions,\n    renderElement,\n    userId,\n    onRenderAvatar,\n    showMuteIndicator,\n    remoteParticipant,\n    participantState,\n    showRemoteVideoTileContextualMenu = true,\n    isPinned,\n    onPinParticipant,\n    onUnpinParticipant\n  } = props;\n  const remoteVideoStreamProps: RemoteVideoStreamLifecycleMaintainerProps = useMemo(() => ({\n    isMirrored: remoteVideoViewOptions?.isMirrored,\n    isScreenSharingOn,\n    isStreamAvailable: isAvailable,\n    isStreamReceiving: isReceiving,\n    onCreateRemoteStreamView,\n    onDisposeRemoteStreamView,\n    remoteParticipantId: userId,\n    renderElementExists: !!renderElement,\n    scalingMode: remoteVideoViewOptions?.scalingMode\n  }), [isAvailable, isReceiving, isScreenSharingOn, onCreateRemoteStreamView, onDisposeRemoteStreamView, remoteVideoViewOptions?.isMirrored, remoteVideoViewOptions?.scalingMode, renderElement, userId]);\n\n  // Handle creating, destroying and updating the video stream as necessary\n  const createVideoStreamResult = useRemoteVideoStreamLifecycleMaintainer(remoteVideoStreamProps);\n  const contextualMenuProps = useVideoTileContextualMenuProps({\n    remoteParticipant,\n    view: createVideoStreamResult?.view,\n    isPinned,\n    onPinParticipant,\n    onUnpinParticipant\n  });\n  const videoTileContextualMenuProps = useMemo(() => {\n    if (!showRemoteVideoTileContextualMenu) {\n      return {};\n    }\n    return videoTileContextualMenuPropsTrampoline(contextualMenuProps);\n  }, [contextualMenuProps, showRemoteVideoTileContextualMenu]);\n  const showLoadingIndicator = isAvailable && isReceiving === false && participantState !== 'Disconnected';\n  const [drawerMenuItemProps, setDrawerMenuItemProps] = React.useState<_DrawerMenuItemProps[]>([]);\n  const renderVideoStreamElement = useMemo(() => {\n    // Checking if renderElement is well defined or not as calling SDK has a number of video streams limitation which\n    // implies that, after their threshold, all streams have no child (blank video)\n    if (!renderElement || !renderElement.childElementCount) {\n      // Returning `undefined` results in the placeholder with avatar being shown\n      return undefined;\n    }\n    return <StreamMedia videoStreamElement={renderElement} loadingState={showLoadingIndicator ? 'loading' : 'none'} />;\n  }, [renderElement, showLoadingIndicator]);\n  return <Stack style={remoteVideoTileWrapperStyle}>\n        <VideoTile key={userId} userId={userId} renderElement={renderVideoStreamElement} displayName={remoteParticipant.displayName} onRenderPlaceholder={onRenderAvatar} isMuted={remoteParticipant.isMuted} isSpeaking={remoteParticipant.isSpeaking} showMuteIndicator={showMuteIndicator} personaMinSize={props.personaMinSize} showLabel={props.showLabel} {...videoTileContextualMenuProps} />\n        {drawerMenuItemProps.length > 0 && <Layer hostId={props.drawerMenuHostId}>\n            <Stack styles={drawerMenuWrapperStyles}>\n              <_DrawerMenu onLightDismiss={() => setDrawerMenuItemProps([])} items={drawerMenuItemProps} />\n            </Stack>\n          </Layer>}\n      </Stack>;\n});\nconst videoTileContextualMenuPropsTrampoline = (contextualMenuProps?: IContextualMenuProps): {\n  contextualMenu?: IContextualMenuProps;\n} => {\n  if (!contextualMenuProps) {\n    return {};\n  }\n  return {};\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}